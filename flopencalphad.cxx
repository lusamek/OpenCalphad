// generated by Fast Light User Interface Designer (fluid) version 1.0304

#include "flopencalphad.h"
#include <stdio.h>
#include <stdlib.h>
#include "ccode.h"
static int plot_adv_computer_skipint_int = 0; 
#include <FL/Fl_Output.H>
#include "flopencalphad_def.h"

void redraw() {
  printf("> Procedure redraw!\n");
  
  
  strncpy( var_calc_x ,  input_var_calc_x->value() , PATH_MAX );
  strncpy( var_calc_y ,  input_var_calc_y->value() , PATH_MAX );
  // strncpy( var_plot_x ,  input_var_plot_x->value() , PATH_MAX );
  // strncpy( var_plot_y ,  input_var_plot_y->value() , PATH_MAX );
  strncpy( var_tdb_database, input_var_tdb_database->value(), PATH_MAX );  
  
  strncpy( var_system ,      output_system->value() , PATH_MAX );
  // output_system->value( "fe c" );
  // output_system->value( var_system  );
  
  // input_var_set_condition->value( "t=1000 p=1e5 n=1 x(c)=0.2 " );
  printf("Conditions\n");
}

Fl_Double_Window *win1=(Fl_Double_Window *)0;

static void cb_Fe(Fl_Button*, void*) {
  printf( " Fe Element Selected\n" );

// printf( "%s\n" ,   inputline->value( browser1->text(  browser1->value() )  ) ) ;

  strncat( var_system , "fe" , PATH_MAX - strlen( var_system ) -1 );
  strncat( var_system , " " ,  PATH_MAX -  strlen( var_system ) -1 );
  output_system->value( var_system );
  var_calc_number_element++;
  add_new_element( "fe" );
  redraw();
}

static void cb_C(Fl_Button*, void*) {
  printf( " C Selected\n" );



  strncat( var_system , "c" , PATH_MAX - strlen( var_system ) -1 );
  strncat( var_system , " " , PATH_MAX -  strlen( var_system ) -1 );
    output_system->value( var_system );


  var_calc_number_element++;

  add_new_element( "c" );  


redraw();
}

static void cb_Mn(Fl_Button*, void*) {
  printf( " Mn Selected\n" );


  strncat( var_system , "mn" , PATH_MAX - strlen( var_system ) -1 );
  strncat( var_system , " " , PATH_MAX -  strlen( var_system ) -1 );
    output_system->value( var_system );
    
  var_calc_number_element++;
  

  add_new_element( "mn" );  


redraw();
}

static void cb_Al(Fl_Button*, void*) {
  printf( " Al Selected\n" );


  strncat( var_system , "al" , PATH_MAX - strlen( var_system ) -1 );
  strncat( var_system , " " , PATH_MAX -  strlen( var_system ) -1 );
    output_system->value( var_system );  

  var_calc_number_element++;
  
  
  add_new_element( "al" );  


  

redraw();
}

static void cb_Si(Fl_Button*, void*) {
  // printf( "%s\n" ,   inputline->value( browser1->text(  browser1->value() )  ) ) ;


printf( " Si Selected\n" );

  strncat( var_system , "si" , PATH_MAX - strlen( var_system ) -1 );
  strncat( var_system , " " , PATH_MAX -  strlen( var_system ) -1 );
    output_system->value( var_system );

  var_calc_number_element++;
  

  add_new_element( "si" );  



redraw();
}

static void cb_V(Fl_Button*, void* v) {
  printf( " V Selected\n" );


  strncat( var_system , "v" , PATH_MAX - strlen( var_system ) -1 );
  strncat( var_system , " " , PATH_MAX -  strlen( var_system ) -1 );
    output_system->value( var_system );

  var_calc_number_element++;
  
  add_new_element( "v" );  



redraw();
}

static void cb_Mo(Fl_Button*, void*) {
  printf( " Mo Selected\n" );

  strncat( var_system , "mo" , PATH_MAX - strlen( var_system ) -1 );
  strncat( var_system , " " , PATH_MAX -  strlen( var_system ) -1 );
    output_system->value( var_system );

  var_calc_number_element++;
  

  add_new_element( "mo" );  


redraw();
}

static void cb_Cr(Fl_Button*, void*) {
  printf( " Cr Selected\n" );


  strncat( var_system , "cr" , PATH_MAX - strlen( var_system ) -1 );
  strncat( var_system , " " , PATH_MAX -  strlen( var_system ) -1 );
    output_system->value( var_system );

  var_calc_number_element++;
  
  add_new_element( "cr" );  



redraw();
}

static void cb_Cu(Fl_Button*, void*) {
  printf( " Cu Selected\n" );

  strncat( var_system , "cu" , PATH_MAX - strlen( var_system ) -1 );
  strncat( var_system , " " , PATH_MAX -  strlen( var_system ) -1 );
    output_system->value( var_system );

  var_calc_number_element++;
  

  add_new_element( "cu" );  



redraw();
}

static void cb_Nb(Fl_Button*, void*) {
  printf( " nb Selected\n" );


  strncat( var_system , "nb" , PATH_MAX - strlen( var_system ) -1 );
  strncat( var_system , " " , PATH_MAX -  strlen( var_system ) -1 );
    output_system->value( var_system );
    
  var_calc_number_element++;
  

  add_new_element( "nb" );  

redraw();
}

static void cb_Ni(Fl_Button*, void*) {
  printf( " ni Selected\n" );


  strncat( var_system , "ni" , PATH_MAX - strlen( var_system ) -1 );
  strncat( var_system , " " , PATH_MAX -  strlen( var_system ) -1 );
    output_system->value( var_system );

  var_calc_number_element++;
  
  
  add_new_element( "ni" );  


  

redraw();
}

static void cb_Ag(Fl_Button*, void*) {
  printf( " ag Selected\n" );


  strncat( var_system , "ag" , PATH_MAX - strlen( var_system ) -1 );
  strncat( var_system , " " , PATH_MAX -  strlen( var_system ) -1 );
    output_system->value( var_system );

  var_calc_number_element++;
  
  add_new_element( "ag" );  



redraw();
}

static void cb_Ti(Fl_Button*, void*) {
  printf( " ti Selected\n" );


  strncat( var_system , "ti" , PATH_MAX - strlen( var_system ) -1 );
  strncat( var_system , " " , PATH_MAX -  strlen( var_system ) -1 );
    output_system->value( var_system );

  var_calc_number_element++;
  

  add_new_element( "ti" );  


redraw();
}

static void cb_Zn(Fl_Button*, void*) {
  printf( " zn Selected\n" );


  strncat( var_system , "zn" , PATH_MAX - strlen( var_system ) -1 );
  strncat( var_system , " " , PATH_MAX -  strlen( var_system ) -1 );
    output_system->value( var_system );

  var_calc_number_element++;
  
  add_new_element( "zn" );  



redraw();
}

static void cb_W(Fl_Button*, void*) {
  printf( " w Selected\n" );


  strncat( var_system , "w" , PATH_MAX - strlen( var_system ) -1 );
  strncat( var_system , " " , PATH_MAX -  strlen( var_system ) -1 );
    output_system->value( var_system );

  var_calc_number_element++;
  
  add_new_element( "w" );  



redraw();
}

static void cb_(Fl_Button*, void*) {
  form_element_pse->show();
}

Fl_Output *output_system=(Fl_Output *)0;

static void cb_CA(Fl_Button*, void*) {
  printf( " Clr \n" );

// printf( "%s\n" ,   inputline->value( browser1->text(  browser1->value() )  ) ) ;


   input_var_set_condition->value( " t=1000 p=1e5 n=1  " );
   
   strncpy( var_system, "", PATH_MAX );
   output_system->value( var_system ); 
   
   var_calc_number_element = 0; 

   redraw();
}

Fl_Input *input_var_calc_x=(Fl_Input *)0;

static void cb_CA1(Fl_Button*, void*) {
  printf( " Clr \n" );

// printf( "%s\n" ,   inputline->value( browser1->text(  browser1->value() )  ) ) ;

input_var_calc_x->value( "" );

redraw();
}

Fl_Input *input_var_calc_y=(Fl_Input *)0;

static void cb_CA2(Fl_Button*, void*) {
  printf( " Clr \n" );

// printf( "%s\n" ,   inputline->value( browser1->text(  browser1->value() )  ) ) ;

input_var_calc_y->value( "" );

redraw();
}

Fl_Input *input_var_tdb_database=(Fl_Input *)0;

static void cb_CA3(Fl_Button*, void*) {
  printf( " Clr \n" );

// printf( "%s\n" ,   inputline->value( browser1->text(  browser1->value() )  ) ) ;

input_var_tdb_database->value( "" );

redraw();
}

static void cb_Quit(Fl_Button*, void*) {
  exit( 0 );
}

static void cb_3(Fl_Button*, void*) {
  char mydirnow[2500];
  printf( "Current Directory: %s \n", getcwd( mydirnow, 2500 ) );

  void_plot_preview_plotfile(   "ocgnu.plt"   );

  redraw();
  
  if ( checkbutton_xterm_console->value( ) == 1 ) 
     nsystem(  "  screen -d  -m   xterm -e   oc   macro.ocm " );
     
  else if ( checkbutton_single_console->value( ) == 1 ) 
     nsystem(  "  oc   macro.ocm " );
     
     
  
  // oc6 bug 
  // gnuplot ocgnu.plt  &;
}

static void cb_2(Fl_Button*, void*) {
  redraw();

nsystem( "  screen -d -m fledit  macro.ocm " );
}

static void cb_1(Fl_Button*, void*) {
  redraw();

clear_plot();


create_macro( );


void_flfront_preview_browser1_refresh();
}

static void cb_4(Fl_Button*, void*) {
  char mydirnow[2500];
  printf( "Current Directory: %s \n", getcwd( mydirnow, 2500 ) );



  redraw();
  nsystem(  "  screen -d  -m  gnuplot ocgnu.plt  " );
  
  
  // oc6 bug 
  // gnuplot ocgnu.plt  &;
}

static void cb_Option(Fl_Button*, void*) {
  win3->show();
}

Fl_Browser *flfront_preview_browser1=(Fl_Browser *)0;

static void cb_Refresh(Fl_Button*, void*) {
  void_flfront_preview_browser1_refresh();
}

static void cb_Edit(Fl_Button*, void*) {
  redraw();

nsystem( "  screen -d -m fledit  macro.ocm " );
}

static void cb_Database(Fl_Button*, void*) {
  win2->show();
}

static void cb_Plot(Fl_Button*, void*) {
  win4->show();
}

static void cb_Macro(Fl_Button*, void*) {
  win5->show();
}

static void cb_Conditio(Fl_Button*, void*) {
  win6->show();
}

static void cb_Help(Fl_Button*, void*) {
  if ( fexist( "/usr/bin/chromium" ) == 1) 
   nsystem(  " screen -d -m chromium  --new-window  http://github.com/lusamek/opencalphad " );
   
else if ( fexist( "/usr/bin/chromium-browser" ) == 1) 
   nsystem(  " screen -d -m chromium-browser   --new-window  http://github.com/lusamek/opencalphad " );
   
else
   nsystem(  " screen -d -m dillo http://github.com/lusamek/opencalphad " );
}

static void cb_Period(Fl_Button*, void*) {
  nsystem( " screen -d -m gperiodic " );
}

Fl_Double_Window *win2=(Fl_Double_Window *)0;

static void cb_Close(Fl_Button*, void*) {
  win2->hide();
}

Fl_File_Browser *form_database_tab1_filebrowser1=(Fl_File_Browser *)0;

static void cb_form_database_tab1_filebrowser1(Fl_File_Browser*, void*) {
  printf( " Click 1\n" );
 
if ( form_database_tab1_filebrowser1->value() >= 1 )
if ( fexist( form_database_tab1_filebrowser1->text( form_database_tab1_filebrowser1->value() ) ) == 2 ) 
{
  
   
    
}

else 
{
   printf( "File: %s\n",   form_database_tab1_filebrowser1->text( form_database_tab1_filebrowser1->value() ) ); 
   form_database_tab1_currentfile->value(     form_database_tab1_filebrowser1->text( form_database_tab1_filebrowser1->value() )  );


  printf( "Click\n" );



 input_var_tdb_database->value(  form_database_tab1_filebrowser1->text(   form_database_tab1_filebrowser1->value() ) ); 
 
  
  printf( "============================\n" );
  printf( "   ELEMENT                  \n" );
  printf( "============================\n" );
  
  filegrep( input_var_tdb_database->value() , "ELEM" );

 redraw();
 
};
}

Fl_Output *form_database_tab1_currentfile=(Fl_Output *)0;

Fl_Input *form_database_tab1_filter=(Fl_Input *)0;

static void cb_form_database_tab1_filter(Fl_Input*, void*) {
  printf( " Press Enter\n" );
 

if ( strcmp( form_database_tab1_filter->value(  ) , "" ) == 0 ) 
{
      form_database_tab1_filebrowser1->filter(  0  ); 
      
 }
  else 
 {
         form_database_tab1_filebrowser1->filter(  form_database_tab1_filter->value(  )  );

 
 } 
  
  
   printf( " Path \n" );
   char cwd[PATH_MAX];
   printf( "Path %s\n" ,  getcwd( cwd, PATH_MAX ) );
   
   
   form_database_tab1_currentfile->value();
   
   form_database_tab1_filebrowser1->load( "." );
}

Fl_Browser *browser1=(Fl_Browser *)0;

static void cb_browser1(Fl_Browser*, void*) {
  printf( "Click\n" );



 input_var_tdb_database->value(  browser1->text(   browser1->value() ) ); 
 
  
  printf( "============================\n" );
  printf( "   ELEMENT                  \n" );
  printf( "============================\n" );
  
  filegrep( input_var_tdb_database->value() , "ELEM" );


 redraw();
}

Fl_Input *input_notes=(Fl_Input *)0;

static void cb_Add(Fl_Button*, void*) {
  browser1->add(   input_notes->value()  );

// if (  browser1->value() >= 1 )  printf( "%s\n" ,   browser1->text(  browser1->value() )  )  ;
}

static void cb_Edit1(Fl_Button*, void*) {
  redraw();
  
  char charo[PATH_MAX];
  strncpy( charo, "", PATH_MAX );
  strncat( charo , " screen -d -m  fledit  " , PATH_MAX - strlen( charo ) -1 );
  strncat( charo , " " , PATH_MAX -  strlen( charo ) -1 );
  strncat( charo , " \"" , PATH_MAX -  strlen( charo ) -1 );
  strncat( charo , var_tdb_database , PATH_MAX -  strlen( charo ) -1 );
  strncat( charo , "\" " , PATH_MAX -  strlen( charo ) -1 );
  nsystem(  charo );
}

static void cb_ls(Fl_Button*, void*) {
  redraw();

  printf( "============================\n" );
  printf( "   DATABASE                 \n" );
  printf( "============================\n" );
  
  nlsgrep( ".tdb" );
  nlsgrep( ".TDB" );
}

static void cb_Elemen(Fl_Button*, void*) {
  redraw();
  
  
  printf( "============================\n" );
  printf( "   ELEMENT                  \n" );
  printf( "============================\n" );
  
  
  
  filegrep( var_tdb_database , "ELEM" );
}

static void cb_Browse(Fl_Button*, void*) {
  redraw();

  printf( "============================\n" );
  printf( "   DATABASE                 \n" );
  printf( "============================\n" );
  
  nlsgrep( ".tdb" );
  nlsgrep( ".TDB" );
  
  
  printf( "============================\n" );
  printf( "   DATABASE                 \n" );
  printf( "============================\n" );

  
        browser1->clear();
	DIR *dirp;
	struct dirent *dp;
	dirp = opendir( "." );
	while  ((dp = readdir( dirp )) != NULL ) 
	{
		if (  strcmp( dp->d_name, "." ) != 0 )
		if (  strcmp( dp->d_name, ".." ) != 0 )
                {
                    if ( ( strstr( dp->d_name, ".TDB" ) != 0 )  || ( strstr( dp->d_name, ".tdb" ) != 0 )  ) 
                    {
			printf( "%s\n", dp->d_name );
 		        browser1->add(  dp->d_name  );
 		     }
                }
	}
	closedir( dirp );
}

static void cb_Species(Fl_Button*, void*) {
  redraw();
  
  
  printf( "============================\n" );
  printf( "   SPECIES                  \n" );
  printf( "============================\n" );
  
  
  
  filegrep( var_tdb_database , "SPECIE" );
}

static void cb_Path(Fl_Button*, void*) {
  redraw();

  printf( "============================\n" );
  printf( "   PATH                     \n" );
  printf( "============================\n" );
  
    char mydirnow[2500];
  printf( "Current Directory: %s \n", getcwd( mydirnow, 2500 ) );
}

static void cb_View(Fl_Button*, void*) {
  redraw();
  
  char charo[PATH_MAX];
  strncpy( charo, "", PATH_MAX );
  strncat( charo , " screen -d -m  flview   " , PATH_MAX - strlen( charo ) -1 );
  strncat( charo , " " , PATH_MAX -  strlen( charo ) -1 );
  strncat( charo , " \"" , PATH_MAX -  strlen( charo ) -1 );
  strncat( charo , var_tdb_database , PATH_MAX -  strlen( charo ) -1 );
  strncat( charo , "\" " , PATH_MAX -  strlen( charo ) -1 );
  nsystem(  charo );
}

static void cb_Phase(Fl_Button*, void*) {
  redraw();
  
  
  printf( "============================\n" );
  printf( "   PHASE                   \n" );
  printf( "============================\n" );
  
  
  
  filegrep( var_tdb_database , "PHASE " );
}

static void cb_Fun(Fl_Button*, void*) {
  redraw();
  
  
  printf( "============================\n" );
  printf( "   FUN                   \n" );
  printf( "============================\n" );
  
  
  
  filegrep( var_tdb_database , "FUN " );
}

static void cb_Function(Fl_Button*, void*) {
  redraw();
  
  
  printf( "============================\n" );
  printf( "   FUNCTION                  \n" );
  printf( "============================\n" );
  
  
  
  filegrep( var_tdb_database , "FUNCTION " );
}

static void cb_Cat(Fl_Button*, void*) {
  redraw();
  ncat( var_tdb_database );
}

static void cb_Fetch(Fl_Button*, void*) {
  redraw();
  
  char charo[PATH_MAX];
  strncpy( charo, "", PATH_MAX );
  strncat( charo , " xterm -e wget  -c     " , PATH_MAX - strlen( charo ) -1 );
  strncat( charo , " " , PATH_MAX -  strlen( charo ) -1 );
  strncat( charo , " \"" , PATH_MAX -  strlen( charo ) -1 );
  strncat( charo , form_database_fetch_url->value() , PATH_MAX -  strlen( charo ) -1 );
  strncat( charo , "\" " , PATH_MAX -  strlen( charo ) -1 );
  nsystem(  charo );
 

redraw();

  printf( "============================\n" );
  printf( "   DATABASE                 \n" );
  printf( "============================\n" );
  
  nlsgrep( ".tdb" );
  nlsgrep( ".TDB" );
  
  
  printf( "============================\n" );
  printf( "   DATABASE                 \n" );
  printf( "============================\n" );

  
        browser1->clear();
	DIR *dirp;
	struct dirent *dp;
	dirp = opendir( "." );
	while  ((dp = readdir( dirp )) != NULL ) 
	{
		if (  strcmp( dp->d_name, "." ) != 0 )
		if (  strcmp( dp->d_name, ".." ) != 0 )
                {
                    if ( ( strstr( dp->d_name, ".TDB" ) != 0 )  || ( strstr( dp->d_name, ".tdb" ) != 0 )  ) 
                    {
			printf( "%s\n", dp->d_name );
 		        browser1->add(  dp->d_name  );
 		     }
                }
	}
	closedir( dirp );
}

static void cb_dos2unix(Fl_Button*, void*) {
  redraw();
  
  char charo[PATH_MAX];
  strncpy( charo, "", PATH_MAX );
  strncat( charo , " xterm -e dos2unix    " , PATH_MAX - strlen( charo ) -1 );
  strncat( charo , " " , PATH_MAX -  strlen( charo ) -1 );
  strncat( charo , " \"" , PATH_MAX -  strlen( charo ) -1 );
  strncat( charo , var_tdb_database , PATH_MAX -  strlen( charo ) -1 );
  strncat( charo , "\" " , PATH_MAX -  strlen( charo ) -1 );
  nsystem(  charo );
}

Fl_Input *form_database_fetch_url=(Fl_Input *)0;

static void cb_Edit2(Fl_Button*, void*) {
  redraw();
  
  char charo[PATH_MAX];
  strncpy( charo, "", PATH_MAX );
  strncat( charo , " screen -d -m  fledit  " , PATH_MAX - strlen( charo ) -1 );
  strncat( charo , " " , PATH_MAX -  strlen( charo ) -1 );
  strncat( charo , " \"" , PATH_MAX -  strlen( charo ) -1 );
  strncat( charo , var_tdb_database , PATH_MAX -  strlen( charo ) -1 );
  strncat( charo , "\" " , PATH_MAX -  strlen( charo ) -1 );
  nsystem(  charo );
}

Fl_Double_Window *win3=(Fl_Double_Window *)0;

static void cb_Close1(Fl_Button*, void*) {
  win3->hide();
}

static void cb_Keyboard(Fl_Button*, void*) {
  nsystem( " screen -d -m flkeyboard " );
}

#include <FL/Fl_Image.H>
static const unsigned char idata_keyboard_layout[] =
{99,49,49,0,99,49,49,0,99,49,49,0,99,49,49,0,102,50,50,0,77,39,39,0,0,0,0,0,
28,16,16,0,68,37,37,0,87,48,48,0,88,51,51,0,91,50,50,0,101,46,46,0,95,52,52,0,
95,46,46,0,93,52,52,0,86,43,43,12,94,41,41,58,101,46,46,115,122,48,48,163,146,
54,54,201,161,56,56,218,158,52,52,213,136,44,44,179,95,36,36,122,25,12,12,43,3,
3,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,99,49,49,0,99,49,49,0,99,49,49,
0,99,49,49,0,102,50,50,39,74,37,37,56,0,0,0,1,26,16,16,0,64,37,37,0,85,49,49,
0,86,52,52,0,86,52,52,0,94,47,47,0,90,52,52,16,93,44,44,86,122,43,43,158,163,
58,58,207,200,90,90,246,227,121,121,255,246,129,129,255,255,123,123,255,255,
112,112,255,255,103,103,255,254,110,110,255,237,112,112,255,185,75,75,233,39,15,
15,89,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,89,48,48,0,89,48,48,0,89,48,48,0,
86,48,48,0,102,47,47,94,172,47,47,255,123,42,42,194,81,35,35,119,73,36,36,77,
92,46,46,71,100,45,45,84,116,41,41,131,138,35,35,187,179,33,33,237,218,48,48,
255,249,77,77,255,255,109,109,255,255,135,135,255,255,154,154,255,255,145,145,
255,255,129,129,255,255,114,113,255,255,107,106,255,255,122,122,255,255,147,147,
255,242,112,112,255,48,13,13,170,0,0,0,26,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,81,42,
42,0,81,42,42,0,81,42,42,0,77,41,41,0,96,43,43,92,227,75,75,255,244,65,65,255,
204,30,30,255,184,11,10,255,191,9,9,255,215,7,7,255,240,3,3,255,254,13,13,255,
255,39,39,255,255,65,64,255,255,87,87,255,255,105,107,255,255,125,127,255,255,
143,144,255,255,136,138,255,255,121,125,255,255,106,112,255,255,98,106,255,255,
112,119,255,255,137,144,255,237,106,109,255,45,13,13,178,0,0,0,35,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,81,42,42,0,81,42,42,0,81,42,42,0,77,41,41,0,95,43,43,92,225,
74,75,255,247,69,69,255,226,30,30,255,214,1,1,255,226,0,0,255,243,0,0,255,254,
1,0,255,255,16,15,255,255,40,41,255,255,57,60,255,255,75,80,255,255,102,104,
255,255,143,138,255,255,180,169,255,255,190,165,255,255,188,143,255,255,179,115,
255,255,169,95,255,255,170,105,255,255,171,131,255,237,113,105,255,45,12,13,177,
0,0,0,35,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,81,42,42,0,81,42,42,0,81,42,42,0,77,
41,41,0,95,44,43,92,226,74,74,255,244,57,66,255,218,20,28,255,207,0,1,255,219,
0,0,255,236,0,0,255,252,0,0,255,255,4,10,255,255,35,37,255,255,82,72,255,255,
150,119,255,255,203,161,255,255,243,199,255,255,255,218,255,255,248,194,255,255,
234,155,255,255,218,115,255,255,211,89,255,255,224,89,255,255,251,100,255,237,
171,79,255,45,9,14,177,0,0,0,35,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,81,37,42,0,81,
37,42,0,81,37,42,0,77,34,41,0,95,43,42,92,225,171,79,255,254,170,84,255,233,89,
49,255,219,41,19,255,227,35,15,255,242,50,21,255,253,80,35,255,255,127,66,255,
255,180,106,255,255,220,140,255,255,241,167,255,255,245,185,255,255,250,204,255,
255,254,216,255,255,242,190,255,255,227,154,255,255,211,115,255,255,204,89,255,
255,218,91,255,255,250,101,255,237,180,75,255,45,8,15,177,0,0,0,35,0,0,0,0,0,0,
0,0,13,13,13,0,11,11,11,0,81,36,42,0,81,36,42,0,81,36,42,0,77,33,41,0,95,40,
42,92,224,194,80,255,255,253,99,255,255,217,89,255,254,190,81,255,253,188,80,
255,255,201,86,255,255,212,92,255,255,219,107,255,255,223,126,255,255,224,142,
255,255,230,162,255,255,239,182,255,255,247,202,255,255,253,216,255,255,242,190,
255,255,227,154,255,255,211,115,255,255,204,89,255,255,218,91,255,255,250,101,
255,239,179,75,255,45,8,13,175,0,0,0,31,24,23,24,0,14,13,14,0,11,11,11,0,11,11,
11,0,81,36,42,0,81,36,42,0,81,36,42,0,77,33,41,0,95,40,42,92,224,190,80,255,
255,242,97,255,255,208,87,255,255,194,82,255,255,195,84,255,255,198,86,255,255,
201,87,255,255,206,101,255,255,215,123,255,255,222,141,255,255,231,162,255,255,
239,182,255,255,247,202,255,255,253,216,255,255,242,190,255,255,227,154,255,255,
213,115,255,255,210,89,255,255,224,89,255,255,248,104,255,234,170,81,255,53,11,
27,184,23,21,31,53,89,76,90,4,16,14,16,0,10,10,10,0,11,11,11,0,80,36,43,0,81,
35,40,0,81,36,42,0,77,33,41,0,95,40,42,92,224,190,80,255,255,242,97,255,255,
207,86,255,255,190,81,255,255,193,82,255,255,202,85,255,255,201,87,255,255,206,
101,255,255,215,123,255,255,222,141,255,255,231,162,255,255,239,181,255,255,249,
204,255,255,255,220,255,255,246,192,255,254,229,150,255,240,200,106,255,212,174,
85,255,183,168,101,255,136,158,86,255,103,141,63,255,60,120,47,243,58,124,55,
221,66,113,66,200,56,71,60,143,47,41,48,51,8,8,8,0,44,45,97,0,65,44,73,0,84,35,
38,0,77,33,42,0,95,40,42,92,224,190,80,255,255,242,97,255,255,207,86,255,255,
192,81,255,233,176,83,255,208,169,85,255,246,206,90,255,255,215,103,255,255,224,
125,255,255,231,145,255,255,241,168,255,255,249,188,255,247,244,198,255,227,225,
194,255,214,204,169,255,197,185,155,255,182,177,168,255,205,203,213,255,212,230,
208,255,94,196,14,255,71,191,0,255,63,188,0,255,45,177,0,255,40,181,9,255,46,
186,35,255,66,144,68,248,21,23,22,90,44,44,94,0,53,57,108,0,68,47,74,0,79,32,37,
0,96,40,41,92,224,196,81,255,255,247,99,255,255,209,87,255,255,198,81,255,198,
155,85,255,145,62,67,255,168,98,70,255,178,143,90,255,191,170,111,255,194,177,
125,255,190,171,130,255,193,159,133,255,191,171,161,255,187,184,186,255,209,209,
217,255,226,229,239,255,246,247,253,255,255,255,255,255,235,249,218,255,106,203,
11,255,81,190,0,255,64,181,0,255,48,171,0,255,45,177,12,255,48,199,28,255,52,
185,50,255,19,30,21,157,44,44,95,0,55,55,103,0,53,58,107,0,64,46,75,0,98,37,39,
83,228,151,75,255,255,228,92,255,255,212,83,255,255,205,78,255,200,162,80,255,
207,73,76,255,248,54,59,255,205,20,25,255,184,3,7,255,191,4,8,255,207,0,3,255,
235,5,8,255,221,175,187,255,219,228,240,255,228,228,237,255,235,235,240,255,240,
240,244,255,252,249,255,255,234,247,217,255,106,202,11,255,80,190,0,255,65,181,
0,255,48,171,0,255,45,177,12,255,47,196,29,255,54,179,53,255,19,30,21,167,41,
41,93,14,56,55,103,98,58,58,103,128,54,60,106,119,74,55,85,171,153,65,89,255,
167,87,92,255,162,101,83,255,169,118,86,255,137,108,91,255,139,74,93,255,167,70,
87,255,157,51,68,255,153,37,53,255,180,20,31,255,237,0,0,255,249,1,1,255,218,
175,185,255,217,226,236,255,225,224,233,255,233,233,238,255,240,240,244,255,252,
249,255,255,234,247,217,255,106,202,11,255,80,190,0,255,65,181,0,255,48,171,0,
255,45,177,12,255,47,196,29,255,54,179,53,255,19,30,21,165,85,85,126,167,179,
179,197,255,171,171,192,255,170,170,191,255,169,171,194,255,162,170,195,255,156,
162,191,255,160,163,193,255,160,165,194,255,164,167,194,255,164,171,194,255,161,
172,195,255,163,174,197,255,161,176,198,255,162,181,201,255,177,40,52,255,253,0,
0,255,219,175,185,255,217,226,236,255,225,224,233,255,233,233,238,255,240,240,
244,255,252,249,255,255,234,247,217,255,106,202,11,255,80,190,0,255,65,181,0,
255,48,171,0,255,45,177,12,255,47,196,29,255,54,179,53,255,19,30,21,165,140,140,
169,240,207,207,219,255,191,191,208,255,144,144,166,255,137,137,158,255,184,184,
200,255,123,123,140,255,186,185,201,255,195,194,211,255,192,192,208,255,192,191,
208,255,192,192,208,255,193,192,209,255,186,185,203,255,205,220,232,255,174,94,
106,255,246,0,0,255,220,175,185,255,217,226,236,255,225,224,233,255,233,233,238,
255,240,240,244,255,252,249,255,255,234,247,217,255,106,202,11,255,80,190,0,255,
65,181,0,255,48,171,0,255,45,177,12,255,47,196,29,255,54,179,53,255,19,30,21,
165,137,137,165,243,212,212,223,255,193,193,209,255,126,126,150,255,118,118,141,
255,158,158,175,255,121,121,137,255,201,201,216,255,199,199,214,255,198,198,213,
255,198,198,213,255,198,198,213,255,198,198,213,255,195,194,210,255,206,220,232,
255,174,92,104,255,246,0,0,255,220,175,185,255,217,226,236,255,225,224,233,255,
233,233,238,255,240,240,244,255,252,249,255,255,234,247,217,255,106,202,11,255,
80,190,0,255,65,181,0,255,48,171,0,255,45,177,12,255,47,196,29,255,54,179,53,
255,19,30,21,165,134,134,162,241,220,220,229,255,188,188,204,255,141,141,164,
255,146,146,165,255,114,114,133,255,142,142,158,255,213,213,226,255,206,206,219,
255,206,206,219,255,206,206,219,255,206,206,219,255,206,206,219,255,204,203,217,
255,208,223,234,255,172,90,101,255,247,0,0,255,220,175,185,255,217,226,236,255,
225,224,233,255,233,233,238,255,240,240,244,255,252,249,255,255,234,247,217,255,
106,202,11,255,80,190,0,255,65,181,0,255,48,171,0,255,45,177,12,255,47,196,29,
255,54,179,53,255,19,30,21,165,133,133,161,241,226,226,234,255,176,176,193,255,
151,151,172,255,192,192,205,255,87,87,107,255,164,164,178,255,218,218,230,255,
211,211,223,255,211,211,223,255,211,211,223,255,211,211,223,255,211,211,223,255,
209,209,221,255,209,224,235,255,170,88,99,255,247,0,0,255,220,175,185,255,217,
226,236,255,225,224,233,255,233,233,238,255,240,240,244,255,252,249,255,255,234,
247,217,255,106,202,11,255,80,190,0,255,65,181,0,255,48,171,0,255,45,177,12,255,
47,196,29,255,54,179,53,255,19,30,21,165,131,131,158,241,227,227,235,255,190,
190,206,255,186,186,203,255,213,213,225,255,158,158,173,255,199,199,212,255,216,
216,227,255,213,213,225,255,213,213,225,255,213,213,225,255,213,213,225,255,213,
213,225,255,213,213,225,255,210,225,236,255,169,86,98,255,247,0,0,255,220,175,
185,255,217,226,236,255,225,224,233,255,233,233,238,255,240,240,244,255,252,249,
255,255,234,247,217,255,106,202,11,255,80,190,0,255,65,181,0,255,48,171,0,255,
45,177,12,255,47,196,29,255,54,179,53,255,19,30,21,165,129,129,157,241,227,227,
235,255,221,221,230,255,221,221,230,255,219,219,228,255,225,225,235,255,220,220,
229,255,218,218,227,255,218,218,228,255,218,218,228,255,218,218,228,255,218,218,
228,255,218,218,228,255,219,219,229,255,210,225,236,255,167,84,96,255,248,0,0,
255,220,175,185,255,217,226,236,255,225,224,233,255,233,233,238,255,240,240,244,
255,252,249,255,255,234,247,217,255,106,202,11,255,80,190,0,255,65,181,0,255,48,
171,0,255,45,177,12,255,47,196,29,255,54,179,53,255,19,30,21,165,126,126,155,
241,230,230,237,255,222,222,231,255,221,221,230,255,222,222,230,255,221,221,230,
255,221,221,230,255,222,222,230,255,222,222,230,255,222,222,230,255,222,222,230,
255,222,222,230,255,222,222,230,255,224,224,231,255,211,225,236,255,165,82,95,
255,248,0,0,255,220,175,185,255,217,226,236,255,225,224,233,255,233,233,238,255,
240,240,244,255,252,249,255,255,234,247,217,255,106,202,11,255,80,190,0,255,65,
181,0,255,48,171,0,255,45,177,12,255,47,196,29,255,54,179,53,255,19,30,21,165,
124,124,154,241,232,232,239,255,228,228,234,255,226,226,233,255,226,226,233,255,
226,226,233,255,226,226,233,255,226,226,233,255,226,226,233,255,226,226,233,255,
226,226,233,255,226,226,233,255,226,226,233,255,229,228,235,255,210,225,237,255,
163,80,93,255,249,0,0,255,220,175,185,255,217,226,236,255,225,224,233,255,233,
233,238,255,240,240,244,255,251,248,255,255,236,249,218,255,107,208,9,255,80,
197,0,255,63,186,0,255,45,176,0,255,42,183,7,255,48,199,27,255,54,180,53,255,19,
30,21,165,122,122,152,241,234,234,240,255,230,230,238,255,228,228,236,255,228,
228,236,255,228,228,236,255,228,228,236,255,228,228,236,255,228,228,236,255,228,
228,236,255,228,228,236,255,228,228,236,255,228,228,236,255,231,231,238,255,210,
224,236,255,162,78,92,255,249,0,0,255,220,175,185,255,216,226,236,255,227,227,
235,255,239,239,245,255,252,252,255,255,255,255,255,255,223,241,215,255,89,174,
46,255,66,144,41,255,64,131,49,255,60,128,47,255,54,144,43,255,45,183,36,255,
52,184,52,255,19,30,21,167,120,120,150,241,235,235,241,255,236,236,241,255,233,
233,240,255,233,233,240,255,233,233,240,255,233,233,240,255,233,233,240,255,233,
233,240,255,233,233,240,255,233,233,240,255,233,233,240,255,233,233,240,255,237,
237,242,255,210,224,236,255,162,77,90,255,253,0,0,255,227,180,190,255,227,235,
245,255,231,230,237,255,212,211,214,255,165,165,166,249,109,109,109,227,52,55,
54,198,27,27,31,171,17,14,21,147,12,8,15,131,15,10,17,128,29,24,30,145,38,48,
40,178,58,101,62,235,22,29,23,162,112,112,145,241,233,233,241,255,255,255,255,
255,250,250,252,255,250,250,252,255,250,250,252,255,250,250,252,255,250,250,252,
255,250,250,252,255,250,250,252,255,250,250,252,255,250,250,252,255,250,250,251,
255,255,255,255,255,204,217,232,255,153,76,89,255,227,21,20,255,187,150,155,255,
136,139,142,249,87,87,88,224,34,34,34,185,4,4,4,143,0,0,0,95,0,0,0,58,0,0,0,37,
0,0,0,24,0,0,0,16,0,0,0,12,0,0,0,15,0,0,0,26,10,6,10,69,6,6,6,81,106,106,139,
241,201,201,218,255,215,215,228,255,211,211,225,255,210,210,224,255,210,210,224,
255,210,210,224,255,210,210,224,255,210,210,224,255,210,210,224,255,210,210,224,
255,210,210,224,255,211,211,225,255,216,216,228,255,187,187,210,255,89,85,101,
240,33,33,32,189,16,18,17,154,1,1,0,122,0,0,0,88,0,0,0,51,0,0,0,22,0,0,0,6,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,100,100,
136,242,208,208,223,255,153,153,184,255,131,131,169,255,131,131,168,255,131,131,
168,255,131,131,168,255,131,131,168,255,131,131,168,255,131,131,168,255,131,131,
168,255,131,131,168,255,129,129,167,255,171,171,198,255,196,196,216,255,66,68,
85,224,0,0,0,94,0,0,0,28,0,0,0,15,0,0,0,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,97,97,134,243,166,
166,195,255,130,130,169,255,126,126,166,255,126,126,167,255,126,126,167,255,126,
126,167,255,126,126,167,255,126,126,167,255,126,126,167,255,126,126,167,255,126,
126,167,255,124,124,165,255,138,138,175,255,161,161,195,255,68,68,86,224,0,0,0,
70,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,77,77,111,194,119,119,165,255,123,
123,169,255,123,123,168,255,123,123,168,255,123,123,168,255,123,123,168,255,123,
123,168,255,124,124,168,255,124,124,168,255,124,124,168,255,124,124,168,255,124,
124,168,255,123,123,168,255,119,119,160,255,48,48,59,211,0,0,0,66,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,24,24,35,56,46,46,65,184,52,52,73,214,52,52,72,
213,52,52,72,213,53,53,72,213,53,53,72,213,53,53,72,213,55,55,72,213,55,55,72,
213,55,55,72,213,56,56,72,213,56,56,72,213,58,58,74,214,45,45,56,206,7,7,7,136,
0,0,0,37,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,23,0,0,0,54,
0,0,0,57,0,0,0,57,0,0,0,57,0,0,0,57,0,0,0,57,0,0,0,57,0,0,0,57,0,0,0,57,0,0,0,
57,0,0,0,57,0,0,0,58,0,0,0,57,0,0,0,35,0,0,0,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0};
static Fl_Image *image_keyboard_layout() {
  static Fl_Image *image = new Fl_RGB_Image(idata_keyboard_layout, 32, 32, 4, 0);
  return image;
}

static void cb_M(Fl_Button*, void*) {
  nsystem( " screen -d -m flmonitor " );
}

static const unsigned char idata_tv[] =
{255,255,255,0,255,255,255,0,255,255,255,0,255,255,255,0,255,255,255,0,255,
255,255,0,255,255,255,0,255,255,255,0,255,255,255,0,255,255,255,0,255,255,255,0,
255,255,255,0,255,255,255,0,255,255,255,0,255,255,255,0,255,255,255,0,255,255,
255,0,255,255,255,0,255,255,255,0,255,255,255,0,255,255,255,0,255,255,255,0,255,
255,255,0,255,255,255,0,255,255,255,0,255,255,255,0,255,255,255,0,255,255,255,0,
255,255,255,0,255,255,255,0,255,255,255,0,255,255,255,0,255,255,255,0,255,255,
255,0,255,255,255,0,255,255,255,0,255,255,255,0,255,255,255,0,255,255,255,0,255,
255,255,0,255,255,255,0,255,255,255,0,255,255,255,0,255,255,255,0,255,255,255,0,
255,255,255,0,255,255,255,0,255,255,255,0,255,255,255,0,255,255,255,0,255,255,
255,0,255,255,255,0,255,255,255,0,255,255,255,0,255,255,255,0,255,255,255,0,255,
255,255,0,255,255,255,0,255,255,255,0,255,255,255,0,255,255,255,0,255,255,255,0,
255,255,255,0,255,255,255,0,255,255,255,0,255,255,255,0,255,255,255,0,255,255,
255,0,255,255,255,0,255,255,255,0,255,255,255,0,255,255,255,0,255,255,255,0,255,
255,255,0,255,255,255,0,255,255,255,0,255,255,255,0,255,255,255,0,255,255,255,0,
255,255,255,0,255,255,255,0,255,255,255,0,255,255,255,0,255,255,255,0,255,255,
255,0,255,255,255,0,255,255,255,0,255,255,255,0,255,255,255,0,255,255,255,0,255,
255,255,0,255,255,255,0,255,255,255,0,255,255,255,0,255,255,255,0,255,255,255,0,
255,255,255,0,255,255,255,0,255,255,255,0,255,255,255,0,255,255,255,0,255,255,
255,0,255,255,255,0,255,255,255,0,255,255,255,0,255,255,255,0,255,255,255,0,255,
255,255,0,255,255,255,0,255,255,255,0,255,255,255,0,255,255,255,0,255,255,255,0,
255,255,255,0,255,255,255,0,255,255,255,0,255,255,255,0,255,255,255,0,255,255,
255,0,255,255,255,0,255,255,255,0,255,255,255,0,255,255,255,0,255,255,255,0,255,
255,255,0,255,255,255,0,255,255,255,0,255,255,255,0,255,255,255,0,255,255,255,0,
127,127,127,100,142,142,142,230,147,147,147,241,144,144,144,238,141,141,141,238,
138,138,138,238,136,136,136,238,133,133,133,238,131,131,131,238,128,128,128,238,
125,125,125,238,123,123,123,238,120,120,120,238,118,118,118,238,115,115,115,238,
112,112,112,238,110,110,110,238,108,108,108,238,104,104,104,238,102,102,102,238,
102,102,102,238,100,100,100,238,96,96,96,238,96,96,96,238,94,94,94,238,94,94,94,
238,94,94,94,241,77,77,77,223,24,24,24,84,0,0,0,3,255,255,255,0,255,255,255,0,
143,143,143,230,201,201,201,255,207,207,207,255,202,202,202,255,199,200,200,255,
198,198,198,255,196,196,196,255,194,194,194,255,192,192,192,255,189,189,189,255,
186,186,186,255,184,184,184,255,182,182,182,255,180,180,180,255,177,177,177,255,
175,175,175,255,173,173,173,255,171,171,171,255,169,168,168,255,168,167,167,255,
169,169,169,255,171,171,171,255,173,173,173,255,173,173,173,255,175,175,175,255,
177,177,177,255,183,183,183,255,166,166,166,255,39,39,39,198,0,0,0,32,255,255,
255,0,255,255,255,0,150,150,150,240,213,213,213,255,154,154,154,255,89,89,91,
255,74,76,86,255,70,72,79,255,70,71,75,255,70,68,67,255,68,68,66,255,70,68,68,
255,72,66,72,255,72,64,72,255,67,69,67,255,62,73,62,255,62,72,61,255,63,73,69,
255,63,73,73,255,63,72,72,255,70,69,67,255,75,69,66,255,81,75,71,255,89,89,88,
255,143,143,143,255,178,178,178,255,149,149,149,255,144,144,144,255,158,158,158,
255,164,164,164,255,46,46,46,217,0,0,0,60,255,255,255,0,255,255,255,0,146,146,
146,238,212,212,212,255,111,111,113,255,20,19,13,255,82,69,4,255,93,81,21,255,
83,79,38,255,67,80,90,255,70,80,91,255,56,77,68,255,34,73,33,255,33,76,32,255,
62,48,62,255,89,22,89,255,86,26,90,255,87,26,49,255,89,26,21,255,89,25,25,255,
39,52,68,255,21,63,87,255,4,39,62,255,25,26,27,255,119,117,118,255,175,175,175,
255,143,143,143,255,137,137,137,255,152,152,152,255,159,159,159,255,43,43,43,
217,0,0,0,62,255,255,255,0,255,255,255,0,145,145,145,238,213,213,212,255,111,
112,121,255,49,42,7,255,241,224,84,255,255,251,178,255,252,250,192,255,236,252,
255,255,240,252,255,255,219,250,232,255,191,246,190,255,192,251,191,255,229,212,
229,255,255,172,255,255,255,175,255,255,255,172,203,255,255,167,160,255,254,171,
171,255,199,211,232,255,179,231,255,255,48,138,200,255,16,28,37,255,124,121,119,
255,174,174,174,255,147,147,147,255,143,143,143,255,156,156,156,255,161,161,161,
255,42,42,42,217,0,0,0,62,255,255,255,0,255,255,255,0,143,143,143,238,212,212,
212,255,112,113,122,255,53,44,9,255,244,220,84,255,255,245,156,255,250,241,175,
255,224,245,255,255,230,247,255,255,207,242,227,255,159,233,158,255,129,236,129,
255,192,151,192,255,255,64,255,255,255,55,255,255,255,46,126,255,255,40,33,255,
249,47,49,255,104,134,187,255,68,176,248,255,24,125,194,255,24,34,40,255,125,
123,121,255,173,174,174,255,149,149,149,255,149,149,149,255,161,161,161,255,163,
163,163,255,41,41,41,217,0,0,0,62,255,255,255,0,255,255,255,0,141,141,141,238,
213,213,212,255,115,116,125,255,53,45,12,255,241,214,57,255,255,235,107,255,244,
233,142,255,210,239,255,255,211,237,255,255,149,224,188,255,54,205,51,255,32,
215,31,255,152,93,152,255,255,0,255,255,255,0,255,255,255,0,97,255,255,0,0,255,
245,0,2,255,55,97,164,255,0,137,232,255,0,111,186,255,30,38,43,255,128,125,124,
255,174,174,174,255,147,147,147,255,142,142,142,255,155,155,155,255,160,160,160,
255,40,40,40,217,0,0,0,62,255,255,255,0,255,255,255,0,140,140,140,238,213,213,
212,255,118,119,128,255,54,47,15,255,241,211,34,255,255,228,62,255,240,227,111,
255,187,230,255,255,188,227,255,255,127,216,175,255,41,202,37,255,37,216,36,255,
156,100,156,255,255,0,255,255,255,2,255,255,255,1,101,255,255,0,0,255,245,5,8,
255,61,101,167,255,0,143,234,255,0,112,187,255,32,39,44,255,130,128,126,255,174,
174,174,255,148,148,148,255,144,144,144,255,157,157,157,255,160,160,160,255,38,
38,38,217,0,0,0,62,255,255,255,0,255,255,255,0,138,138,138,238,212,212,212,255,
119,121,129,255,55,49,17,255,241,206,11,255,255,222,15,255,236,218,71,255,176,
226,255,255,188,227,255,255,131,218,177,255,45,203,41,255,38,216,37,255,156,100,
156,255,255,0,255,255,255,2,255,255,255,1,101,255,255,0,0,255,245,5,8,255,61,
101,167,255,0,143,234,255,0,111,187,255,34,41,46,255,132,130,128,255,174,174,
174,255,148,148,148,255,147,147,147,255,160,160,160,255,162,162,162,255,37,37,
37,217,0,0,0,62,255,255,255,0,255,255,255,0,136,136,136,238,213,212,212,255,
121,123,132,255,56,49,19,255,240,205,0,255,255,218,0,255,236,218,62,255,178,227,
255,255,188,227,255,255,131,218,177,255,45,203,41,255,38,216,37,255,156,100,156,
255,255,0,255,255,255,2,255,255,255,1,101,255,255,0,0,255,245,5,8,255,61,101,
167,255,0,143,234,255,0,111,186,255,35,42,48,255,134,131,130,255,172,173,173,
255,149,149,149,255,146,146,146,255,159,159,159,255,161,161,161,255,35,35,35,
217,0,0,0,62,255,255,255,0,255,255,255,0,134,134,134,238,213,213,212,255,124,
126,135,255,57,51,20,255,240,204,0,255,255,218,0,255,236,218,64,255,178,227,255,
255,188,227,255,255,131,218,177,255,45,203,41,255,38,216,37,255,156,100,156,255,
255,0,255,255,255,2,255,255,255,1,101,255,255,0,0,255,245,5,8,255,61,101,167,
255,0,143,234,255,0,111,186,255,37,44,49,255,137,134,132,255,172,172,172,255,
147,147,147,255,145,145,145,255,157,157,157,255,160,160,160,255,34,34,34,217,0,
0,0,62,255,255,255,0,255,255,255,0,132,132,132,238,213,212,212,255,127,129,
137,255,58,52,21,255,240,204,0,255,255,218,0,255,236,217,64,255,177,226,255,255,
187,226,255,255,130,217,177,255,45,202,41,255,38,215,37,255,156,100,156,255,255,
0,255,255,255,2,255,255,255,1,101,255,255,0,0,255,245,5,8,255,61,101,167,255,
0,143,234,255,0,111,186,255,39,46,51,255,139,137,135,255,173,173,173,255,145,
145,145,255,139,139,139,255,154,154,154,255,157,157,157,255,33,33,33,217,0,0,0,
62,255,255,255,0,255,255,255,0,129,129,129,238,213,213,212,255,128,130,139,255,
59,52,21,255,240,203,0,255,255,221,0,255,246,233,67,255,190,243,255,255,201,
243,255,255,140,233,185,255,48,217,45,255,41,231,41,255,164,107,164,255,255,0,
255,255,255,2,255,255,255,1,104,255,255,0,0,255,253,5,8,255,63,101,167,255,0,
143,234,255,0,111,186,255,39,46,52,255,140,138,136,255,173,173,173,255,146,146,
146,255,141,141,141,255,155,155,155,255,157,157,157,255,31,31,31,217,0,0,0,62,
255,255,255,0,255,255,255,0,128,128,128,238,213,213,212,255,131,132,142,255,61,
54,23,255,251,217,0,255,234,202,0,255,135,127,36,255,98,134,144,255,104,134,
146,255,73,129,99,255,26,121,24,255,22,128,22,255,90,57,88,255,147,0,145,255,
142,0,146,255,145,0,56,255,149,0,0,255,146,5,8,255,35,100,166,255,0,141,232,255,
0,109,184,255,41,49,54,255,143,141,139,255,172,172,172,255,148,148,148,255,
146,146,146,255,159,159,159,255,160,160,160,255,30,30,30,217,0,0,0,62,255,255,
255,0,255,255,255,0,126,126,126,238,213,213,212,255,135,136,144,255,57,51,24,
255,222,197,0,255,164,149,0,255,0,0,4,255,21,0,20,255,23,0,21,255,13,0,11,255,0,
0,0,255,0,0,0,255,5,9,10,255,12,25,22,255,11,24,22,255,0,9,8,255,0,0,0,255,0,
5,8,255,11,104,171,255,11,147,241,255,6,113,189,255,43,50,56,255,145,142,141,
255,172,172,172,255,144,144,144,255,138,138,138,255,153,153,153,255,155,155,155,
255,29,29,29,217,0,0,0,62,255,255,255,0,255,255,255,0,124,124,124,238,212,212,
212,255,145,145,146,255,30,29,25,255,35,26,0,255,24,21,0,255,52,0,53,255,218,0,
218,255,221,0,220,255,135,0,133,255,0,0,0,255,0,0,0,255,87,109,116,255,176,216,
221,255,175,216,221,255,66,83,87,255,0,0,0,255,3,6,10,255,65,138,192,255,89,194,
255,255,64,151,214,255,49,54,60,255,146,144,142,255,173,173,173,255,142,142,142,
255,133,133,133,255,149,149,149,255,152,152,152,255,27,27,27,217,0,0,0,62,255,
255,255,0,255,255,255,0,122,122,122,238,212,212,212,255,148,148,144,255,23,28,
41,255,0,18,102,255,108,126,155,255,208,182,204,255,255,183,255,255,204,129,
255,255,56,55,194,255,0,65,142,255,0,47,111,255,38,49,58,255,76,94,103,255,75,
94,104,255,29,36,40,255,0,0,0,255,1,2,4,255,26,49,70,255,38,70,98,255,26,52,76,
255,47,49,51,255,149,148,148,255,172,173,173,255,144,144,144,255,138,138,138,
255,153,153,153,255,154,154,154,255,25,25,25,217,0,0,0,62,255,255,255,0,255,255,
255,0,120,120,120,238,212,212,212,255,149,147,146,255,22,24,33,255,0,13,82,255,
101,112,137,255,155,157,153,255,150,158,147,255,76,109,126,255,0,41,108,255,0,
51,128,255,0,40,101,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,
0,255,0,0,0,255,0,0,0,255,0,0,0,255,44,44,44,255,151,151,151,255,171,171,171,
255,145,145,145,255,141,141,141,255,155,155,155,255,156,156,156,255,24,24,24,
217,0,0,0,62,255,255,255,0,255,255,255,0,118,118,118,238,212,212,212,255,160,
161,161,255,91,91,90,255,79,74,68,255,67,66,64,255,59,59,58,255,54,54,54,255,59,
56,54,255,68,61,56,255,66,60,54,255,61,56,51,255,61,60,61,255,62,62,62,255,66,
66,66,255,67,67,67,255,67,67,67,255,68,68,68,255,72,72,72,255,76,76,76,255,78,
78,78,255,101,101,101,255,154,154,154,255,174,174,174,255,142,142,142,255,136,
136,136,255,152,152,152,255,154,154,154,255,23,23,23,217,0,0,0,62,255,255,255,0,
255,255,255,0,117,117,117,238,209,209,209,255,197,197,197,255,188,188,188,255,
189,189,189,255,187,187,187,255,186,186,186,255,184,184,184,255,183,183,183,255,
180,181,180,255,179,179,179,255,176,176,176,255,175,175,175,255,173,173,173,255,
171,171,171,255,170,170,170,255,167,167,167,255,166,166,166,255,165,165,165,255,
165,165,165,255,166,166,166,255,165,166,166,255,168,170,170,255,173,173,173,255,
166,166,166,255,164,164,164,255,171,171,171,255,165,165,165,255,21,21,21,217,0,
0,0,62,255,255,255,0,255,255,255,0,70,70,70,238,53,53,53,255,61,61,61,255,66,
66,66,255,65,65,65,255,63,63,64,255,62,62,61,255,59,59,59,255,57,57,57,255,58,
58,58,255,57,57,57,255,57,57,57,255,57,57,57,255,55,55,55,255,55,55,55,255,55,
55,55,255,54,54,54,255,53,53,53,255,53,53,53,255,53,53,53,255,53,53,53,255,46,
46,46,255,46,43,43,255,51,51,51,255,56,55,55,255,56,56,56,255,56,56,56,255,46,
46,46,255,7,7,7,217,0,0,0,62,255,255,255,0,255,255,255,0,60,60,60,241,35,35,35,
255,69,69,70,255,114,114,119,255,108,108,113,255,107,107,111,255,93,93,96,255,
54,54,54,255,47,47,47,255,58,58,58,255,57,57,57,255,58,58,58,255,58,58,58,255,
51,51,51,255,55,55,55,255,59,59,59,255,58,58,58,255,58,58,58,255,58,58,58,255,
58,58,58,255,58,61,61,255,48,15,15,255,80,0,0,255,58,48,48,255,58,61,61,255,58,
58,58,255,60,60,60,255,35,35,35,255,3,3,3,218,0,0,0,62,255,255,255,0,255,255,
255,0,72,72,72,217,62,62,62,255,62,62,62,255,68,68,69,255,66,66,67,255,68,68,68,
255,66,66,67,255,59,59,59,255,56,56,56,255,58,58,58,255,58,58,58,255,57,57,57,
255,57,57,57,255,55,55,55,255,56,56,56,255,56,56,56,255,55,55,55,255,55,55,55,
255,54,54,54,255,54,54,54,255,53,54,54,255,57,46,46,255,62,42,42,255,54,50,50,
255,51,52,52,255,51,51,51,255,53,53,53,255,40,40,40,255,2,2,2,214,0,0,0,61,255,
255,255,0,255,255,255,0,33,33,33,80,43,43,43,197,40,40,40,215,36,36,36,214,35,
35,35,214,33,33,33,214,33,33,32,214,34,34,34,214,32,32,32,214,30,30,30,214,29,
29,29,214,28,28,28,214,26,26,26,214,25,25,25,214,23,23,23,214,22,22,22,214,20,
20,20,214,19,19,19,214,18,18,18,214,17,17,17,214,15,15,15,214,13,15,15,214,10,
15,15,214,10,11,11,214,9,8,8,214,8,8,8,214,7,7,7,215,3,3,3,213,0,0,0,151,0,0,0,
42,255,255,255,0,255,255,255,0,0,0,0,2,0,0,0,33,0,0,0,61,0,0,0,62,0,0,0,62,0,0,
0,62,0,0,0,62,0,0,0,62,0,0,0,62,0,0,0,62,0,0,0,62,0,0,0,62,0,0,0,62,0,0,0,62,
0,0,0,62,0,0,0,62,0,0,0,62,0,0,0,62,0,0,0,62,0,0,0,62,0,0,0,62,0,0,0,62,0,0,0,
62,0,0,0,62,0,0,0,62,0,0,0,62,0,0,0,62,0,0,0,62,0,0,0,44,0,0,0,10,255,255,255,
0,255,255,255,0,255,255,255,0,255,255,255,0,255,255,255,0,255,255,255,0,255,
255,255,0,255,255,255,0,255,255,255,0,255,255,255,0,255,255,255,0,255,255,255,0,
255,255,255,0,255,255,255,0,255,255,255,0,255,255,255,0,255,255,255,0,255,255,
255,0,255,255,255,0,255,255,255,0,255,255,255,0,255,255,255,0,255,255,255,0,255,
255,255,0,255,255,255,0,255,255,255,0,255,255,255,0,255,255,255,0,255,255,255,0,
255,255,255,0,255,255,255,0,255,255,255,0,255,255,255,0,255,255,255,0,255,255,
255,0,255,255,255,0,255,255,255,0,255,255,255,0,255,255,255,0,255,255,255,0,255,
255,255,0,255,255,255,0,255,255,255,0,255,255,255,0,255,255,255,0,255,255,255,0,
255,255,255,0,255,255,255,0,255,255,255,0,255,255,255,0,255,255,255,0,255,255,
255,0,255,255,255,0,255,255,255,0,255,255,255,0,255,255,255,0,255,255,255,0,255,
255,255,0,255,255,255,0,255,255,255,0,255,255,255,0,255,255,255,0,255,255,255,0,
255,255,255,0,255,255,255,0,255,255,255,0,255,255,255,0,255,255,255,0,255,255,
255,0,255,255,255,0,255,255,255,0,255,255,255,0,255,255,255,0,255,255,255,0,255,
255,255,0,255,255,255,0,255,255,255,0,255,255,255,0,255,255,255,0,255,255,255,0,
255,255,255,0,255,255,255,0,255,255,255,0,255,255,255,0,255,255,255,0,255,255,
255,0,255,255,255,0,255,255,255,0,255,255,255,0,255,255,255,0,255,255,255,0,255,
255,255,0,255,255,255,0,255,255,255,0,255,255,255,0,255,255,255,0};
static Fl_Image *image_tv() {
  static Fl_Image *image = new Fl_RGB_Image(idata_tv, 32, 32, 4, 0);
  return image;
}

static void cb_Sound(Fl_Button*, void*) {
  nsystem( " screen -d -m flsound  " );
}

static const unsigned char idata_amarok[] =
{255,255,255,0,255,255,255,0,255,255,255,0,255,255,255,0,255,255,255,0,255,
255,255,0,255,255,255,0,255,255,255,0,255,255,255,0,255,255,255,0,255,255,255,0,
255,255,255,0,255,255,255,0,255,255,255,0,255,255,255,0,255,255,255,0,255,255,
255,0,255,255,255,0,255,255,255,0,255,255,255,0,255,255,255,0,255,255,255,0,255,
255,255,0,255,255,255,0,255,255,255,0,255,255,255,0,255,255,255,0,255,255,255,0,
255,255,255,0,255,255,255,0,255,255,255,0,255,255,255,0,255,255,255,0,255,255,
255,0,255,255,255,0,255,255,255,0,255,255,255,0,255,255,255,0,255,255,255,0,255,
255,255,0,255,255,255,0,255,255,255,0,255,255,255,0,255,255,255,0,255,255,255,0,
255,255,255,0,255,255,255,0,255,255,255,0,255,255,255,0,255,255,255,0,255,255,
255,0,255,255,255,0,255,255,255,0,255,255,255,0,255,255,255,0,255,255,255,0,255,
255,255,0,255,255,255,0,255,255,255,0,255,255,255,0,255,255,255,0,255,255,255,0,
255,255,255,0,255,255,255,0,0,15,45,0,0,11,40,0,0,12,43,0,0,18,54,0,0,12,44,0,0,
29,93,0,0,44,134,0,0,42,128,0,0,42,128,0,0,42,128,0,0,42,128,0,0,42,128,0,0,42,
128,0,0,42,128,0,0,42,127,0,0,41,128,0,0,43,137,1,3,47,145,120,10,54,149,220,1,
44,142,196,0,12,38,74,0,0,0,0,0,0,0,0,0,0,0,0,0,25,26,0,0,59,58,0,0,30,26,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,15,45,0,0,11,40,0,0,12,43,0,0,18,54,0,
0,12,44,0,0,29,93,0,0,44,134,0,0,42,128,0,0,42,128,0,0,42,128,0,0,42,128,0,0,
42,128,0,0,42,128,0,0,42,128,0,0,42,128,0,0,39,128,1,0,42,136,140,76,96,141,
255,136,140,155,255,67,98,166,255,0,34,117,233,0,1,4,67,0,0,0,0,0,0,0,0,0,25,26,
0,0,59,58,0,0,30,26,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,15,45,0,0,11,
40,0,0,12,43,0,0,18,54,0,0,12,44,0,0,31,96,0,0,45,136,0,0,43,130,0,0,43,130,0,
0,43,130,0,0,43,130,0,0,43,130,0,0,43,130,0,0,43,129,0,0,41,127,0,3,41,131,
121,72,93,143,255,134,130,135,255,156,153,157,255,173,172,177,255,47,84,165,255,
0,13,57,187,0,0,0,26,0,0,0,0,0,28,27,0,0,59,58,9,0,38,33,35,0,0,0,3,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,15,45,0,0,11,40,0,0,12,43,0,0,18,54,0,0,14,48,0,0,19,
64,0,0,36,108,0,0,36,110,0,0,36,109,0,0,36,109,0,0,36,109,0,0,36,109,0,0,37,
111,0,0,35,115,0,0,28,117,84,84,107,167,252,130,128,141,255,120,120,131,255,145,
145,155,255,183,180,181,255,124,141,180,255,0,29,106,243,0,0,0,89,0,0,0,0,0,7,7,
0,0,44,42,1,0,53,41,121,0,41,23,123,0,0,0,6,0,0,0,0,0,0,0,0,0,0,0,0,0,15,45,0,
0,11,40,0,0,12,43,0,0,18,54,0,0,14,51,0,0,14,48,0,0,31,94,0,0,33,100,0,0,33,
99,0,0,33,99,0,0,33,99,0,0,33,99,0,0,34,102,0,0,25,103,60,82,105,167,238,190,
190,204,255,105,104,115,255,142,142,148,255,150,150,160,255,173,171,178,255,174,
179,192,255,15,51,133,255,0,9,25,158,0,40,26,88,0,8,4,13,0,0,0,0,0,11,7,25,0,64,
33,210,0,40,15,134,0,0,0,7,0,0,0,0,0,0,0,0,0,15,45,0,0,11,40,0,0,12,43,0,0,18,
54,0,0,14,50,0,0,15,50,0,0,31,95,0,0,33,101,0,0,33,100,0,0,33,100,0,0,33,100,0,
0,33,100,0,0,27,97,36,21,46,128,219,215,218,242,255,164,163,173,255,113,113,
116,255,167,167,165,255,177,177,181,255,168,168,176,255,199,198,200,255,61,91,
156,255,0,4,39,181,0,32,14,132,0,56,28,160,0,3,1,20,0,0,0,0,0,40,19,95,0,78,28,
250,0,18,5,88,0,0,0,0,0,0,0,0,0,15,45,0,0,11,40,0,0,12,43,0,0,18,54,0,0,14,50,0,
0,15,50,0,0,32,97,0,0,34,103,0,0,34,102,0,0,34,102,0,0,34,102,0,0,31,96,20,9,
36,115,202,156,160,225,255,248,247,255,255,121,121,129,255,121,121,119,255,163,
163,162,255,190,190,190,255,178,179,184,255,203,200,200,255,113,133,179,255,0,8,
54,213,0,4,0,70,0,68,30,198,0,49,15,160,0,0,0,10,0,4,2,8,0,74,26,205,0,62,13,
207,0,0,0,34,0,0,0,0,0,15,45,0,0,11,40,0,0,12,43,0,0,18,54,0,0,14,50,0,0,15,51,
0,2,24,74,0,0,25,78,0,0,27,82,0,0,27,85,0,0,25,85,3,3,28,96,170,117,124,206,
255,220,218,255,255,223,223,233,255,96,96,101,255,126,126,125,255,162,162,162,
255,190,190,190,255,193,193,196,255,199,197,199,255,141,156,190,255,0,14,65,233,
0,0,0,69,0,38,14,96,0,80,23,244,0,14,2,80,0,0,0,0,0,54,17,116,0,87,18,255,0,
22,2,107,0,0,0,4,0,15,45,0,0,11,40,0,0,12,43,0,0,18,54,0,0,14,50,0,0,15,52,0,3,
21,63,0,0,20,66,0,0,24,72,0,0,23,74,0,0,24,85,141,100,108,191,255,178,175,255,
255,213,213,255,255,202,202,207,255,84,84,86,255,127,127,127,255,162,162,162,
255,189,189,189,255,202,202,203,255,200,198,199,255,168,178,201,255,2,26,78,244,
0,0,0,97,0,18,6,19,0,82,21,224,0,51,8,179,0,0,0,12,0,27,8,44,0,93,19,243,0,55,
6,191,0,0,0,28,0,15,45,0,0,11,40,0,0,12,43,0,0,18,54,0,0,14,50,0,0,15,52,0,3,
22,64,0,0,21,67,0,0,23,72,0,0,19,71,109,77,89,169,255,174,172,255,255,145,146,
245,255,211,211,249,255,182,182,186,255,78,78,78,255,129,129,129,255,162,162,
162,255,189,189,189,255,206,207,206,255,201,199,202,255,188,194,208,255,23,43,
94,250,0,0,0,117,0,0,0,0,0,65,16,147,0,80,11,235,0,4,0,67,0,22,6,6,0,90,18,211,
0,80,7,240,0,8,0,74,0,15,45,0,0,11,40,0,0,12,43,0,0,18,54,0,0,14,50,0,0,15,52,
0,3,21,64,0,0,21,67,0,0,18,65,83,64,76,154,253,164,162,255,255,151,151,250,
255,105,105,210,255,221,221,249,255,157,157,161,255,76,76,75,255,134,134,134,
255,163,163,163,255,189,189,189,255,208,208,208,255,203,203,205,255,203,207,214,
255,40,56,105,255,0,0,0,136,0,0,0,7,0,60,13,81,0,97,11,255,0,20,0,123,0,5,2,0,0,
75,14,168,0,92,8,255,0,18,0,114,0,15,45,0,0,11,40,0,0,12,43,0,0,17,53,0,0,12,
47,0,0,11,46,0,0,17,58,0,0,10,51,57,43,56,124,235,155,155,252,255,154,153,252,
255,108,108,211,255,104,104,202,255,228,228,253,255,138,138,147,255,52,52,61,
255,74,74,79,255,159,159,159,255,191,191,191,255,209,209,209,255,206,206,207,
255,210,211,216,255,49,66,115,255,0,0,2,147,0,0,0,14,0,54,11,43,0,100,12,255,0,
43,1,171,0,0,0,13,0,63,11,136,0,99,8,255,0,23,0,136,0,14,44,0,0,8,35,3,0,6,34,
27,0,12,45,62,2,18,56,112,13,28,74,159,32,46,106,202,69,79,150,244,151,152,242,
255,163,162,254,255,122,122,222,255,107,107,211,255,122,122,219,255,231,231,252,
255,132,132,146,255,118,118,136,255,116,116,129,255,87,87,89,255,194,194,193,
255,211,211,210,255,209,209,209,255,212,213,216,255,54,73,118,255,0,0,3,155,0,0,
0,19,0,50,9,24,0,98,11,244,0,57,1,198,0,0,0,31,0,62,11,115,0,104,9,255,0,27,1,
152,4,18,50,87,26,37,84,195,52,60,121,222,84,90,168,250,110,114,204,255,135,137,
229,255,155,155,250,255,182,181,255,255,174,174,253,255,136,136,234,255,122,122,
224,255,124,124,228,255,137,137,232,255,230,230,252,255,125,125,142,255,169,169,
183,255,245,245,251,255,81,81,85,255,157,157,156,255,217,217,217,255,210,210,
211,255,213,213,217,255,57,73,118,255,0,0,3,160,0,0,0,22,0,42,8,17,0,97,11,232,
0,62,2,207,0,0,0,44,0,61,10,100,0,106,9,255,0,29,1,162,50,60,116,214,154,154,
255,255,161,161,255,255,162,161,255,255,163,162,255,255,157,157,253,255,152,152,
248,255,161,161,248,255,137,137,238,255,134,134,237,255,138,138,240,255,136,136,
240,255,148,148,243,255,226,226,250,255,124,124,143,255,135,135,156,255,207,207,
220,255,108,108,113,255,126,126,126,255,219,219,219,255,210,210,211,255,212,213,
216,255,56,71,112,255,0,0,2,160,0,0,0,23,0,71,12,16,0,97,11,228,0,65,1,211,0,0,
0,51,0,61,10,94,0,106,9,255,0,29,1,166,67,73,133,227,175,174,255,255,150,150,
248,255,144,144,246,255,143,143,246,255,143,143,246,255,145,145,248,255,152,152,
250,255,144,144,246,255,145,145,246,255,145,145,247,255,144,144,248,255,154,154,
250,255,222,222,250,255,125,125,144,255,107,107,131,255,169,169,191,255,113,113,
119,255,120,120,119,255,219,219,218,255,211,210,211,255,211,212,216,255,53,66,
103,255,0,0,0,156,0,0,0,22,0,76,14,18,0,97,11,234,0,62,2,206,0,0,0,50,0,62,11,
105,0,105,9,255,0,28,1,165,64,70,122,215,204,203,255,255,157,157,253,255,148,
148,252,255,150,150,252,255,151,151,253,255,152,152,254,255,152,152,254,255,150,
150,252,255,150,150,252,255,151,151,253,255,150,150,253,255,158,158,255,255,219,
219,250,255,128,128,146,255,101,101,125,255,155,155,180,255,95,95,102,255,131,
131,130,255,219,219,219,255,210,210,211,255,208,210,216,255,46,56,88,254,0,0,0,
146,0,0,0,17,0,73,14,27,0,99,12,249,0,52,1,195,0,0,0,42,0,63,11,122,0,102,9,255,
0,26,1,157,50,55,95,185,234,234,255,255,171,171,255,255,150,150,255,255,153,
153,255,255,153,153,255,255,153,153,255,255,152,152,253,255,153,153,255,255,153,
153,255,255,153,153,255,255,152,152,255,255,157,157,255,255,213,213,250,255,131,
131,152,255,98,98,120,255,136,136,164,255,65,65,71,255,164,164,163,255,216,216,
216,255,210,210,211,255,200,203,211,255,36,44,71,250,0,0,0,132,0,0,0,11,0,68,15,
47,0,101,12,255,0,35,1,177,0,0,0,28,0,65,11,142,0,98,8,255,0,22,0,146,23,23,50,
147,213,214,233,255,184,184,255,255,146,146,252,255,151,151,251,255,151,151,252,
255,149,149,249,255,144,144,241,255,151,151,253,255,151,151,253,255,151,151,252,
255,150,150,252,255,151,151,250,255,205,205,249,255,139,139,162,255,95,95,115,
255,73,73,93,255,93,93,94,255,196,196,196,255,209,209,209,255,210,209,211,255,
183,187,198,255,18,25,49,244,0,0,0,114,0,11,3,3,0,75,18,93,0,91,11,253,0,12,0,
144,0,19,5,15,0,87,17,177,0,87,8,254,0,14,0,127,0,0,12,99,170,172,199,255,200,
199,255,255,134,134,237,255,141,141,237,255,140,140,236,255,137,137,232,255,128,
128,217,255,142,142,240,255,144,144,242,255,143,143,239,255,141,141,239,255,138,
138,237,255,195,195,249,255,139,139,164,255,49,49,56,255,76,76,78,255,160,160,
159,255,191,191,191,255,208,208,208,255,208,207,209,255,162,167,180,255,0,7,27,
236,0,0,0,99,0,45,14,0,0,94,24,165,0,68,9,229,0,0,0,97,0,31,8,23,0,97,19,214,0,
71,7,240,0,1,0,99,0,0,0,39,84,85,111,229,227,227,253,255,125,125,220,255,124,
124,215,255,123,123,212,255,122,122,209,255,112,112,195,255,131,130,222,255,133,
132,225,255,128,128,218,255,126,126,216,255,121,121,211,255,169,169,234,255,151,
151,181,255,78,78,76,255,132,132,132,255,164,164,164,255,189,189,189,255,205,
205,206,255,206,205,208,255,134,140,157,255,0,0,14,223,0,0,0,77,0,39,14,26,0,91,
24,225,0,35,5,177,0,0,0,49,0,43,14,60,0,93,19,246,0,42,4,193,0,0,0,66,0,0,0,0,
7,8,16,157,112,113,142,255,79,79,132,255,62,63,116,255,60,61,111,255,56,58,
107,255,51,53,100,255,61,62,118,255,97,98,178,255,113,112,196,255,108,108,188,
255,100,100,180,255,136,136,205,255,163,163,203,255,88,88,88,255,127,127,127,
255,162,162,162,255,190,190,189,255,201,201,202,255,206,205,209,255,106,111,128,
255,0,0,2,204,0,3,0,47,0,58,25,115,0,72,21,236,0,1,0,113,0,6,3,15,0,78,27,129,0,
80,17,255,0,9,1,136,0,0,0,32,0,0,0,0,0,0,0,28,0,0,0,158,0,0,0,194,0,0,0,190,0,
0,0,184,0,0,0,177,0,0,0,167,0,0,0,171,14,16,37,231,58,58,113,255,81,81,149,
255,73,74,140,255,94,94,155,255,164,164,218,255,100,100,109,255,125,125,123,255,
162,162,162,255,190,190,190,255,194,194,196,255,195,196,201,255,55,63,80,255,0,
0,0,171,0,16,9,62,0,76,35,201,0,24,8,156,0,0,0,61,0,22,10,20,0,82,28,224,0,43,
10,197,0,0,0,84,0,0,0,6,0,0,0,0,0,0,0,0,0,0,0,16,0,0,0,43,0,0,0,45,0,0,0,40,0,
0,0,37,0,0,0,32,0,0,0,27,0,0,0,65,1,2,6,180,25,26,55,255,47,47,96,255,57,57,
110,255,149,149,212,255,120,120,146,255,123,123,119,255,162,162,163,255,190,190,
190,255,185,185,190,255,171,172,180,255,13,19,33,249,0,0,0,140,0,49,34,137,0,35,
18,137,0,0,0,75,0,0,0,6,0,61,29,117,0,67,25,235,0,7,2,128,0,0,0,34,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,20,0,0,0,115,7,8,18,224,22,22,52,255,100,99,159,255,134,134,185,255,120,
120,118,255,167,167,165,255,177,177,179,255,182,181,188,255,125,130,140,255,0,0,
4,224,0,5,5,107,0,22,17,64,0,0,0,48,0,0,0,13,0,37,27,44,0,66,36,202,0,18,7,
136,0,0,0,64,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,56,0,0,0,173,23,23,42,253,
120,120,187,255,118,118,140,255,146,146,148,255,153,153,162,255,177,177,185,255,
59,61,70,255,0,0,0,184,0,0,0,57,0,0,0,6,0,0,0,7,0,33,31,7,0,57,45,114,0,20,11,
110,0,0,0,63,0,0,0,12,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,15,0,0,0,
108,24,24,44,223,83,84,116,255,131,131,142,255,164,164,174,255,114,116,123,255,
1,3,5,235,0,0,0,124,0,0,0,22,0,0,0,0,0,0,0,0,0,41,40,3,0,8,7,24,0,0,0,33,0,0,
0,11,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,
51,3,4,6,177,66,67,74,255,90,90,97,255,13,13,15,243,0,0,0,169,0,0,0,60,0,0,0,3,
0,0,0,0,0,0,0,0,0,36,36,0,0,0,0,2,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,18,0,0,0,115,0,0,0,168,0,
0,0,141,0,0,0,69,0,0,0,10,0,0,0,0,0,0,0,0,0,0,0,0,0,36,36,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,6,0,0,0,25,0,0,0,26,0,0,0,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
36,36,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};
static Fl_Image *image_amarok() {
  static Fl_Image *image = new Fl_RGB_Image(idata_amarok, 32, 32, 4, 0);
  return image;
}

static void cb_Printer(Fl_Button*, void*) {
  nsystem( " screen -d -m flprinter  " );
}

static const unsigned char idata_printer[] =
{145,145,168,0,145,145,168,0,145,145,168,0,145,145,168,0,145,145,168,0,145,
145,168,0,145,145,168,0,145,145,168,0,149,149,171,62,192,192,206,241,202,202,
214,242,201,201,213,241,201,201,213,241,201,201,213,241,201,201,213,241,201,201,
213,241,202,202,213,241,202,202,213,241,202,202,213,241,202,202,213,241,202,202,
213,241,204,204,216,249,139,139,155,167,6,6,8,22,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,133,133,155,0,133,133,155,0,133,133,155,0,
133,133,155,0,133,133,155,0,133,133,155,0,133,133,155,0,131,131,153,0,141,141,
161,81,239,239,243,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,141,141,150,222,0,0,0,
70,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,127,127,148,
0,127,127,148,0,127,127,148,0,127,127,148,0,127,127,148,0,127,127,148,0,127,
127,148,0,125,125,146,0,135,135,155,80,233,233,239,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,254,254,255,255,251,252,
253,255,248,250,253,255,245,248,251,255,241,246,250,255,239,245,250,255,255,255,
255,255,134,134,144,226,0,0,0,79,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,123,123,145,0,123,123,145,0,123,123,144,0,121,121,142,0,121,
121,143,0,121,121,143,0,121,121,143,0,119,119,141,0,129,129,151,80,232,232,237,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,254,255,
255,251,252,254,255,248,250,252,255,246,248,251,255,243,246,250,255,239,244,249,
255,237,243,249,255,255,255,255,255,132,132,142,225,0,0,0,78,0,0,0,2,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,106,106,122,0,105,105,121,0,109,
109,126,0,120,120,141,0,116,116,136,0,115,115,135,0,115,115,135,0,113,113,133,0,
124,124,143,80,231,231,235,255,255,255,255,255,255,255,255,255,255,255,255,255,
254,255,255,255,251,253,254,255,247,250,253,255,245,248,252,255,243,246,250,255,
240,244,249,255,236,242,248,255,234,241,248,255,255,255,255,255,130,130,139,225,
0,0,0,78,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,69,
69,68,0,68,68,66,0,72,72,74,0,88,88,96,0,110,110,129,0,111,111,131,0,110,110,
129,0,108,108,127,0,119,119,137,80,229,229,233,255,255,255,255,255,255,255,255,
255,254,254,255,255,251,252,253,255,248,250,252,255,245,248,251,255,243,246,250,
255,240,244,249,255,237,242,248,255,233,240,247,255,231,239,246,255,255,255,255,
255,127,127,136,225,0,0,0,78,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,72,72,72,0,72,72,72,0,68,68,68,0,63,63,61,0,76,76,81,0,104,104,
124,0,106,106,127,0,102,102,121,0,113,113,132,80,228,228,232,255,255,255,255,
255,254,254,255,255,251,252,254,255,248,250,253,255,244,248,252,255,241,246,251,
255,239,244,249,255,236,242,249,255,234,240,247,255,230,237,246,255,229,235,244,
255,255,255,255,255,124,124,133,225,0,0,0,78,0,0,0,2,0,0,0,0,0,0,0,0,5,5,5,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,72,72,72,0,72,72,72,0,69,69,69,0,68,68,68,0,64,
64,63,0,72,72,75,0,91,91,101,0,99,99,119,0,109,109,126,79,226,226,230,255,255,
255,255,255,252,253,255,255,248,250,252,255,245,248,251,255,242,246,250,255,239,
244,249,255,237,242,248,255,233,241,248,255,230,238,246,255,227,234,243,255,226,
233,241,255,255,255,255,255,122,121,130,225,0,0,0,77,0,0,0,2,0,0,0,0,13,13,13,0,
44,44,44,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,72,72,72,0,72,72,72,0,69,69,69,0,68,
68,68,0,67,67,67,0,62,62,60,0,72,72,71,0,69,69,70,0,94,94,107,72,226,226,231,
255,255,255,255,255,248,250,252,255,245,248,252,255,242,246,250,255,238,244,249,
255,236,242,249,255,234,240,247,255,230,238,246,255,227,234,243,255,224,231,239,
255,224,229,238,255,255,255,255,255,116,116,123,224,0,0,0,71,0,0,0,0,7,7,7,0,60,
60,60,0,48,48,48,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,72,72,72,0,72,72,72,0,69,69,
69,0,68,68,68,0,66,66,66,0,62,62,61,0,71,71,70,0,61,61,59,51,88,88,93,187,226,
226,231,255,254,255,255,255,244,247,252,255,242,246,251,255,239,245,250,255,237,
242,249,255,233,240,248,255,229,238,246,255,227,234,243,255,225,231,240,255,222,
227,236,255,221,226,234,255,252,252,253,255,136,136,143,246,33,33,33,157,6,6,6,
16,4,4,4,0,63,63,62,0,45,45,45,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,72,72,72,0,72,
72,72,0,66,66,66,0,60,60,60,28,63,63,63,90,68,68,68,145,78,78,77,174,99,99,99,
233,152,152,157,255,219,219,223,255,253,255,255,255,242,245,250,255,239,244,249,
255,237,243,249,255,234,241,247,255,230,238,245,255,228,235,243,255,226,231,240,
255,223,228,236,255,218,223,233,255,218,222,232,255,244,244,246,255,171,171,178,
255,123,123,124,255,72,72,72,207,61,61,61,164,62,62,60,125,41,41,40,61,1,1,1,13,
0,0,0,0,0,0,0,0,0,0,0,0,72,72,72,0,69,69,69,23,78,78,78,160,117,117,119,239,
159,159,162,255,192,192,199,255,206,206,213,255,227,228,234,255,146,145,149,255,
220,216,217,255,255,255,255,255,247,249,251,255,242,246,249,255,237,243,248,255,
232,240,246,255,231,236,243,255,228,233,239,255,225,229,236,255,224,226,234,255,
222,223,230,255,224,223,229,255,253,250,249,255,146,144,147,255,204,204,208,255,
218,218,225,255,203,203,209,255,175,175,181,255,134,134,138,255,92,92,93,208,29,
29,29,94,0,0,0,3,0,0,0,0,71,71,71,1,78,78,78,171,190,190,195,255,235,235,243,
255,238,238,246,255,235,235,243,255,234,234,242,255,233,231,235,255,119,125,136,
255,159,181,213,255,184,207,237,255,174,199,232,255,170,197,231,255,164,193,230,
255,163,192,228,255,163,190,227,255,162,189,225,255,158,186,223,255,160,186,223,
255,162,186,221,255,164,186,220,255,182,204,235,255,115,128,149,255,195,193,196,
255,234,233,243,255,230,230,239,255,236,235,245,255,239,237,247,255,223,223,230,
255,115,115,117,251,16,16,16,92,0,0,0,2,66,66,66,62,136,136,139,248,243,243,250,
255,232,232,239,255,230,230,237,255,230,230,236,255,235,235,241,255,220,218,219,
255,146,159,172,255,207,231,250,255,208,230,246,255,210,231,247,255,214,232,248,
255,215,234,248,255,218,235,249,255,220,236,249,255,221,237,249,255,220,236,249,
255,217,235,249,255,212,233,249,255,208,230,248,255,210,234,253,255,162,185,205,
255,177,178,183,255,214,214,226,255,204,204,217,255,206,206,218,255,196,203,211,
255,220,220,233,255,186,186,195,255,51,51,52,202,1,1,1,36,73,73,73,127,191,191,
195,255,242,242,248,255,234,234,239,255,234,234,239,255,234,234,239,255,241,241,
246,255,210,209,210,255,146,174,196,255,196,236,255,255,191,229,253,255,192,229,
253,255,195,230,253,255,196,230,253,255,191,229,252,255,180,224,252,255,168,219,
252,255,160,215,252,255,155,213,252,255,151,212,252,255,149,211,251,255,152,215,
254,255,131,193,236,255,162,171,180,255,222,221,229,255,213,209,223,255,143,186,
173,255,123,183,164,255,214,210,224,255,213,213,224,255,92,92,94,241,5,5,5,90,
85,85,84,169,215,215,219,255,243,243,247,255,236,236,240,255,236,236,241,255,
237,237,242,255,243,241,245,255,189,190,196,255,131,186,226,255,151,215,255,255,
153,213,253,255,154,214,253,255,134,206,253,255,107,194,253,255,91,188,252,255,
80,184,252,255,78,183,252,255,78,183,252,255,79,183,252,255,79,184,252,255,79,
184,252,255,79,184,253,255,73,180,253,255,132,161,183,255,228,223,227,255,217,
216,226,255,187,203,205,255,199,209,215,255,220,219,228,255,225,225,235,255,122,
122,124,252,8,8,7,123,97,97,97,199,231,231,233,255,245,245,248,255,239,239,243,
255,239,239,242,255,231,231,236,255,233,228,233,255,170,180,191,255,106,186,240,
255,122,204,255,255,102,194,255,255,53,174,255,255,23,162,255,255,18,160,254,
255,20,162,254,255,22,163,254,255,22,163,254,255,22,163,254,255,22,163,254,255,
22,163,254,255,22,163,254,255,23,163,254,255,12,160,255,255,94,154,195,255,232,
222,221,255,222,224,232,255,227,225,233,255,225,223,232,255,221,222,229,255,232,
232,239,255,148,148,151,255,10,10,10,140,107,107,108,217,239,239,241,255,250,
250,252,255,241,241,244,255,230,230,236,255,227,227,233,255,235,230,231,255,151,
176,200,255,94,183,247,255,61,170,255,255,6,145,255,255,0,140,255,255,0,142,255,
255,0,143,255,255,0,143,255,255,0,143,255,255,0,143,255,255,0,143,255,255,0,143,
255,255,0,143,255,255,0,143,255,255,0,143,255,255,0,142,255,255,48,140,215,255,
229,221,219,255,231,231,237,255,226,226,233,255,226,226,233,255,228,228,235,255,
241,241,247,255,166,166,169,255,12,12,12,150,102,102,106,225,197,197,211,255,
230,230,236,255,239,239,241,255,237,237,240,255,238,238,240,255,241,236,234,255,
128,170,216,255,34,141,254,255,0,119,255,255,0,121,255,255,0,123,255,255,0,124,
255,255,0,124,255,255,0,124,255,255,0,124,255,255,0,124,255,255,0,124,255,255,0,
124,255,255,0,123,255,255,0,122,255,255,0,122,255,255,0,120,255,255,14,119,235,
255,213,215,220,255,244,242,243,255,237,238,240,255,238,238,241,255,229,229,235,
255,215,215,227,255,146,146,156,255,15,15,14,155,101,101,105,221,172,172,192,
255,177,177,198,255,189,189,205,255,206,206,218,255,223,223,229,255,240,236,234,
255,115,167,234,255,23,116,255,255,15,114,255,255,8,111,255,255,0,107,255,255,0,
104,255,255,0,102,255,255,0,102,255,255,0,102,255,255,0,102,255,255,0,102,255,
255,0,103,255,255,0,106,255,255,4,110,255,255,12,114,255,255,21,115,255,255,47,
129,246,255,208,217,229,255,237,233,235,255,211,212,221,255,197,197,211,255,180,
180,199,255,179,179,201,255,138,138,150,255,17,17,15,155,99,99,101,210,178,178,
196,255,183,183,202,255,178,178,198,255,176,176,196,255,180,180,200,255,193,192,
210,255,195,199,219,255,184,196,224,255,176,197,235,255,169,198,242,255,158,193,
245,255,149,189,246,255,141,185,246,255,136,181,244,255,132,181,249,255,135,181,
247,255,139,183,246,255,146,188,247,255,154,192,245,255,165,196,243,255,174,198,
237,255,181,197,228,255,193,199,221,255,197,197,214,255,184,184,204,255,176,176,
196,255,177,177,197,255,180,180,199,255,187,187,208,255,136,136,146,255,14,14,
13,151,93,93,95,190,181,181,197,255,192,192,210,255,189,189,206,255,190,190,
207,255,183,183,199,255,168,168,184,255,172,170,184,255,178,173,184,255,180,176,
184,255,183,177,185,255,187,181,187,255,190,183,188,255,192,185,189,255,193,185,
189,255,192,185,190,255,193,185,190,255,192,185,190,255,190,184,189,255,188,182,
188,255,184,178,185,255,181,176,184,255,179,174,184,255,175,172,184,255,168,168,
184,255,176,176,191,255,190,190,207,255,189,189,206,255,189,189,206,255,196,196,
214,255,129,129,136,254,12,12,11,145,88,88,88,163,182,182,195,255,201,201,218,
255,197,197,212,255,205,205,221,255,155,155,165,255,62,62,63,255,65,65,66,255,
59,59,60,255,58,58,59,255,58,58,60,255,58,58,59,255,58,58,59,255,57,57,59,255,
57,57,59,255,57,57,59,255,57,57,59,255,57,57,59,255,57,57,59,255,58,58,59,255,
58,58,59,255,58,58,60,255,58,58,59,255,63,64,65,255,61,61,62,255,108,108,112,
255,203,203,218,255,197,197,212,255,197,197,212,255,205,205,220,255,115,115,120,
250,8,8,8,133,81,81,82,133,179,179,189,255,211,211,225,255,205,205,219,255,214,
214,229,255,153,153,158,255,59,59,58,255,74,74,73,255,133,133,132,255,140,140,
139,255,138,138,137,255,138,138,138,255,138,138,138,255,139,139,138,255,139,139,
138,255,139,139,138,255,139,139,138,255,139,139,138,255,139,139,139,255,139,139,
139,255,139,139,139,255,139,139,139,255,144,144,143,255,98,98,98,255,58,58,57,
255,104,104,106,255,207,207,220,255,207,207,220,255,206,206,220,255,209,209,222,
255,100,100,103,243,5,5,5,117,56,56,55,88,166,166,172,255,224,224,235,255,216,
216,226,255,222,222,233,255,162,162,165,255,91,91,90,255,136,136,138,255,220,
220,220,255,215,215,216,255,213,213,214,255,213,213,214,255,212,212,213,255,211,
211,213,255,211,211,212,255,210,210,211,255,209,209,211,255,209,209,211,255,207,
207,210,255,207,207,209,255,206,206,209,255,204,204,208,255,214,214,216,255,186,
186,186,255,94,94,94,255,125,125,126,255,211,211,221,255,218,218,229,255,218,
218,229,255,211,211,221,255,74,74,75,231,1,1,0,94,20,20,19,33,133,133,135,231,
238,238,246,255,230,230,237,255,229,229,236,255,227,227,231,255,202,202,210,255,
219,219,226,255,250,250,250,255,241,241,243,255,240,240,242,255,238,238,241,255,
236,236,239,255,235,235,239,255,233,233,237,255,231,231,236,255,230,230,234,255,
229,229,234,255,226,226,232,255,225,225,230,255,223,223,229,255,220,220,228,255,
224,224,231,255,237,237,240,255,174,174,183,255,222,222,226,255,230,230,236,255,
228,228,235,255,241,241,249,255,187,187,192,255,34,34,34,200,0,0,0,65,7,7,7,0,
75,75,75,150,199,199,204,255,232,232,240,255,233,233,241,255,234,234,242,255,
194,194,210,255,245,245,247,255,253,253,254,255,248,248,250,255,246,246,249,255,
245,245,248,255,243,243,247,255,242,242,246,255,240,240,244,255,238,238,244,255,
237,237,242,255,235,235,241,255,233,233,239,255,232,232,239,255,230,230,237,255,
229,229,236,255,225,225,233,255,249,249,252,255,186,186,194,255,209,209,219,255,
237,237,245,255,234,234,241,255,224,224,231,255,117,117,118,251,6,6,5,146,0,0,0,
33,0,0,0,0,5,5,5,24,56,56,56,153,89,89,92,214,113,113,115,233,132,132,140,244,
201,201,214,255,255,255,255,255,246,246,248,255,245,245,248,255,244,244,246,255,
242,242,246,255,240,240,244,255,239,239,243,255,237,237,242,255,236,236,241,255,
234,234,239,255,232,232,238,255,230,230,237,255,229,229,236,255,227,227,234,255,
226,226,233,255,222,222,231,255,235,235,241,255,229,229,232,255,130,130,142,250,
118,118,121,237,97,97,100,229,65,65,66,211,14,14,14,165,0,0,0,74,0,0,0,7,0,0,0,
0,0,0,0,0,0,0,0,15,0,0,0,51,0,0,0,65,75,75,87,162,242,242,246,255,252,252,252,
255,244,244,246,255,244,244,245,255,242,242,245,255,240,240,244,255,237,237,242,
255,235,235,242,255,233,233,240,255,233,233,239,255,231,231,237,255,229,229,236,
255,227,227,234,255,225,225,233,255,223,223,231,255,222,222,231,255,219,219,229,
255,218,218,228,255,254,254,255,255,127,127,134,242,0,0,0,140,0,0,0,85,0,0,0,68,
0,0,0,43,0,0,0,11,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,2,0,102,102,120,6,179,
179,194,186,255,255,255,255,255,255,255,255,254,254,255,255,253,253,254,255,252,
252,254,255,251,251,253,255,250,250,253,255,249,249,253,255,248,248,251,255,247,
247,251,255,246,246,250,255,245,245,250,255,244,244,249,255,244,244,248,255,243,
243,247,255,243,243,247,255,241,241,247,255,238,238,244,255,255,255,255,255,220,
220,224,255,28,28,33,145,0,0,0,13,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,15,15,17,0,118,118,137,0,163,163,189,42,204,204,218,244,232,232,238,255,230,
230,237,255,230,230,237,255,230,230,236,255,228,228,235,255,227,227,234,255,226,
226,232,255,225,225,231,255,224,224,229,255,223,223,228,255,221,221,227,255,221,
221,226,255,219,219,224,255,218,218,223,255,217,217,222,255,215,215,221,255,214,
214,219,255,213,213,218,255,212,212,216,255,207,207,213,255,72,72,81,207,0,0,0,
44,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,45,45,52,0,174,174,201,0,
127,127,147,11,43,43,49,98,39,39,45,151,38,38,44,156,38,38,44,156,38,38,43,156,
37,37,42,156,35,35,41,156,35,35,40,156,34,34,39,156,32,32,37,156,32,32,36,156,
30,30,35,156,29,29,34,156,28,28,33,156,27,27,32,156,26,26,31,156,25,25,29,156,
24,24,28,156,23,23,27,156,22,22,26,156,23,23,28,159,15,15,17,137,0,0,0,48,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0};
static Fl_Image *image_printer() {
  static Fl_Image *image = new Fl_RGB_Image(idata_printer, 32, 32, 4, 0);
  return image;
}

static void cb_Fetch1(Fl_Button*, void*) {
  system( " screen -d -m xterm -e ' wget -c --no-check-certificate   https://raw.githubusercontent.com/lusamek/OpenCalphad/master/macros.zip -O   ~/macros.zip ; cd ; unzip macros.zip ;  flopencalphad ~/macros ' " );
}

static void cb_Fetch2(Fl_Button*, void*) {
  // system( " screen -d -m xterm -e ' wget -c --no-check-certificate   https://raw.githubusercontent.com/lusamek/OpenCalphad/master/macros.zip -O   ~/macros.zip ; cd ; unzip macros.zip ;  flopencalphad ~/macros ' " );



 system( " cd ;  screen -d -m xterm -e ' wget -c --no-check-certificate https://codeload.github.com/lusamek/OpenCalphad/zip/master  -O  OpenCalphad.zip ' ");
}

static void cb_OpenCalphad(Fl_Button*, void*) {
  if ( fexist( "/usr/bin/chromium" ) == 1) 
   nsystem(  " screen -d -m chromium  --new-window  https://webchat.freenode.net/?channels=#opencalphad " );
   
else if ( fexist( "/usr/bin/chromium-browser" ) == 1) 
   nsystem(  " screen -d -m chromium-browser   --new-window  https://webchat.freenode.net/?channels=#opencalphad  " );
}

static void cb_Tutorial(Fl_Button*, void*) {
  if ( fexist( "/usr/bin/chromium" ) == 1) 
   nsystem(  " screen -d -m chromium  --new-window  http://github.com/lusamek/opencalphad " );
   
else if ( fexist( "/usr/bin/chromium-browser" ) == 1) 
   nsystem(  " screen -d -m chromium-browser   --new-window  http://github.com/lusamek/opencalphad " );
   
else
   nsystem(  " screen -d -m dillo http://github.com/lusamek/opencalphad " );
}

static void cb_ls1(Fl_Button*, void*) {
  nls();
}

static void cb_xterm(Fl_Button*, void*) {
  nsystem( " screen -d -m xterm " );
}

static void cb_notepad(Fl_Button*, void*) {
  nsystem( " screen -d -m flnotepad " );
}

static void cb_xpaint(Fl_Button*, void*) {
  // nsystem( " screen -d -m xpaint  " );


 nsystem( "   screen -d -m  xpaint   -canvas -size 640x480    " );
}

static void cb_Path1(Fl_Button*, void*) {
  redraw();

  printf( "============================\n" );
  printf( "   PATH                     \n" );
  printf( "============================\n" );
  
    char mydirnow[2500];
  printf( "Current Directory: %s \n", getcwd( mydirnow, 2500 ) );
}

static void cb_rox(Fl_Button*, void*) {
  nsystem( " rox " );
}

static void cb_x48(Fl_Button*, void*) {
  nsystem( " screen -d -m x48 " );
}

static void cb_xlock(Fl_Button*, void*) {
  nsystem( "  cd ; screen -d -m   xlock  -nolock  " );
}

static void cb_Keyboard1(Fl_Button*, void*) {
  nsystem( " screen -d -m flkeyboard " );
}

static void cb_Monitor(Fl_Button*, void*) {
  nsystem( " screen -d -m flmonitor " );
}

static void cb_CAS(Fl_Button*, void*) {
  nsystem( " screen -d -m xterm -e mathomatic   " );
}

static void cb_calc(Fl_Button*, void*) {
  nsystem( " screen -d -m flcalc    " );
}

static void cb_Web(Fl_Button*, void*) {
  if ( fexist( "/usr/bin/dillo" ) == 1) 
   nsystem(  " screen -d -m dillo  http://duckduckgo.com   " );

else if ( fexist( "/usr/bin/chromium" ) == 1) 
   nsystem(  " screen -d -m chromium  --new-window  http://duckduckgo.com " );
   
else if ( fexist( "/usr/bin/chromium-browser" ) == 1) 
   nsystem(  " screen -d -m chromium-browser   --new-window  http://duckduckgo.com   " );
   
else if ( fexist( "/usr/bin/firefox" ) == 1) 
   nsystem(  " screen -d -m firefox  --new-window  http://duckduckgo.com " );
   
else if ( fexist( "/usr/bin/chromium-browser" ) == 1) 
   nsystem(  " screen -d -m chromium-browser   --new-window  http://duckduckgo.com   " );
   
else
   nsystem(  " screen -d -m dillo http://duckduckgo.com    " );
}

static void cb_Webpage(Fl_Button*, void*) {
  nsystem(  " screen -d -m chromium  --new-window  http://debian.org " );
}

static void cb_Mech(Fl_Button*, void*) {
  nsystem(  " screen -d -m  flmechprop    " );
}

static void cb_Bulk(Fl_Button*, void*) {
  nsystem(  " screen -d -m  fldiffusion  diffusion.dat    " );
}

static void cb_Fx(Fl_Button*, void*) {
  nsystem(  " screen -d -m  fxgrapher    " );
}

static void cb_Solubility(Fl_Button*, void*) {
  nsystem(  " screen -d -m  flsolubility    " );
}

static void cb_Periodic(Fl_Button*, void*) {
  nsystem(  " screen -d -m  gperiodic  " );
}

static void cb_JMol(Fl_Button*, void*) {
  nsystem(  " screen -d -m jmol   " );
}

static void cb_Advanced(Fl_Button*, void*) {
  win7->show();
}

Fl_Check_Button *checkbutton_single_console=(Fl_Check_Button *)0;

Fl_Check_Button *checkbutton_xterm_console=(Fl_Check_Button *)0;

Fl_Double_Window *win4=(Fl_Double_Window *)0;

static void cb_Close2(Fl_Button*, void*) {
  nsystem( " pkill gnuplot " );
}

static void cb_Clear(Fl_Button*, void*) {
  /// this might be modified for windows/mac ...
nsystem( "  rm  ocgnu.plt " );
nsystem( "  rm  advocgnu.plt " );
nsystem( "  rm  macro2.ocm " );

flplot_preview_browser->clear();
}

static void cb_View1(Fl_Button*, void*) {
  redraw();
  
  char charo[PATH_MAX];
  strncpy( charo, "", PATH_MAX );
  strncat( charo , " screen -d -m  flview   " , PATH_MAX - strlen( charo ) -1 );
  strncat( charo , " " , PATH_MAX -  strlen( charo ) -1 );
  strncat( charo , " \"" , PATH_MAX -  strlen( charo ) -1 );
  strncat( charo , "ocgnu.plt"   , PATH_MAX -  strlen( charo ) -1 );
  strncat( charo , "\" " , PATH_MAX -  strlen( charo ) -1 );
  nsystem(  charo );
}

static void cb_Edit3(Fl_Button*, void*) {
  redraw();
  
  char charo[PATH_MAX];
  strncpy( charo, "", PATH_MAX );
  strncat( charo , " screen -d -m  fledit   " , PATH_MAX - strlen( charo ) -1 );
  strncat( charo , " " , PATH_MAX -  strlen( charo ) -1 );
  strncat( charo , " \"" , PATH_MAX -  strlen( charo ) -1 );
  strncat( charo , "ocgnu.plt"   , PATH_MAX -  strlen( charo ) -1 );
  strncat( charo , "\" " , PATH_MAX -  strlen( charo ) -1 );
  nsystem(  charo );
}

static void cb_Plot1(Fl_Button*, void*) {
  char mydirnow[2500];
  printf( "Current Directory: %s \n", getcwd( mydirnow, 2500 ) );
  
  redraw();

  
  if ( plot_gnuplot_term_driver_force->value( ) == 0 )  
  {
      ncp( "advocgnu.plt" , "ocgnu.plt" );
      form_plot_statusline->value("ocgnu.plt");
      void_plot_preview_plotfile(  "ocgnu.plt" );
      nsystem(  "  screen -d  -m  gnuplot ocgnu.plt     " );
  }   
  
  else if ( plot_gnuplot_term_driver_force->value( ) == 1 )
  { 
      ncp(           "advocgnu.plt" , "ocgnu.plt" );
      ncopysetterm(  "advocgnu.plt" ,  "ocgnu.plt" ,  plot_gnuplot_term_drivername->value()   );
      form_plot_statusline->value( "advocgnu.plt" );
      void_plot_preview_plotfile(  "advocgnu.plt" );
      nsystem(  "  screen -d  -m  gnuplot advocgnu.plt  " );
  }  
     
  // oc6 bug 
  // gnuplot ocgnu.plt  &;
}

static void cb_Refresh1(Fl_Button*, void*) {
  form_plot_statusline->value("ocgnu.plt");
  void_plot_preview_plotfile(  "ocgnu.plt" );
}

Fl_Browser *flplot_preview_browser=(Fl_Browser *)0;

static void cb_Automatic(Fl_Button*, void*) {
  plot_gnuplot_term_driver_force->value( 0 );
}

Fl_Input *plot_gnuplot_term_drivername=(Fl_Input *)0;

Fl_Check_Button *plot_gnuplot_term_driver_force=(Fl_Check_Button *)0;

static void cb_5(Fl_Button*, void*) {
  printf("Util: Create help.txt !\n");

      FILE *fpout;

      fpout = fopen( "help.txt", "wb" );
      
      fputs( "===============\n", fpout );
      fputs( "GNUPLOT DRIVER \n", fpout );
      fputs( "===============\n", fpout );
      fputs( "cairolatex        canvas            cgm               context \n", fpout );
      fputs( "corel             dumb              dxf               eepic\n", fpout );
      fputs( "emf               emtex             epscairo          epslate\n", fpout );
      fputs( "fig               gif               hpgl              jpeg\n", fpout );
      fputs( "latex             lua               mf                mp\n", fpout );
      fputs( "pcl5              pdfcairo          png               pngcair\n", fpout );
      fputs( "pop               postscript        pslatex           pstex\n", fpout );
      fputs( "pstricks          push              qms               svg\n", fpout );
      fputs( "tek40xx           tek410x           texdraw           tgif\n", fpout );
      fputs( "tikz              tkcanvas          tpic              vttek\n", fpout );
      fputs( "wxt               x11               xlib              xterm\n", fpout );
      fclose( fpout );
      
      
      nsystem( " screen -d -m flview help.txt " );
}

static void cb_Edit4(Fl_Button*, void*) {
  redraw();
  
  char charo[PATH_MAX];
  strncpy( charo, "", PATH_MAX );
  strncat( charo , " screen -d -m  fledit   " , PATH_MAX - strlen( charo ) -1 );
  strncat( charo , " " , PATH_MAX -  strlen( charo ) -1 );
  strncat( charo , " \"" , PATH_MAX -  strlen( charo ) -1 );
  strncat( charo , "advocgnu.plt"   , PATH_MAX -  strlen( charo ) -1 );
  strncat( charo , "\" " , PATH_MAX -  strlen( charo ) -1 );
  nsystem(  charo );
}

static void cb_Adv(Fl_Button*, void*) {
  char mydirnow[2500];
  printf( "Current Directory: %s \n", getcwd( mydirnow, 2500 ) );

  redraw();
  ncpadvmac( "macro2.ocm" , "advmacro.ocm" );
  
  form_plot_statusline->value( "Compute advocgnu.plt in progress..." );
  flplot_preview_browser->clear();
  //void_plot_preview_plotfile(  "advocgnu.plt" );
  
  nsystem( "  rm  ocgnu.plt " );
  nsystem( "  rm  advocgnu.plt " );
  
  if ( checkbutton_xterm_console->value( ) == 1 ) 
     nsystem(  "  screen -d  -m   xterm -e   oc   macro2.ocm " );
     
  else if ( checkbutton_single_console->value( ) == 1 ) 
     nsystem(  "  oc   macro2.ocm " );
     
  // oc6 bug 
  // gnuplot ocgnu.plt  &;
}

static void cb_Edit5(Fl_Button*, void*) {
  redraw();


  form_plot_statusline->value( "Edit advmacro.ocm in progress..." );
  
  char charo[PATH_MAX];
  strncpy( charo, "", PATH_MAX );
  strncat( charo , " screen -d -m  fledit   " , PATH_MAX - strlen( charo ) -1 );
  strncat( charo , " " , PATH_MAX -  strlen( charo ) -1 );
  strncat( charo , " \"" , PATH_MAX -  strlen( charo ) -1 );
  strncat( charo , "advmacro.ocm"   , PATH_MAX -  strlen( charo ) -1 );
  strncat( charo , "\" " , PATH_MAX -  strlen( charo ) -1 );
  nsystem(  charo );
}

static void cb_Dup(Fl_Button*, void*) {
  redraw();
  ncp( "advmacro.ocm" , "macro.ocm" );
}

static void cb_View2(Fl_Button*, void*) {
  redraw();
  ncpadvmac( "macro2.ocm" , "advmacro.ocm" );

  ncat( "macro2.ocm" );

  form_plot_statusline->value( "View macro2.ocm in progress..." );
  
  char charo[PATH_MAX];
  strncpy( charo, "", PATH_MAX );
  strncat( charo , " screen -d -m  flview    " , PATH_MAX - strlen( charo ) -1 );
  strncat( charo , " " , PATH_MAX -  strlen( charo ) -1 );
  strncat( charo , " \"" , PATH_MAX -  strlen( charo ) -1 );
  strncat( charo , "macro2.ocm"   , PATH_MAX -  strlen( charo ) -1 );
  strncat( charo , "\" " , PATH_MAX -  strlen( charo ) -1 );
  nsystem(  charo );
}

Fl_Check_Button *plot_adv_computer_skipint=(Fl_Check_Button *)0;

static void cb_plot_adv_computer_skipint(Fl_Check_Button*, void*) {
  plot_adv_computer_skipint_int = plot_adv_computer_skipint->value();

printf( "%d\n", plot_adv_computer_skipint->value() );
printf( "%d\n", plot_adv_computer_skipint_int );
}

static void cb_Adv1(Fl_Button*, void*) {
  char mydirnow[2500];
  printf( "Current Directory: %s \n", getcwd( mydirnow, 2500 ) );
  
  redraw();
  
 
      ncp(           "advocgnu.plt" , "ocgnu.plt" );
      ncopysetterm(  "advocgnu.plt" ,  "ocgnu.plt" ,  plot_gnuplot_term_drivername->value()   );
      
      
      form_plot_statusline->value( "Plot of advocgnu.plt in progress..." );
      void_plot_preview_plotfile(  "advocgnu.plt" );
      
      nsystem(  "  screen -d  -m  gnuplot advocgnu.plt  " );
}

static void cb_Compute(Fl_Button*, void*) {
  nsystem( "  rm  ocgnu.plt " );
  nsystem( "  rm  advocgnu.plt " );

  char mydirnow[2500];
  printf( "Current Directory: %s \n", getcwd( mydirnow, 2500 ) );
  redraw();
  
  form_plot_statusline->value( "Compute ocgnu.plt in progress..." );
  flplot_preview_browser->clear();
  
  if ( checkbutton_xterm_console->value( ) == 1 ) 
     nsystem(  "  screen -d  -m   xterm -e   oc   macro.ocm " );
     
  else if ( checkbutton_single_console->value( ) == 1 ) 
     nsystem(  "  oc   macro.ocm " );
     
  // oc6 bug 
  // gnuplot ocgnu.plt  &;
}

static void cb_Close3(Fl_Button*, void*) {
  win4->hide();
}

Fl_Output *form_plot_statusline=(Fl_Output *)0;

Fl_Double_Window *win5=(Fl_Double_Window *)0;

Fl_Browser *browser2=(Fl_Browser *)0;

static void cb_browser2(Fl_Browser*, void*) {
  printf( "Click\n" );


 input_var_macro_filename->value(  browser2->text(   browser2->value() ) ); 



  
  int fetchi;
  FILE *fp5;
  FILE *fp6;
  char fetchline[PATH_MAX];
  char fetchlinetmp[PATH_MAX];
  char filein[PATH_MAX];
  strncpy( filein,   input_var_macro_filename->value(), PATH_MAX );
  
  
    browser_macro_filecontent->clear();
    
    fp6 = fopen( filein , "rb");
    while( !feof(fp6) ) 
    {
          fgets(fetchlinetmp, PATH_MAX, fp6); 
          strncpy( fetchline, "" , PATH_MAX );
          for( fetchi = 0 ; ( fetchi <= strlen( fetchlinetmp ) ); fetchi++ )
            if ( fetchlinetmp[ fetchi ] != '\n' )
                 fetchline[fetchi]=fetchlinetmp[fetchi];
                 
                if ( !feof( fp6 ) ) 
                {
                    browser_macro_filecontent->add( fetchline );    
                }

     }
     fclose( fp6 );

  
 
 redraw();
}

Fl_Input *input_var_macro_filename=(Fl_Input *)0;

static void cb_Browse1(Fl_Button*, void*) {
  redraw();

  printf( "============================\n" );
  printf( "   MACRO                    \n" );
  printf( "============================\n" );
  
  nlsgrep( ".ocm" );
  nlsgrep( ".OCM" );
   
      
        browser2->clear();
	DIR *dirp;
	struct dirent *dp;
	dirp = opendir( "." );
	while  ((dp = readdir( dirp )) != NULL ) 
	{
		if (  strcmp( dp->d_name, "." ) != 0 )
		if (  strcmp( dp->d_name, ".." ) != 0 )
                {
                    if ( ( strstr( dp->d_name, ".OCM" ) != 0 )  || ( strstr( dp->d_name, ".ocm" ) != 0 )          ) 
                    {
			printf( "%s\n", dp->d_name );
 		        browser2->add(  dp->d_name  );
 		     }
                }
	}
	closedir( dirp );
}

static void cb_New(Fl_Button*, void*) {
  redraw();
  char charo[PATH_MAX];
  strncpy( charo, "", PATH_MAX );
  strncat( charo , " screen -d -m  flnotepad  " , PATH_MAX - strlen( charo ) -1 );
  strncat( charo , " " , PATH_MAX -  strlen( charo ) -1 );
  strncat( charo , " \"" , PATH_MAX -  strlen( charo ) -1 );
  strncat( charo , input_var_macro_filename->value() , PATH_MAX -  strlen( charo ) -1 );
  strncat( charo , "\" " , PATH_MAX -  strlen( charo ) -1 );
  nsystem(  charo );
}

static void cb_Use(Fl_Button*, void*) {
  redraw();

  printf( "============================\n" );
  printf( "   MACRO                    \n" );
  printf( "============================\n" );
  
  printf( "   FILECOPY                  \n" );
  printf( "   Source: %s                  \n" ,  input_var_macro_filename->value()   );
  printf( "   Destination: %s                  \n" ,  "macro.ocm"   );
  

  ncp( "macro.ocm" ,   input_var_macro_filename->value() );
  
  void_flfront_preview_browser1_refresh();
}

static void cb_View3(Fl_Button*, void*) {
  redraw();
  
  char charo[PATH_MAX];
  strncpy( charo, "", PATH_MAX );
  strncat( charo , " screen -d -m  flview   " , PATH_MAX - strlen( charo ) -1 );
  strncat( charo , " " , PATH_MAX -  strlen( charo ) -1 );
  strncat( charo , " \"" , PATH_MAX -  strlen( charo ) -1 );
  strncat( charo , input_var_macro_filename->value() , PATH_MAX -  strlen( charo ) -1 );
  strncat( charo , "\" " , PATH_MAX -  strlen( charo ) -1 );
  nsystem(  charo );
}

static void cb_Cat1(Fl_Button*, void*) {
  redraw();
  
  ncat( input_var_macro_filename->value() );
}

static void cb_Edit6(Fl_Button*, void*) {
  redraw();
  
  char charo[PATH_MAX];
  strncpy( charo, "", PATH_MAX );
  strncat( charo , " screen -d -m  fledit  " , PATH_MAX - strlen( charo ) -1 );
  strncat( charo , " " , PATH_MAX -  strlen( charo ) -1 );
  strncat( charo , " \"" , PATH_MAX -  strlen( charo ) -1 );
  strncat( charo , input_var_macro_filename->value() , PATH_MAX -  strlen( charo ) -1 );
  strncat( charo , "\" " , PATH_MAX -  strlen( charo ) -1 );
  nsystem(  charo );
}

static void cb_Browse2(Fl_Button*, void*) {
  redraw();

  printf( "============================\n" );
  printf( "   MACRO                    \n" );
  printf( "============================\n" );

  nlsgrep( ".ocl" );
 
  printf( "  ocl: improved OC format with more features (ocl: OC Language).\n" );
  printf( "  ocm: standard OC format.\n" );
     
        browser2->clear();
	DIR *dirp;
	struct dirent *dp;
	dirp = opendir( "." );
	while  ((dp = readdir( dirp )) != NULL ) 
	{
		if (  strcmp( dp->d_name, "." ) != 0 )
		if (  strcmp( dp->d_name, ".." ) != 0 )
                {
                    if ( strstr( dp->d_name, ".ocl" ) != 0 ) 
                    {
			printf( "%s\n", dp->d_name );
 		        browser2->add(  dp->d_name  );
 		     }
                }
	}
	closedir( dirp );
}

static void cb_Use1(Fl_Button*, void*) {
  redraw();

  printf( "============================\n" );
  printf( "   MACRO (OCL with SKIP)    \n" );
  printf( "============================\n" );
  
  printf( "   FILECOPY                  \n" );
  printf( "   Source: %s                  \n" ,  input_var_macro_filename->value()   );
  printf( "   Destination: %s                  \n" ,  "macro.ocm"   );
  
  ncpskip(  "macro.ocm" ,  input_var_macro_filename->value()  ,  "@&"  );
}

static void cb_Close4(Fl_Button*, void*) {
  win5->hide();
}

Fl_Browser *browser_macro_filecontent=(Fl_Browser *)0;

Fl_Double_Window *win6=(Fl_Double_Window *)0;

Fl_Input *input_var_set_condition=(Fl_Input *)0;

Fl_Input *input_var_calc_ymin=(Fl_Input *)0;

Fl_Input *input_var_calc_ymax=(Fl_Input *)0;

Fl_Input *input_var_calc_ystep=(Fl_Input *)0;

Fl_Input *input_var_calc_xmin=(Fl_Input *)0;

Fl_Input *input_var_calc_xmax=(Fl_Input *)0;

static void cb_Close5(Fl_Button*, void*) {
  win6->hide();
}

Fl_Double_Window *win7=(Fl_Double_Window *)0;

static void cb_ccode(Fl_Button*, void*) {
  nsystem( " screen -d -m fledit flopencalphad_def.h  " );
}

static void cb_Inipath(Fl_Button*, void*) {
  redraw();

  printf( "============================\n" );
  printf( "  CHANGE PATH               \n" );
  printf( "============================\n" );
  
  printf( "Change to...\n" );
  chdir( inipath );
  
  char mydirnow[2500];
  printf( "Current Directory: %s \n", getcwd( mydirnow, 2500 ) );
}

static void cb_Userpath(Fl_Button*, void*) {
  redraw();

  printf( "============================\n" );
  printf( "  CHANGE PATH               \n" );
  printf( "============================\n" );
  
  printf( "Change to...\n" );
  chdir( userpath );
  
  char mydirnow[2500];
  printf( "Current Directory: %s \n", getcwd( mydirnow, 2500 ) );
}

static void cb_chdir(Fl_Button*, void*) {
  redraw();

  printf( "============================\n" );
  printf( "  CHANGE PATH               \n" );
  printf( "============================\n" );
  
  printf( "Change to...\n" );
  chdir( dev_path_input1->value()  );
  
  char mydirnow[2500];
  printf( "Current Directory: %s \n", getcwd( mydirnow, 2500 ) );
}

Fl_Input *dev_path_input1=(Fl_Input *)0;

static void cb_Close6(Fl_Button*, void*) {
  win7->hide();
}

static void cb_VIM(Fl_Button*, void*) {
  redraw();
  
  nrun( " vim " ,  input_var_macro_filename->value() );
}

static void cb_VIM1(Fl_Button*, void*) {
  redraw();
  
  nrun( " vim " , "macro.ocm" );
}

static void cb_VIM2(Fl_Button*, void*) {
  redraw();
  
  nrun( " vim " , input_var_tdb_database->value(  ) );
}

static void cb_41(Fl_Button*, void*) {
  char mydirnow[2500];
  printf( "Current Directory: %s \n", getcwd( mydirnow, 2500 ) );



  redraw();
  nsystem(  "  screen -d  -m  gnuplot ocgnu.plt  " );
  
  
  // oc6 bug 
  // gnuplot ocgnu.plt  &;
}

static void cb_31(Fl_Button*, void*) {
  char mydirnow[2500];
  printf( "Current Directory: %s \n", getcwd( mydirnow, 2500 ) );



  redraw();
  nsystem(  "  screen -d  -m   xterm -e   oc   macro.ocm " );
  
  // oc6 bug 
  // gnuplot ocgnu.plt  &;
}

static void cb_GnuPlot(Fl_Button*, void*) {
  char mydirnow[2500];
  printf( "Current Directory: %s \n", getcwd( mydirnow, 2500 ) );



  redraw();
  
  printf(   "Export Result on Solaris/Unix/BSD Simulation Station\n" );
  
  nsystem(  " env DISPLAY=192.168.1.2:0    screen -d  -m  gnuplot ocgnu.plt  " );
  
  
  
  // oc6 bug 
  // gnuplot ocgnu.plt  &;
}

Fl_Double_Window *form_element_pse=(Fl_Double_Window *)0;

static void cb_Close7(Fl_Button*, void*) {
  form_element_pse->hide();
}

static void cb_H(Fl_Button*, void*) {
  void_form_add_new_element( "h" );
}

static void cb_Li(Fl_Button*, void*) {
  void_form_add_new_element( "li" );
}

static void cb_Na(Fl_Button*, void*) {
  void_form_add_new_element( "na" );
}

static void cb_K(Fl_Button*, void*) {
  void_form_add_new_element( "k" );
}

static void cb_Rb(Fl_Button*, void*) {
  void_form_add_new_element( "rb" );
}

static void cb_Cs(Fl_Button*, void*) {
  void_form_add_new_element( "cs" );
}

static void cb_Fr(Fl_Button*, void*) {
  void_form_add_new_element( "fr" );
}

static void cb_Be(Fl_Button*, void*) {
  void_form_add_new_element( "be" );
}

static void cb_Mg(Fl_Button*, void*) {
  void_form_add_new_element( "mg" );
}

static void cb_Ca(Fl_Button*, void*) {
  void_form_add_new_element( "ca" );
}

static void cb_Sr(Fl_Button*, void*) {
  void_form_add_new_element( "sr" );
}

static void cb_Ba(Fl_Button*, void*) {
  void_form_add_new_element( "ba" );
}

static void cb_Ra(Fl_Button*, void*) {
  void_form_add_new_element( "ra" );
}

static void cb_Sc(Fl_Button*, void*) {
  void_form_add_new_element( "sc" );
}

static void cb_Y(Fl_Button*, void*) {
  void_form_add_new_element( "y" );
}

static void cb_Lu(Fl_Button*, void*) {
  void_form_add_new_element( "lu" );
}

static void cb_Lr(Fl_Button*, void*) {
  void_form_add_new_element( "lr" );
}

static void cb_Ti1(Fl_Button*, void*) {
  void_form_add_new_element( "ti" );
}

static void cb_Zr(Fl_Button*, void*) {
  void_form_add_new_element( "zr" );
}

static void cb_Hf(Fl_Button*, void*) {
  void_form_add_new_element( "hf" );
}

static void cb_Rf(Fl_Button*, void*) {
  void_form_add_new_element( "rf" );
}

static void cb_V1(Fl_Button*, void* v) {
  void_form_add_new_element( "v" );
}

static void cb_Nb1(Fl_Button*, void*) {
  void_form_add_new_element( "nb" );
}

static void cb_Ta(Fl_Button*, void*) {
  void_form_add_new_element( "ta" );
}

static void cb_Db(Fl_Button*, void*) {
  void_form_add_new_element( "db" );
}

static void cb_Cr1(Fl_Button*, void*) {
  void_form_add_new_element( "cr" );
}

static void cb_Mo1(Fl_Button*, void*) {
  void_form_add_new_element( "mo" );
}

static void cb_W1(Fl_Button*, void*) {
  void_form_add_new_element( "w" );
}

static void cb_Sg(Fl_Button*, void*) {
  void_form_add_new_element( "sg" );
}

static void cb_Mn1(Fl_Button*, void*) {
  void_form_add_new_element( "mn" );
}

static void cb_Tc(Fl_Button*, void*) {
  system( " xterm   "  );
}

static void cb_Re(Fl_Button*, void*) {
  void_form_add_new_element( "re" );
}

static void cb_Bh(Fl_Button*, void*) {
  void_form_add_new_element( "bh" );
}

static void cb_Fe1(Fl_Button*, void*) {
  void_form_add_new_element( "fe" );
}

static void cb_Ru(Fl_Button*, void*) {
  void_form_add_new_element( "ru" );
}

static void cb_Os(Fl_Button*, void*) {
  void_form_add_new_element( "os" );
}

static void cb_Hs(Fl_Button*, void*) {
  void_form_add_new_element( "hs" );
}

static void cb_Co(Fl_Button*, void*) {
  void_form_add_new_element( "co" );
}

static void cb_Rh(Fl_Button*, void*) {
  void_form_add_new_element( "rh" );
}

static void cb_Ir(Fl_Button*, void*) {
  void_form_add_new_element( "ir" );
}

static void cb_Mt(Fl_Button*, void*) {
  void_form_add_new_element( "mt" );
}

static void cb_Ni1(Fl_Button*, void*) {
  void_form_add_new_element( "ni" );
}

static void cb_Pd(Fl_Button*, void*) {
  void_form_add_new_element( "pd" );
}

static void cb_Pt(Fl_Button*, void*) {
  void_form_add_new_element( "pt" );
}

static void cb_Ds(Fl_Button*, void*) {
  void_form_add_new_element( "ds" );
}

static void cb_Cu1(Fl_Button*, void*) {
  void_form_add_new_element( "cu" );
}

static void cb_Ag1(Fl_Button*, void*) {
  void_form_add_new_element( "ag" );
}

static void cb_Au(Fl_Button*, void*) {
  void_form_add_new_element( "au" );
}

static void cb_Rg(Fl_Button*, void*) {
  void_form_add_new_element( "rg" );
}

static void cb_Zn1(Fl_Button*, void*) {
  void_form_add_new_element( "zn" );
}

static void cb_Cd(Fl_Button*, void*) {
  void_form_add_new_element( "cd" );
}

static void cb_Hg(Fl_Button*, void*) {
  system( " xterm   "  );
}

static void cb_Cn(Fl_Button*, void*) {
  void_form_add_new_element( "cn" );
}

static void cb_B(Fl_Button*, void*) {
  void_form_add_new_element( "b" );
}

static void cb_Al1(Fl_Button*, void*) {
  void_form_add_new_element( "al" );
}

static void cb_Ga(Fl_Button*, void*) {
  void_form_add_new_element( "ga" );
}

static void cb_In(Fl_Button*, void*) {
  void_form_add_new_element( "In" );
}

static void cb_TI(Fl_Button*, void*) {
  void_form_add_new_element( "tl" );
}

static void cb_Uut(Fl_Button*, void*) {
  void_form_add_new_element( "uut" );
}

static void cb_C1(Fl_Button*, void*) {
  void_form_add_new_element( "c" );
}

static void cb_Si1(Fl_Button*, void*) {
  void_form_add_new_element( "si" );
}

static void cb_Ge(Fl_Button*, void*) {
  void_form_add_new_element( "ge" );
}

static void cb_Sn(Fl_Button*, void*) {
  void_form_add_new_element( "sn" );
}

static void cb_Pb(Fl_Button*, void*) {
  void_form_add_new_element( "pb" );
}

static void cb_Uuq(Fl_Button*, void*) {
  void_form_add_new_element( "uuq" );
}

static void cb_N(Fl_Button*, void*) {
  void_form_add_new_element( "n" );
}

static void cb_P(Fl_Button*, void*) {
  void_form_add_new_element( "p" );
}

static void cb_As(Fl_Button*, void*) {
  void_form_add_new_element( "as" );
}

static void cb_Sb(Fl_Button*, void*) {
  void_form_add_new_element( "sb" );
}

static void cb_Bi(Fl_Button*, void*) {
  void_form_add_new_element( "bi" );
}

static void cb_Uup(Fl_Button*, void*) {
  void_form_add_new_element( "uup" );
}

static void cb_O(Fl_Button* o, void*) {
  void_form_add_new_element( "o" );
}

static void cb_S(Fl_Button*, void*) {
  void_form_add_new_element( "s" );
}

static void cb_Se(Fl_Button*, void*) {
  void_form_add_new_element( "se" );
}

static void cb_Te(Fl_Button*, void*) {
  void_form_add_new_element( "te" );
}

static void cb_Po(Fl_Button*, void*) {
  void_form_add_new_element( "po" );
}

static void cb_Uuh(Fl_Button*, void*) {
  void_form_add_new_element( "uuh" );
}

static void cb_F(Fl_Button*, void*) {
  void_form_add_new_element( "f" );
}

static void cb_Cl(Fl_Button*, void*) {
  void_form_add_new_element( "cl" );
}

static void cb_Br(Fl_Button*, void*) {
  void_form_add_new_element( "br" );
}

static void cb_I(Fl_Button*, void*) {
  void_form_add_new_element( "I" );
}

static void cb_At(Fl_Button*, void*) {
  void_form_add_new_element( "at" );
}

static void cb_Uus(Fl_Button*, void*) {
  void_form_add_new_element( "uus" );
}

static void cb_Ne(Fl_Button*, void*) {
  void_form_add_new_element( "ne" );
}

static void cb_Ar(Fl_Button*, void*) {
  void_form_add_new_element( "ar" );
}

static void cb_Kr(Fl_Button*, void*) {
  void_form_add_new_element( "kr" );
}

static void cb_Xe(Fl_Button*, void*) {
  void_form_add_new_element( "xe" );
}

static void cb_Rn(Fl_Button*, void*) {
  void_form_add_new_element( "rn" );
}

static void cb_Uuo(Fl_Button*, void*) {
  void_form_add_new_element( "uuo" );
}

static void cb_He(Fl_Button*, void*) {
  void_form_add_new_element( "he" );
}

static void cb_La(Fl_Button*, void*) {
  system( " xterm   "  );
}

static void cb_Ac(Fl_Button*, void*) {
  system( " xterm   "  );
}

static void cb_Ce(Fl_Button*, void*) {
  system( " xterm   "  );
}

static void cb_Th(Fl_Button*, void*) {
  system( " xterm   "  );
}

static void cb_Pr(Fl_Button*, void*) {
  system( " xterm   "  );
}

static void cb_Pa(Fl_Button*, void*) {
  system( " xterm   "  );
}

static void cb_Nd(Fl_Button*, void*) {
  system( " xterm   "  );
}

static void cb_U(Fl_Button*, void*) {
  system( " xterm   "  );
}

static void cb_Pm(Fl_Button*, void*) {
  system( " xterm   "  );
}

static void cb_Np(Fl_Button*, void*) {
  system( " xterm   "  );
}

static void cb_Sm(Fl_Button*, void*) {
  system( " xterm   "  );
}

static void cb_Pu(Fl_Button*, void*) {
  system( " xterm   "  );
}

static void cb_Eu(Fl_Button*, void*) {
  system( " xterm   "  );
}

static void cb_Am(Fl_Button*, void*) {
  system( " xterm   "  );
}

static void cb_Gd(Fl_Button*, void*) {
  system( " xterm   "  );
}

static void cb_Cm(Fl_Button*, void*) {
  system( " xterm   "  );
}

static void cb_Tb(Fl_Button*, void*) {
  system( " xterm   "  );
}

static void cb_Bk(Fl_Button*, void*) {
  system( " xterm   "  );
}

static void cb_Dy(Fl_Button*, void*) {
  system( " xterm   "  );
}

static void cb_Cf(Fl_Button*, void*) {
  system( " xterm   "  );
}

static void cb_Ho(Fl_Button*, void*) {
  system( " xterm   "  );
}

static void cb_Es(Fl_Button*, void*) {
  system( " xterm   "  );
}

static void cb_Er(Fl_Button*, void*) {
  system( " xterm   "  );
}

static void cb_Fm(Fl_Button*, void*) {
  system( " xterm   "  );
}

static void cb_Tm(Fl_Button*, void*) {
  system( " xterm   "  );
}

static void cb_Md(Fl_Button*, void*) {
  system( " xterm   "  );
}

static void cb_Yb(Fl_Button*, void*) {
  system( " xterm   "  );
}

static void cb_No(Fl_Button*, void*) {
  system( " xterm   "  );
}

Fl_Double_Window *form1_periodic_information=(Fl_Double_Window *)0;

static void cb_Close8(Fl_Button*, void*) {
  form1_periodic_information->hide();
}

Fl_Browser *form_content_browser1=(Fl_Browser *)0;

Fl_Double_Window* make_window() {
  { win1 = new Fl_Double_Window(785, 695, "FLOPENCALPHAD");
    { Fl_Box* o = new Fl_Box(25, 10, 730, 30, "FLTK OpenCalphad");
      o->box(FL_ENGRAVED_BOX);
      o->labeltype(FL_ENGRAVED_LABEL);
    } // Fl_Box* o
    { Fl_Group* o = new Fl_Group(25, 70, 350, 155, "1. Element");
      o->box(FL_DOWN_BOX);
      o->labeltype(FL_ENGRAVED_LABEL);
      { Fl_Button* o = new Fl_Button(35, 80, 45, 35, "Fe");
        o->labelfont(1);
        o->labelsize(12);
        o->callback((Fl_Callback*)cb_Fe);
      } // Fl_Button* o
      { Fl_Button* o = new Fl_Button(95, 80, 45, 35, "C");
        o->labelfont(1);
        o->labelsize(12);
        o->callback((Fl_Callback*)cb_C);
      } // Fl_Button* o
      { Fl_Button* o = new Fl_Button(155, 80, 45, 35, "Mn");
        o->labelfont(1);
        o->labelsize(12);
        o->callback((Fl_Callback*)cb_Mn);
      } // Fl_Button* o
      { Fl_Button* o = new Fl_Button(215, 80, 45, 35, "Al");
        o->labelfont(1);
        o->labelsize(12);
        o->callback((Fl_Callback*)cb_Al);
      } // Fl_Button* o
      { Fl_Button* o = new Fl_Button(275, 80, 45, 35, "Si");
        o->labelfont(1);
        o->labelsize(12);
        o->callback((Fl_Callback*)cb_Si);
      } // Fl_Button* o
      { Fl_Button* o = new Fl_Button(275, 170, 45, 35, "V");
        o->labelfont(1);
        o->labelsize(12);
        o->callback((Fl_Callback*)cb_V);
      } // Fl_Button* o
      { Fl_Button* o = new Fl_Button(154, 125, 45, 35, "Mo");
        o->labelfont(1);
        o->labelsize(12);
        o->callback((Fl_Callback*)cb_Mo);
      } // Fl_Button* o
      { Fl_Button* o = new Fl_Button(95, 125, 45, 35, "Cr");
        o->labelfont(1);
        o->labelsize(12);
        o->callback((Fl_Callback*)cb_Cr);
      } // Fl_Button* o
      { Fl_Button* o = new Fl_Button(95, 170, 45, 35, "Cu");
        o->labelfont(1);
        o->labelsize(12);
        o->callback((Fl_Callback*)cb_Cu);
      } // Fl_Button* o
      { Fl_Button* o = new Fl_Button(275, 125, 45, 35, "Nb");
        o->labelfont(1);
        o->labelsize(12);
        o->callback((Fl_Callback*)cb_Nb);
      } // Fl_Button* o
      { Fl_Button* o = new Fl_Button(35, 125, 45, 35, "Ni");
        o->labelfont(1);
        o->labelsize(12);
        o->callback((Fl_Callback*)cb_Ni);
      } // Fl_Button* o
      { Fl_Button* o = new Fl_Button(35, 170, 45, 35, "Ag");
        o->labelfont(1);
        o->labelsize(12);
        o->callback((Fl_Callback*)cb_Ag);
      } // Fl_Button* o
      { Fl_Button* o = new Fl_Button(215, 125, 45, 35, "Ti");
        o->labelfont(1);
        o->labelsize(12);
        o->callback((Fl_Callback*)cb_Ti);
      } // Fl_Button* o
      { Fl_Button* o = new Fl_Button(155, 170, 45, 35, "Zn");
        o->labelfont(1);
        o->labelsize(12);
        o->callback((Fl_Callback*)cb_Zn);
      } // Fl_Button* o
      { Fl_Button* o = new Fl_Button(215, 170, 45, 35, "W");
        o->labelfont(1);
        o->labelsize(12);
        o->callback((Fl_Callback*)cb_W);
      } // Fl_Button* o
      { Fl_Button* o = new Fl_Button(330, 170, 40, 35, "...");
        o->callback((Fl_Callback*)cb_);
      } // Fl_Button* o
      o->end();
    } // Fl_Group* o
    { Fl_Group* o = new Fl_Group(25, 260, 350, 150, "2. Compute");
      o->box(FL_DOWN_FRAME);
      o->labeltype(FL_ENGRAVED_LABEL);
      { output_system = new Fl_Output(90, 275, 205, 25, "System");
        output_system->color(FL_BACKGROUND_COLOR);
        output_system->value( "fe c " );
        var_calc_number_element = 2;
      } // Fl_Output* output_system
      { Fl_Button* o = new Fl_Button(300, 275, 30, 25, "CA");
        o->labelfont(1);
        o->labelsize(12);
        o->callback((Fl_Callback*)cb_CA);
      } // Fl_Button* o
      { input_var_calc_x = new Fl_Input(90, 305, 205, 25, "X var.");
        input_var_calc_x->value( "c" );
      } // Fl_Input* input_var_calc_x
      { Fl_Button* o = new Fl_Button(300, 305, 30, 25, "CA");
        o->labelfont(1);
        o->labelsize(12);
        o->callback((Fl_Callback*)cb_CA1);
      } // Fl_Button* o
      { input_var_calc_y = new Fl_Input(90, 335, 205, 25, "Y var.");
        input_var_calc_y->value( "T" );
      } // Fl_Input* input_var_calc_y
      { Fl_Button* o = new Fl_Button(300, 335, 30, 25, "CA");
        o->labelfont(1);
        o->labelsize(12);
        o->callback((Fl_Callback*)cb_CA2);
      } // Fl_Button* o
      { input_var_tdb_database = new Fl_Input(90, 365, 205, 25, "TDB");
        input_var_tdb_database->value( "steel1.tdb" );
      } // Fl_Input* input_var_tdb_database
      { Fl_Button* o = new Fl_Button(300, 365, 30, 25, "CA");
        o->labelfont(1);
        o->labelsize(12);
        o->callback((Fl_Callback*)cb_CA3);
      } // Fl_Button* o
      o->end();
    } // Fl_Group* o
    { Fl_Button* o = new Fl_Button(690, 650, 65, 30, "&Quit");
      o->callback((Fl_Callback*)cb_Quit);
    } // Fl_Button* o
    { Fl_Group* o = new Fl_Group(25, 450, 350, 170, "3. OCM GNUPlot");
      o->box(FL_DOWN_BOX);
      o->labeltype(FL_ENGRAVED_LABEL);
      { Fl_Button* o = new Fl_Button(130, 540, 145, 25, "[&3] Compute!");
        o->callback((Fl_Callback*)cb_3);
      } // Fl_Button* o
      { Fl_Button* o = new Fl_Button(130, 505, 145, 25, "[&2] Edit!");
        o->callback((Fl_Callback*)cb_2);
      } // Fl_Button* o
      { Fl_Button* o = new Fl_Button(130, 470, 145, 25, "[&1] Create!");
        o->callback((Fl_Callback*)cb_1);
      } // Fl_Button* o
      { Fl_Button* o = new Fl_Button(130, 575, 145, 25, "[&4] Plot!");
        o->callback((Fl_Callback*)cb_4);
      } // Fl_Button* o
      o->end();
    } // Fl_Group* o
    { Fl_Button* o = new Fl_Button(600, 650, 80, 30, "&Option");
      o->callback((Fl_Callback*)cb_Option);
    } // Fl_Button* o
    { Fl_Group* o = new Fl_Group(385, 70, 370, 550, "Preview");
      o->box(FL_DOWN_BOX);
      o->labeltype(FL_ENGRAVED_LABEL);
      { flfront_preview_browser1 = new Fl_Browser(395, 80, 350, 505);
        flfront_preview_browser1->type( FL_HOLD_BROWSER );
      } // Fl_Browser* flfront_preview_browser1
      { Fl_Button* o = new Fl_Button(395, 590, 130, 25, "Refresh Preview");
        o->callback((Fl_Callback*)cb_Refresh);
      } // Fl_Button* o
      { Fl_Button* o = new Fl_Button(530, 590, 60, 25, "Edit");
        o->callback((Fl_Callback*)cb_Edit);
      } // Fl_Button* o
      o->end();
      Fl_Group::current()->resizable(o);
    } // Fl_Group* o
    { Fl_Button* o = new Fl_Button(25, 650, 80, 30, "&Database");
      o->callback((Fl_Callback*)cb_Database);
    } // Fl_Button* o
    { Fl_Button* o = new Fl_Button(205, 650, 80, 30, "&Plot");
      o->callback((Fl_Callback*)cb_Plot);
    } // Fl_Button* o
    { Fl_Button* o = new Fl_Button(295, 650, 80, 30, "&Macro");
      o->callback((Fl_Callback*)cb_Macro);
    } // Fl_Button* o
    { Fl_Button* o = new Fl_Button(115, 650, 80, 30, "Conditio&n");
      o->callback((Fl_Callback*)cb_Conditio);
    } // Fl_Button* o
    { Fl_Button* o = new Fl_Button(475, 650, 115, 30, "&Help");
      o->labelfont(1);
      o->callback((Fl_Callback*)cb_Help);
    } // Fl_Button* o
    { Fl_Button* o = new Fl_Button(385, 650, 80, 30, "Period&ic");
      o->callback((Fl_Callback*)cb_Period);
    } // Fl_Button* o
    win1->end();
  } // Fl_Double_Window* win1
  { win2 = new Fl_Double_Window(905, 460, "Database");
    { Fl_Box* o = new Fl_Box(15, 10, 880, 35, "FLTK OpenCalphad -- Database");
      o->box(FL_ENGRAVED_BOX);
      o->labeltype(FL_ENGRAVED_LABEL);
    } // Fl_Box* o
    { Fl_Button* o = new Fl_Button(780, 425, 110, 25, "&Close Frame");
      o->callback((Fl_Callback*)cb_Close);
    } // Fl_Button* o
    { Fl_Tabs* o = new Fl_Tabs(15, 70, 875, 345, "File browser");
      { Fl_Group* o = new Fl_Group(35, 95, 850, 315, "File browser");
        { form_database_tab1_filebrowser1 = new Fl_File_Browser(35, 110, 465, 265);
          form_database_tab1_filebrowser1->callback((Fl_Callback*)cb_form_database_tab1_filebrowser1);
          form_database_tab1_filebrowser1->load( "." );
          form_database_tab1_filebrowser1->type(FL_HOLD_BROWSER);
        } // Fl_File_Browser* form_database_tab1_filebrowser1
        { form_database_tab1_currentfile = new Fl_Output(340, 380, 540, 25, "TDB Selection");
          form_database_tab1_currentfile->color(FL_BACKGROUND_COLOR);
        } // Fl_Output* form_database_tab1_currentfile
        { form_database_tab1_filter = new Fl_Input(70, 380, 155, 25, "Filter");
          form_database_tab1_filter->callback((Fl_Callback*)cb_form_database_tab1_filter);
          form_database_tab1_filter->when(FL_WHEN_ENTER_KEY);
          form_database_tab1_filter->value( "*" );
        } // Fl_Input* form_database_tab1_filter
        o->end();
      } // Fl_Group* o
      { Fl_Group* o = new Fl_Group(30, 95, 860, 320, "Advanced browser");
        o->hide();
        { Fl_Group* o = new Fl_Group(30, 130, 390, 220, "Browser");
          o->box(FL_DOWN_BOX);
          o->labeltype(FL_ENGRAVED_LABEL);
          { browser1 = new Fl_Browser(40, 145, 370, 155);
            browser1->callback((Fl_Callback*)cb_browser1);
            Fl_Group::current()->resizable(browser1);
            browser1->type(FL_HOLD_BROWSER);
          } // Fl_Browser* browser1
          { input_notes = new Fl_Input(90, 310, 165, 25, "Notes");
            input_notes->tooltip("Demo");
            input_notes->color((Fl_Color)55);
          } // Fl_Input* input_notes
          { Fl_Button* o = new Fl_Button(260, 310, 45, 25, "&Add");
            o->callback((Fl_Callback*)cb_Add);
          } // Fl_Button* o
          o->end();
        } // Fl_Group* o
        { Fl_Group* o = new Fl_Group(430, 230, 450, 120, "Database");
          o->box(FL_DOWN_BOX);
          o->labeltype(FL_ENGRAVED_LABEL);
          { Fl_Button* o = new Fl_Button(540, 310, 50, 25, "&Edit");
            o->callback((Fl_Callback*)cb_Edit1);
          } // Fl_Button* o
          { Fl_Button* o = new Fl_Button(450, 310, 70, 25, "ls tdb");
            o->callback((Fl_Callback*)cb_ls);
          } // Fl_Button* o
          { Fl_Button* o = new Fl_Button(650, 250, 75, 25, "Elemen&t");
            o->callback((Fl_Callback*)cb_Elemen);
          } // Fl_Button* o
          { Fl_Button* o = new Fl_Button(450, 250, 70, 25, "Browse");
            o->callback((Fl_Callback*)cb_Browse);
          } // Fl_Button* o
          { Fl_Button* o = new Fl_Button(650, 280, 75, 25, "&Species");
            o->callback((Fl_Callback*)cb_Species);
          } // Fl_Button* o
          { Fl_Button* o = new Fl_Button(450, 280, 70, 25, "Path");
            o->callback((Fl_Callback*)cb_Path);
          } // Fl_Button* o
          { Fl_Button* o = new Fl_Button(540, 280, 50, 25, "&View");
            o->callback((Fl_Callback*)cb_View);
          } // Fl_Button* o
          { Fl_Button* o = new Fl_Button(730, 250, 75, 25, "&Phase");
            o->callback((Fl_Callback*)cb_Phase);
          } // Fl_Button* o
          { Fl_Button* o = new Fl_Button(730, 280, 75, 25, "&Fun");
            o->callback((Fl_Callback*)cb_Fun);
          } // Fl_Button* o
          { Fl_Button* o = new Fl_Button(650, 310, 75, 25, "&Function");
            o->callback((Fl_Callback*)cb_Function);
          } // Fl_Button* o
          { Fl_Button* o = new Fl_Button(540, 250, 50, 25, "&Cat");
            o->callback((Fl_Callback*)cb_Cat);
          } // Fl_Button* o
          o->end();
        } // Fl_Group* o
        { Fl_Group* o = new Fl_Group(430, 130, 450, 80, "Create");
          o->box(FL_DOWN_BOX);
          o->labeltype(FL_ENGRAVED_LABEL);
          { Fl_Button* o = new Fl_Button(445, 140, 75, 25, "Fetch!");
            o->callback((Fl_Callback*)cb_Fetch);
          } // Fl_Button* o
          { Fl_Button* o = new Fl_Button(445, 175, 75, 25, "dos2unix");
            o->callback((Fl_Callback*)cb_dos2unix);
          } // Fl_Button* o
          { form_database_fetch_url = new Fl_Input(555, 140, 315, 25, "Url");
          } // Fl_Input* form_database_fetch_url
          { Fl_Button* o = new Fl_Button(533, 175, 80, 25, "&Edit");
            o->callback((Fl_Callback*)cb_Edit2);
          } // Fl_Button* o
          o->end();
        } // Fl_Group* o
        o->end();
      } // Fl_Group* o
      o->end();
    } // Fl_Tabs* o
    win2->end();
    win2->resizable(win2);
  } // Fl_Double_Window* win2
  { win3 = new Fl_Double_Window(580, 475, "Option");
    { Fl_Box* o = new Fl_Box(15, 15, 550, 40, "FLTK OpenCalphad -- Option");
      o->box(FL_ENGRAVED_BOX);
      o->labeltype(FL_ENGRAVED_LABEL);
    } // Fl_Box* o
    { Fl_Button* o = new Fl_Button(450, 430, 115, 30, "&Close Frame");
      o->callback((Fl_Callback*)cb_Close1);
    } // Fl_Button* o
    { Fl_Tabs* o = new Fl_Tabs(15, 75, 550, 340);
      { Fl_Group* o = new Fl_Group(40, 100, 525, 315, "&Devices");
        { Fl_Group* o = new Fl_Group(60, 130, 395, 110, "User device and hardware");
          o->box(FL_DOWN_BOX);
          o->labeltype(FL_ENGRAVED_LABEL);
          { Fl_Button* o = new Fl_Button(180, 155, 75, 55, "&Keyboard");
            o->image( image_keyboard_layout() );
            o->callback((Fl_Callback*)cb_Keyboard);
          } // Fl_Button* o
          { Fl_Button* o = new Fl_Button(95, 155, 80, 55, "M&onitor");
            o->image( image_tv() );
            o->callback((Fl_Callback*)cb_M);
          } // Fl_Button* o
          { Fl_Button* o = new Fl_Button(260, 155, 80, 55, "Sound");
            o->image( image_amarok() );
            o->callback((Fl_Callback*)cb_Sound);
          } // Fl_Button* o
          { Fl_Button* o = new Fl_Button(345, 155, 75, 55, "Printer");
            o->image( image_printer() );
            o->callback((Fl_Callback*)cb_Printer);
          } // Fl_Button* o
          o->end();
        } // Fl_Group* o
        o->end();
      } // Fl_Group* o
      { Fl_Group* o = new Fl_Group(40, 100, 525, 315, "&Repository");
        o->hide();
        { Fl_Group* o = new Fl_Group(100, 135, 375, 130, "Online Repository Calphad");
          o->box(FL_DOWN_BOX);
          o->labeltype(FL_ENGRAVED_LABEL);
          { Fl_Button* o = new Fl_Button(115, 160, 340, 30, "&Fetch online ~/macros directory");
            o->callback((Fl_Callback*)cb_Fetch1);
          } // Fl_Button* o
          { Fl_Button* o = new Fl_Button(115, 205, 340, 30, "&Fetch online source code OC Gui");
            o->callback((Fl_Callback*)cb_Fetch2);
          } // Fl_Button* o
          o->end();
        } // Fl_Group* o
        o->end();
      } // Fl_Group* o
      { Fl_Group* o = new Fl_Group(40, 100, 525, 315, "&User Help");
        o->hide();
        { Fl_Button* o = new Fl_Button(140, 135, 300, 55, "OpenCalphad User Support");
          o->labelfont(1);
          o->callback((Fl_Callback*)cb_OpenCalphad);
        } // Fl_Button* o
        { Fl_Button* o = new Fl_Button(140, 210, 300, 55, "Tutorial OC Webpage");
          o->labelfont(1);
          o->callback((Fl_Callback*)cb_Tutorial);
        } // Fl_Button* o
        o->end();
      } // Fl_Group* o
      { Fl_Group* o = new Fl_Group(40, 100, 525, 315, "&System Utils");
        o->hide();
        { Fl_Group* o = new Fl_Group(50, 130, 400, 90, "User system call");
          o->box(FL_DOWN_BOX);
          o->labeltype(FL_ENGRAVED_LABEL);
          { Fl_Button* o = new Fl_Button(60, 140, 55, 25, "&ls");
            o->callback((Fl_Callback*)cb_ls1);
          } // Fl_Button* o
          { Fl_Button* o = new Fl_Button(120, 140, 50, 25, "&xterm");
            o->callback((Fl_Callback*)cb_xterm);
          } // Fl_Button* o
          { Fl_Button* o = new Fl_Button(310, 175, 75, 25, "&notepad");
            o->callback((Fl_Callback*)cb_notepad);
          } // Fl_Button* o
          { Fl_Button* o = new Fl_Button(310, 140, 75, 25, "&xpaint");
            o->callback((Fl_Callback*)cb_xpaint);
          } // Fl_Button* o
          { Fl_Button* o = new Fl_Button(60, 175, 55, 25, "Path");
            o->callback((Fl_Callback*)cb_Path1);
          } // Fl_Button* o
          { Fl_Button* o = new Fl_Button(120, 175, 50, 25, "rox");
            o->callback((Fl_Callback*)cb_rox);
          } // Fl_Button* o
          { Fl_Button* o = new Fl_Button(390, 175, 50, 25, "x48");
            o->callback((Fl_Callback*)cb_x48);
          } // Fl_Button* o
          { Fl_Button* o = new Fl_Button(390, 140, 50, 25, "&xlock");
            o->callback((Fl_Callback*)cb_xlock);
          } // Fl_Button* o
          { Fl_Button* o = new Fl_Button(230, 175, 75, 25, "Keyboard");
            o->callback((Fl_Callback*)cb_Keyboard1);
          } // Fl_Button* o
          { Fl_Button* o = new Fl_Button(230, 140, 75, 25, "Monitor");
            o->callback((Fl_Callback*)cb_Monitor);
          } // Fl_Button* o
          { Fl_Button* o = new Fl_Button(175, 175, 50, 25, "CAS");
            o->callback((Fl_Callback*)cb_CAS);
          } // Fl_Button* o
          { Fl_Button* o = new Fl_Button(175, 140, 50, 25, "calc");
            o->callback((Fl_Callback*)cb_calc);
          } // Fl_Button* o
          o->end();
        } // Fl_Group* o
        { Fl_Group* o = new Fl_Group(50, 290, 400, 90, "Linux/BSD Software");
          o->box(FL_DOWN_BOX);
          o->labeltype(FL_ENGRAVED_LABEL);
          { Fl_Button* o = new Fl_Button(60, 305, 380, 30, "&Web Browser");
            o->callback((Fl_Callback*)cb_Web);
          } // Fl_Button* o
          { Fl_Button* o = new Fl_Button(60, 340, 380, 30, "&Webpage Debian");
            o->callback((Fl_Callback*)cb_Webpage);
          } // Fl_Button* o
          o->end();
        } // Fl_Group* o
        o->end();
      } // Fl_Group* o
      { Fl_Group* o = new Fl_Group(40, 100, 525, 315, "&Metal Sc. Utils");
        o->hide();
        { Fl_Group* o = new Fl_Group(40, 135, 500, 185, "Utils");
          o->box(FL_DOWN_BOX);
          o->labeltype(FL_ENGRAVED_LABEL);
          { Fl_Button* o = new Fl_Button(215, 145, 150, 40, "Mech. Prop.");
            o->callback((Fl_Callback*)cb_Mech);
          } // Fl_Button* o
          { Fl_Button* o = new Fl_Button(375, 145, 150, 40, "Bulk Diffusion");
            o->callback((Fl_Callback*)cb_Bulk);
          } // Fl_Button* o
          { Fl_Button* o = new Fl_Button(55, 145, 150, 40, "&Fx Grapher");
            o->callback((Fl_Callback*)cb_Fx);
          } // Fl_Button* o
          { Fl_Button* o = new Fl_Button(215, 195, 150, 40, "Solubility Product");
            o->callback((Fl_Callback*)cb_Solubility);
          } // Fl_Button* o
          { Fl_Button* o = new Fl_Button(375, 195, 150, 40, "&Periodic Table");
            o->callback((Fl_Callback*)cb_Periodic);
          } // Fl_Button* o
          { Fl_Button* o = new Fl_Button(55, 195, 150, 40, "&JMol Chem. 3D");
            o->callback((Fl_Callback*)cb_JMol);
          } // Fl_Button* o
          o->end();
        } // Fl_Group* o
        o->end();
      } // Fl_Group* o
      { Fl_Group* o = new Fl_Group(40, 100, 525, 315, "Development");
        o->hide();
        { Fl_Button* o = new Fl_Button(50, 115, 375, 60, "&Advanced Development Settings");
          o->callback((Fl_Callback*)cb_Advanced);
        } // Fl_Button* o
        { Fl_Group* o = new Fl_Group(50, 215, 375, 95, "Console output");
          o->box(FL_DOWN_BOX);
          o->labeltype(FL_ENGRAVED_LABEL);
          { checkbutton_single_console = new Fl_Check_Button(70, 235, 25, 25, "Single console output");
            checkbutton_single_console->down_box(FL_DOWN_BOX);
          } // Fl_Check_Button* checkbutton_single_console
          { checkbutton_xterm_console = new Fl_Check_Button(70, 265, 25, 25, "xterm console output");
            checkbutton_xterm_console->down_box(FL_DOWN_BOX);
            checkbutton_xterm_console->value( 1 );
          } // Fl_Check_Button* checkbutton_xterm_console
          o->end();
        } // Fl_Group* o
        o->end();
      } // Fl_Group* o
      o->end();
    } // Fl_Tabs* o
    win3->end();
    win3->resizable(win3);
  } // Fl_Double_Window* win3
  { win4 = new Fl_Double_Window(890, 545, "Graphics Plot");
    { Fl_Box* o = new Fl_Box(15, 25, 860, 35, "FLTK OpenCalphad -- Plot");
      o->box(FL_ENGRAVED_BOX);
      o->labeltype(FL_ENGRAVED_LABEL);
    } // Fl_Box* o
    { Fl_Group* o = new Fl_Group(15, 100, 880, 385, "Advanced Plot");
      o->box(FL_DOWN_BOX);
      o->labeltype(FL_ENGRAVED_LABEL);
      { Fl_Button* o = new Fl_Button(735, 110, 135, 25, "Close all &plots");
        o->callback((Fl_Callback*)cb_Close2);
      } // Fl_Button* o
      { Fl_Button* o = new Fl_Button(360, 170, 130, 25, "Clear GnuPlot plt");
        o->callback((Fl_Callback*)cb_Clear);
      } // Fl_Button* o
      { Fl_Button* o = new Fl_Button(25, 110, 130, 25, "View Plot File");
        o->callback((Fl_Callback*)cb_View1);
      } // Fl_Button* o
      { Fl_Button* o = new Fl_Button(165, 110, 130, 25, "Edit Plot File");
        o->callback((Fl_Callback*)cb_Edit3);
      } // Fl_Button* o
      { Fl_Button* o = new Fl_Button(590, 110, 135, 25, "Plot!");
        o->labelfont(1);
        o->callback((Fl_Callback*)cb_Plot1);
      } // Fl_Button* o
      { Fl_Button* o = new Fl_Button(25, 170, 130, 25, "Refresh Preview");
        o->callback((Fl_Callback*)cb_Refresh1);
      } // Fl_Button* o
      { flplot_preview_browser = new Fl_Browser(25, 215, 840, 255);
        Fl_Group::current()->resizable(flplot_preview_browser);
        flplot_preview_browser->type( FL_HOLD_BROWSER );
      } // Fl_Browser* flplot_preview_browser
      { Fl_Button* o = new Fl_Button(165, 170, 190, 25, "Automatic Term Driver");
        o->callback((Fl_Callback*)cb_Automatic);
      } // Fl_Button* o
      { plot_gnuplot_term_drivername = new Fl_Input(590, 170, 110, 25, "Term Driver");
        plot_gnuplot_term_drivername->value( "x11" );
      } // Fl_Input* plot_gnuplot_term_drivername
      { plot_gnuplot_term_driver_force = new Fl_Check_Button(735, 170, 25, 25, "Active Driver");
        plot_gnuplot_term_driver_force->down_box(FL_DOWN_BOX);
      } // Fl_Check_Button* plot_gnuplot_term_driver_force
      { Fl_Button* o = new Fl_Button(700, 170, 25, 25, "&?");
        o->callback((Fl_Callback*)cb_5);
      } // Fl_Button* o
      { Fl_Button* o = new Fl_Button(305, 110, 135, 25, "Edit Adv. Plot");
        o->callback((Fl_Callback*)cb_Edit4);
      } // Fl_Button* o
      { Fl_Button* o = new Fl_Button(450, 140, 130, 25, "Adv. Compute");
        o->callback((Fl_Callback*)cb_Adv);
      } // Fl_Button* o
      { Fl_Button* o = new Fl_Button(165, 140, 130, 25, "Edit Adv. Macro");
        o->callback((Fl_Callback*)cb_Edit5);
      } // Fl_Button* o
      { Fl_Button* o = new Fl_Button(25, 140, 130, 25, "Dup. Adv. Macro");
        o->callback((Fl_Callback*)cb_Dup);
      } // Fl_Button* o
      { Fl_Button* o = new Fl_Button(305, 140, 135, 25, "View Res. Macro.");
        o->callback((Fl_Callback*)cb_View2);
      } // Fl_Button* o
      { plot_adv_computer_skipint = new Fl_Check_Button(735, 140, 25, 25, "Skip Keypress");
        plot_adv_computer_skipint->down_box(FL_DOWN_BOX);
        plot_adv_computer_skipint->callback((Fl_Callback*)cb_plot_adv_computer_skipint);
      } // Fl_Check_Button* plot_adv_computer_skipint
      { Fl_Button* o = new Fl_Button(590, 140, 135, 25, "Adv. Plot");
        o->callback((Fl_Callback*)cb_Adv1);
      } // Fl_Button* o
      { Fl_Button* o = new Fl_Button(450, 110, 130, 25, "Compute");
        o->callback((Fl_Callback*)cb_Compute);
      } // Fl_Button* o
      o->end();
      Fl_Group::current()->resizable(o);
    } // Fl_Group* o
    { Fl_Button* o = new Fl_Button(765, 495, 110, 25, "Close Frame");
      o->callback((Fl_Callback*)cb_Close3);
    } // Fl_Button* o
    { form_plot_statusline = new Fl_Output(15, 495, 740, 25);
      form_plot_statusline->color(FL_BACKGROUND_COLOR);
      form_plot_statusline->value("ocgnu.plt");
    } // Fl_Output* form_plot_statusline
    win4->end();
  } // Fl_Double_Window* win4
  { win5 = new Fl_Double_Window(850, 485, "Macro");
    { Fl_Box* o = new Fl_Box(15, 15, 820, 35, "FLTK OpenCalphad -- Macro");
      o->box(FL_ENGRAVED_BOX);
      o->labeltype(FL_ENGRAVED_LABEL);
    } // Fl_Box* o
    { Fl_Group* o = new Fl_Group(15, 205, 370, 240, "Browser");
      o->box(FL_DOWN_BOX);
      o->labeltype(FL_ENGRAVED_LABEL);
      { browser2 = new Fl_Browser(35, 245, 330, 195);
        browser2->callback((Fl_Callback*)cb_browser2);
        browser2->type(FL_HOLD_BROWSER);
      } // Fl_Browser* browser2
      { input_var_macro_filename = new Fl_Input(100, 215, 265, 25, "Filename");
      } // Fl_Input* input_var_macro_filename
      o->end();
    } // Fl_Group* o
    { Fl_Group* o = new Fl_Group(15, 85, 370, 95, "Macro");
      o->box(FL_DOWN_BOX);
      o->labeltype(FL_ENGRAVED_LABEL);
      { Fl_Button* o = new Fl_Button(25, 105, 95, 25, "Browse");
        o->callback((Fl_Callback*)cb_Browse1);
      } // Fl_Button* o
      { Fl_Button* o = new Fl_Button(265, 135, 50, 25, "&New");
        o->callback((Fl_Callback*)cb_New);
      } // Fl_Button* o
      { Fl_Button* o = new Fl_Button(25, 135, 95, 25, "&Use macro");
        o->callback((Fl_Callback*)cb_Use);
      } // Fl_Button* o
      { Fl_Button* o = new Fl_Button(320, 105, 50, 25, "&View");
        o->callback((Fl_Callback*)cb_View3);
      } // Fl_Button* o
      { Fl_Button* o = new Fl_Button(265, 105, 50, 25, "&Cat");
        o->callback((Fl_Callback*)cb_Cat1);
      } // Fl_Button* o
      { Fl_Button* o = new Fl_Button(320, 135, 50, 25, "&Edit");
        o->callback((Fl_Callback*)cb_Edit6);
      } // Fl_Button* o
      { Fl_Button* o = new Fl_Button(145, 105, 95, 25, "Browse ocl");
        o->callback((Fl_Callback*)cb_Browse2);
      } // Fl_Button* o
      { Fl_Button* o = new Fl_Button(145, 135, 95, 25, "&Use ocl");
        o->callback((Fl_Callback*)cb_Use1);
      } // Fl_Button* o
      o->end();
    } // Fl_Group* o
    { Fl_Button* o = new Fl_Button(725, 450, 110, 25, "&Close Frame");
      o->callback((Fl_Callback*)cb_Close4);
    } // Fl_Button* o
    { Fl_Group* o = new Fl_Group(405, 80, 430, 365, "File description");
      o->box(FL_DOWN_BOX);
      o->labeltype(FL_ENGRAVED_LABEL);
      { browser_macro_filecontent = new Fl_Browser(410, 85, 420, 355);
        browser_macro_filecontent->type(FL_HOLD_BROWSER);
      } // Fl_Browser* browser_macro_filecontent
      o->end();
      Fl_Group::current()->resizable(o);
    } // Fl_Group* o
    win5->end();
  } // Fl_Double_Window* win5
  { win6 = new Fl_Double_Window(655, 465, "Condition");
    { Fl_Box* o = new Fl_Box(15, 15, 625, 30, "FLTK OpenCalphad -- Condition");
      o->box(FL_ENGRAVED_BOX);
      o->labeltype(FL_ENGRAVED_LABEL);
    } // Fl_Box* o
    { Fl_Group* o = new Fl_Group(15, 105, 625, 315, "Set-Condition (Create)");
      o->box(FL_DOWN_BOX);
      o->labeltype(FL_ENGRAVED_LABEL);
      { input_var_set_condition = new Fl_Input(90, 135, 535, 25, "set-con");
        input_var_set_condition->value( "t=1000 p=1e5 n=1 x(c)=0.2 " );
      } // Fl_Input* input_var_set_condition
      { input_var_calc_ymin = new Fl_Input(90, 280, 535, 25, "Ymin");
        input_var_calc_ymin->value( "500" );
      } // Fl_Input* input_var_calc_ymin
      { input_var_calc_ymax = new Fl_Input(90, 310, 535, 25, "Ymax");
        input_var_calc_ymax->value( "2000" );
      } // Fl_Input* input_var_calc_ymax
      { input_var_calc_ystep = new Fl_Input(90, 340, 535, 25, "Ystep");
        input_var_calc_ystep->value( "10" );
      } // Fl_Input* input_var_calc_ystep
      { input_var_calc_xmin = new Fl_Input(90, 195, 535, 25, "Xmin");
        input_var_calc_xmin->value( "0" );
      } // Fl_Input* input_var_calc_xmin
      { input_var_calc_xmax = new Fl_Input(90, 225, 535, 25, "Xmax");
        input_var_calc_xmax->value( "0.25" );
      } // Fl_Input* input_var_calc_xmax
      o->end();
      Fl_Group::current()->resizable(o);
    } // Fl_Group* o
    { Fl_Button* o = new Fl_Button(530, 430, 110, 25, "&Close Frame");
      o->callback((Fl_Callback*)cb_Close5);
    } // Fl_Button* o
    win6->end();
  } // Fl_Double_Window* win6
  { win7 = new Fl_Double_Window(395, 480, "Development");
    { Fl_Box* o = new Fl_Box(10, 15, 380, 35, "FLTK OpenCalphad -- Development");
      o->box(FL_ENGRAVED_BOX);
      o->labeltype(FL_ENGRAVED_LABEL);
    } // Fl_Box* o
    { Fl_Group* o = new Fl_Group(10, 90, 375, 100, "Path Binary");
      o->box(FL_DOWN_BOX);
      o->labeltype(FL_ENGRAVED_LABEL);
      { Fl_Button* o = new Fl_Button(20, 105, 100, 25, "ccode");
        o->callback((Fl_Callback*)cb_ccode);
      } // Fl_Button* o
      { Fl_Button* o = new Fl_Button(130, 105, 100, 25, "Inipath");
        o->callback((Fl_Callback*)cb_Inipath);
      } // Fl_Button* o
      { Fl_Button* o = new Fl_Button(245, 105, 115, 25, "Userpath");
        o->callback((Fl_Callback*)cb_Userpath);
      } // Fl_Button* o
      { Fl_Button* o = new Fl_Button(245, 140, 115, 25, "chdir()");
        o->callback((Fl_Callback*)cb_chdir);
      } // Fl_Button* o
      { dev_path_input1 = new Fl_Input(60, 140, 170, 25, "Path: ");
      } // Fl_Input* dev_path_input1
      o->end();
    } // Fl_Group* o
    { Fl_Button* o = new Fl_Button(275, 440, 110, 30, "&Close Frame");
      o->callback((Fl_Callback*)cb_Close6);
    } // Fl_Button* o
    { Fl_Group* o = new Fl_Group(10, 275, 375, 155, "Development");
      o->box(FL_DOWN_BOX);
      o->labeltype(FL_ENGRAVED_LABEL);
      { Fl_Button* o = new Fl_Button(145, 290, 90, 25, "VIM &Macro");
        o->callback((Fl_Callback*)cb_VIM);
      } // Fl_Button* o
      { Fl_Button* o = new Fl_Button(40, 290, 90, 25, "&VIM SIM");
        o->callback((Fl_Callback*)cb_VIM1);
      } // Fl_Button* o
      { Fl_Button* o = new Fl_Button(250, 290, 110, 25, "VIM &Database");
        o->callback((Fl_Callback*)cb_VIM2);
      } // Fl_Button* o
      { Fl_Button* o = new Fl_Button(215, 325, 145, 25, "[&4] Plot!");
        o->callback((Fl_Callback*)cb_41);
      } // Fl_Button* o
      { Fl_Button* o = new Fl_Button(40, 325, 150, 25, "[&3] Compute!");
        o->callback((Fl_Callback*)cb_31);
      } // Fl_Button* o
      { Fl_Button* o = new Fl_Button(40, 360, 320, 25, "GnuPlot XForward/Unix");
        o->callback((Fl_Callback*)cb_GnuPlot);
      } // Fl_Button* o
      o->end();
    } // Fl_Group* o
    win7->end();
    win7->resizable(win7);
  } // Fl_Double_Window* win7
  { form_element_pse = new Fl_Double_Window(680, 435, "Periodic");
    { Fl_Button* o = new Fl_Button(15, 400, 650, 25, "&Close frame");
      o->labelfont(1);
      o->callback((Fl_Callback*)cb_Close7);
    } // Fl_Button* o
    { Fl_Group* o = new Fl_Group(15, 55, 650, 335);
      o->box(FL_DOWN_BOX);
      { Fl_Button* o = new Fl_Button(25, 65, 30, 25, "H");
        o->color((Fl_Color)190);
        o->callback((Fl_Callback*)cb_H);
      } // Fl_Button* o
      { Fl_Button* o = new Fl_Button(25, 95, 30, 25, "Li");
        o->color((Fl_Color)180);
        o->callback((Fl_Callback*)cb_Li);
      } // Fl_Button* o
      { Fl_Button* o = new Fl_Button(25, 125, 30, 25, "Na");
        o->color((Fl_Color)180);
        o->callback((Fl_Callback*)cb_Na);
      } // Fl_Button* o
      { Fl_Button* o = new Fl_Button(25, 155, 30, 25, "K");
        o->color((Fl_Color)180);
        o->callback((Fl_Callback*)cb_K);
      } // Fl_Button* o
      { Fl_Button* o = new Fl_Button(25, 185, 30, 25, "Rb");
        o->color((Fl_Color)180);
        o->callback((Fl_Callback*)cb_Rb);
      } // Fl_Button* o
      { Fl_Button* o = new Fl_Button(25, 215, 30, 25, "Cs");
        o->color((Fl_Color)180);
        o->callback((Fl_Callback*)cb_Cs);
      } // Fl_Button* o
      { Fl_Button* o = new Fl_Button(25, 245, 30, 25, "Fr");
        o->color((Fl_Color)180);
        o->callback((Fl_Callback*)cb_Fr);
      } // Fl_Button* o
      { Fl_Button* o = new Fl_Button(60, 95, 30, 25, "Be");
        o->color((Fl_Color)90);
        o->callback((Fl_Callback*)cb_Be);
      } // Fl_Button* o
      { Fl_Button* o = new Fl_Button(60, 125, 30, 25, "Mg");
        o->color((Fl_Color)90);
        o->callback((Fl_Callback*)cb_Mg);
      } // Fl_Button* o
      { Fl_Button* o = new Fl_Button(60, 155, 30, 25, "Ca");
        o->color((Fl_Color)90);
        o->callback((Fl_Callback*)cb_Ca);
      } // Fl_Button* o
      { Fl_Button* o = new Fl_Button(60, 185, 30, 25, "Sr");
        o->color((Fl_Color)90);
        o->callback((Fl_Callback*)cb_Sr);
      } // Fl_Button* o
      { Fl_Button* o = new Fl_Button(60, 215, 30, 25, "Ba");
        o->color((Fl_Color)90);
        o->callback((Fl_Callback*)cb_Ba);
      } // Fl_Button* o
      { Fl_Button* o = new Fl_Button(60, 245, 30, 25, "Ra");
        o->color((Fl_Color)90);
        o->callback((Fl_Callback*)cb_Ra);
      } // Fl_Button* o
      { Fl_Button* o = new Fl_Button(95, 155, 30, 25, "Sc");
        o->color((Fl_Color)174);
        o->callback((Fl_Callback*)cb_Sc);
      } // Fl_Button* o
      { Fl_Button* o = new Fl_Button(95, 185, 30, 25, "Y");
        o->color((Fl_Color)174);
        o->callback((Fl_Callback*)cb_Y);
      } // Fl_Button* o
      { Fl_Button* o = new Fl_Button(95, 215, 30, 25, "Lu");
        o->color((Fl_Color)174);
        o->callback((Fl_Callback*)cb_Lu);
      } // Fl_Button* o
      { Fl_Button* o = new Fl_Button(95, 245, 30, 25, "Lr");
        o->callback((Fl_Callback*)cb_Lr);
      } // Fl_Button* o
      { Fl_Button* o = new Fl_Button(130, 155, 30, 25, "Ti");
        o->color((Fl_Color)174);
        o->callback((Fl_Callback*)cb_Ti1);
      } // Fl_Button* o
      { Fl_Button* o = new Fl_Button(130, 185, 30, 25, "Zr");
        o->color((Fl_Color)174);
        o->callback((Fl_Callback*)cb_Zr);
      } // Fl_Button* o
      { Fl_Button* o = new Fl_Button(130, 215, 30, 25, "Hf");
        o->color((Fl_Color)174);
        o->callback((Fl_Callback*)cb_Hf);
      } // Fl_Button* o
      { Fl_Button* o = new Fl_Button(130, 245, 30, 25, "Rf");
        o->callback((Fl_Callback*)cb_Rf);
      } // Fl_Button* o
      { Fl_Button* o = new Fl_Button(165, 155, 30, 25, "V");
        o->color((Fl_Color)174);
        o->callback((Fl_Callback*)cb_V1);
      } // Fl_Button* o
      { Fl_Button* o = new Fl_Button(165, 185, 30, 25, "Nb");
        o->color((Fl_Color)174);
        o->callback((Fl_Callback*)cb_Nb1);
      } // Fl_Button* o
      { Fl_Button* o = new Fl_Button(165, 215, 30, 25, "Ta");
        o->color((Fl_Color)174);
        o->callback((Fl_Callback*)cb_Ta);
      } // Fl_Button* o
      { Fl_Button* o = new Fl_Button(165, 245, 30, 25, "Db");
        o->callback((Fl_Callback*)cb_Db);
      } // Fl_Button* o
      { Fl_Button* o = new Fl_Button(200, 155, 30, 25, "Cr");
        o->color((Fl_Color)174);
        o->callback((Fl_Callback*)cb_Cr1);
      } // Fl_Button* o
      { Fl_Button* o = new Fl_Button(200, 185, 30, 25, "Mo");
        o->color((Fl_Color)174);
        o->callback((Fl_Callback*)cb_Mo1);
      } // Fl_Button* o
      { Fl_Button* o = new Fl_Button(200, 215, 30, 25, "W");
        o->color((Fl_Color)174);
        o->callback((Fl_Callback*)cb_W1);
      } // Fl_Button* o
      { Fl_Button* o = new Fl_Button(200, 245, 30, 25, "Sg");
        o->callback((Fl_Callback*)cb_Sg);
      } // Fl_Button* o
      { Fl_Button* o = new Fl_Button(235, 155, 30, 25, "Mn");
        o->color((Fl_Color)174);
        o->callback((Fl_Callback*)cb_Mn1);
      } // Fl_Button* o
      { Fl_Button* o = new Fl_Button(235, 185, 30, 25, "Tc");
        o->color((Fl_Color)174);
        o->callback((Fl_Callback*)cb_Tc);
      } // Fl_Button* o
      { Fl_Button* o = new Fl_Button(235, 215, 30, 25, "Re");
        o->color((Fl_Color)174);
        o->callback((Fl_Callback*)cb_Re);
      } // Fl_Button* o
      { Fl_Button* o = new Fl_Button(235, 245, 30, 25, "Bh");
        o->callback((Fl_Callback*)cb_Bh);
      } // Fl_Button* o
      { Fl_Button* o = new Fl_Button(270, 155, 30, 25, "Fe");
        o->color((Fl_Color)174);
        o->callback((Fl_Callback*)cb_Fe1);
      } // Fl_Button* o
      { Fl_Button* o = new Fl_Button(270, 185, 30, 25, "Ru");
        o->color((Fl_Color)174);
        o->callback((Fl_Callback*)cb_Ru);
      } // Fl_Button* o
      { Fl_Button* o = new Fl_Button(270, 215, 30, 25, "Os");
        o->color((Fl_Color)174);
        o->callback((Fl_Callback*)cb_Os);
      } // Fl_Button* o
      { Fl_Button* o = new Fl_Button(270, 245, 30, 25, "Hs");
        o->callback((Fl_Callback*)cb_Hs);
      } // Fl_Button* o
      { Fl_Button* o = new Fl_Button(305, 155, 30, 25, "Co");
        o->color((Fl_Color)174);
        o->callback((Fl_Callback*)cb_Co);
      } // Fl_Button* o
      { Fl_Button* o = new Fl_Button(305, 185, 30, 25, "Rh");
        o->color((Fl_Color)174);
        o->callback((Fl_Callback*)cb_Rh);
      } // Fl_Button* o
      { Fl_Button* o = new Fl_Button(305, 215, 30, 25, "Ir");
        o->color((Fl_Color)174);
        o->callback((Fl_Callback*)cb_Ir);
      } // Fl_Button* o
      { Fl_Button* o = new Fl_Button(305, 245, 30, 25, "Mt");
        o->callback((Fl_Callback*)cb_Mt);
      } // Fl_Button* o
      { Fl_Button* o = new Fl_Button(340, 155, 30, 25, "Ni");
        o->color((Fl_Color)174);
        o->callback((Fl_Callback*)cb_Ni1);
      } // Fl_Button* o
      { Fl_Button* o = new Fl_Button(340, 185, 30, 25, "Pd");
        o->color((Fl_Color)174);
        o->callback((Fl_Callback*)cb_Pd);
      } // Fl_Button* o
      { Fl_Button* o = new Fl_Button(340, 215, 30, 25, "Pt");
        o->color((Fl_Color)174);
        o->callback((Fl_Callback*)cb_Pt);
      } // Fl_Button* o
      { Fl_Button* o = new Fl_Button(340, 245, 30, 25, "Ds");
        o->callback((Fl_Callback*)cb_Ds);
      } // Fl_Button* o
      { Fl_Button* o = new Fl_Button(375, 155, 30, 25, "Cu");
        o->color((Fl_Color)174);
        o->callback((Fl_Callback*)cb_Cu1);
      } // Fl_Button* o
      { Fl_Button* o = new Fl_Button(375, 185, 30, 25, "Ag");
        o->color((Fl_Color)174);
        o->callback((Fl_Callback*)cb_Ag1);
      } // Fl_Button* o
      { Fl_Button* o = new Fl_Button(375, 215, 30, 25, "Au");
        o->color((Fl_Color)174);
        o->callback((Fl_Callback*)cb_Au);
      } // Fl_Button* o
      { Fl_Button* o = new Fl_Button(375, 245, 30, 25, "Rg");
        o->callback((Fl_Callback*)cb_Rg);
      } // Fl_Button* o
      { Fl_Button* o = new Fl_Button(410, 155, 30, 25, "Zn");
        o->color((Fl_Color)174);
        o->callback((Fl_Callback*)cb_Zn1);
      } // Fl_Button* o
      { Fl_Button* o = new Fl_Button(410, 185, 30, 25, "Cd");
        o->color((Fl_Color)174);
        o->callback((Fl_Callback*)cb_Cd);
      } // Fl_Button* o
      { Fl_Button* o = new Fl_Button(410, 215, 30, 25, "Hg");
        o->color((Fl_Color)174);
        o->callback((Fl_Callback*)cb_Hg);
      } // Fl_Button* o
      { Fl_Button* o = new Fl_Button(410, 245, 30, 25, "Cn");
        o->callback((Fl_Callback*)cb_Cn);
      } // Fl_Button* o
      { Fl_Button* o = new Fl_Button(445, 95, 30, 25, "B");
        o->color((Fl_Color)252);
        o->callback((Fl_Callback*)cb_B);
      } // Fl_Button* o
      { Fl_Button* o = new Fl_Button(445, 125, 30, 25, "Al");
        o->color((Fl_Color)237);
        o->callback((Fl_Callback*)cb_Al1);
      } // Fl_Button* o
      { Fl_Button* o = new Fl_Button(445, 155, 30, 25, "Ga");
        o->color((Fl_Color)237);
        o->callback((Fl_Callback*)cb_Ga);
      } // Fl_Button* o
      { Fl_Button* o = new Fl_Button(445, 185, 30, 25, "In");
        o->color((Fl_Color)237);
        o->callback((Fl_Callback*)cb_In);
      } // Fl_Button* o
      { Fl_Button* o = new Fl_Button(445, 215, 30, 25, "TI");
        o->color((Fl_Color)237);
        o->callback((Fl_Callback*)cb_TI);
      } // Fl_Button* o
      { Fl_Button* o = new Fl_Button(445, 245, 30, 25, "Uut");
        o->callback((Fl_Callback*)cb_Uut);
      } // Fl_Button* o
      { Fl_Button* o = new Fl_Button(480, 95, 30, 25, "C");
        o->color((Fl_Color)70);
        o->callback((Fl_Callback*)cb_C1);
      } // Fl_Button* o
      { Fl_Button* o = new Fl_Button(480, 125, 30, 25, "Si");
        o->color((Fl_Color)252);
        o->callback((Fl_Callback*)cb_Si1);
      } // Fl_Button* o
      { Fl_Button* o = new Fl_Button(480, 155, 30, 25, "Ge");
        o->color((Fl_Color)252);
        o->callback((Fl_Callback*)cb_Ge);
      } // Fl_Button* o
      { Fl_Button* o = new Fl_Button(480, 185, 30, 25, "Sn");
        o->color((Fl_Color)237);
        o->callback((Fl_Callback*)cb_Sn);
      } // Fl_Button* o
      { Fl_Button* o = new Fl_Button(480, 215, 30, 25, "Pb");
        o->color((Fl_Color)237);
        o->callback((Fl_Callback*)cb_Pb);
      } // Fl_Button* o
      { Fl_Button* o = new Fl_Button(480, 245, 30, 25, "Uuq");
        o->callback((Fl_Callback*)cb_Uuq);
      } // Fl_Button* o
      { Fl_Button* o = new Fl_Button(515, 95, 30, 25, "N");
        o->color((Fl_Color)70);
        o->callback((Fl_Callback*)cb_N);
      } // Fl_Button* o
      { Fl_Button* o = new Fl_Button(515, 125, 30, 25, "P");
        o->color((Fl_Color)70);
        o->callback((Fl_Callback*)cb_P);
      } // Fl_Button* o
      { Fl_Button* o = new Fl_Button(515, 155, 30, 25, "As");
        o->color((Fl_Color)252);
        o->callback((Fl_Callback*)cb_As);
      } // Fl_Button* o
      { Fl_Button* o = new Fl_Button(515, 185, 30, 25, "Sb");
        o->color((Fl_Color)252);
        o->callback((Fl_Callback*)cb_Sb);
      } // Fl_Button* o
      { Fl_Button* o = new Fl_Button(515, 215, 30, 25, "Bi");
        o->color((Fl_Color)237);
        o->callback((Fl_Callback*)cb_Bi);
      } // Fl_Button* o
      { Fl_Button* o = new Fl_Button(515, 245, 30, 25, "Uup");
        o->callback((Fl_Callback*)cb_Uup);
      } // Fl_Button* o
      { Fl_Button* o = new Fl_Button(550, 95, 30, 25, "O");
        o->color((Fl_Color)70);
        o->callback((Fl_Callback*)cb_O);
      } // Fl_Button* o
      { Fl_Button* o = new Fl_Button(550, 125, 30, 25, "S");
        o->color((Fl_Color)70);
        o->callback((Fl_Callback*)cb_S);
      } // Fl_Button* o
      { Fl_Button* o = new Fl_Button(550, 155, 30, 25, "Se");
        o->color((Fl_Color)70);
        o->callback((Fl_Callback*)cb_Se);
      } // Fl_Button* o
      { Fl_Button* o = new Fl_Button(550, 185, 30, 25, "Te");
        o->color((Fl_Color)252);
        o->callback((Fl_Callback*)cb_Te);
      } // Fl_Button* o
      { Fl_Button* o = new Fl_Button(550, 215, 30, 25, "Po");
        o->color((Fl_Color)252);
        o->callback((Fl_Callback*)cb_Po);
      } // Fl_Button* o
      { Fl_Button* o = new Fl_Button(550, 245, 30, 25, "Uuh");
        o->callback((Fl_Callback*)cb_Uuh);
      } // Fl_Button* o
      { Fl_Button* o = new Fl_Button(585, 95, 30, 25, "F");
        o->color((Fl_Color)252);
        o->callback((Fl_Callback*)cb_F);
      } // Fl_Button* o
      { Fl_Button* o = new Fl_Button(585, 125, 30, 25, "Cl");
        o->color((Fl_Color)252);
        o->callback((Fl_Callback*)cb_Cl);
      } // Fl_Button* o
      { Fl_Button* o = new Fl_Button(585, 155, 30, 25, "Br");
        o->color((Fl_Color)252);
        o->callback((Fl_Callback*)cb_Br);
      } // Fl_Button* o
      { Fl_Button* o = new Fl_Button(585, 185, 30, 25, "I");
        o->color((Fl_Color)252);
        o->callback((Fl_Callback*)cb_I);
      } // Fl_Button* o
      { Fl_Button* o = new Fl_Button(585, 215, 30, 25, "At");
        o->color((Fl_Color)252);
        o->callback((Fl_Callback*)cb_At);
      } // Fl_Button* o
      { Fl_Button* o = new Fl_Button(585, 245, 30, 25, "Uus");
        o->callback((Fl_Callback*)cb_Uus);
      } // Fl_Button* o
      { Fl_Button* o = new Fl_Button(620, 95, 30, 25, "Ne");
        o->color((Fl_Color)9);
        o->labelfont(1);
        o->callback((Fl_Callback*)cb_Ne);
      } // Fl_Button* o
      { Fl_Button* o = new Fl_Button(620, 125, 30, 25, "Ar");
        o->color((Fl_Color)9);
        o->labelfont(1);
        o->callback((Fl_Callback*)cb_Ar);
      } // Fl_Button* o
      { Fl_Button* o = new Fl_Button(620, 155, 30, 25, "Kr");
        o->color((Fl_Color)9);
        o->labelfont(1);
        o->callback((Fl_Callback*)cb_Kr);
      } // Fl_Button* o
      { Fl_Button* o = new Fl_Button(620, 185, 30, 25, "Xe");
        o->color((Fl_Color)9);
        o->labelfont(1);
        o->callback((Fl_Callback*)cb_Xe);
      } // Fl_Button* o
      { Fl_Button* o = new Fl_Button(620, 215, 30, 25, "Rn");
        o->color((Fl_Color)9);
        o->labelfont(1);
        o->callback((Fl_Callback*)cb_Rn);
      } // Fl_Button* o
      { Fl_Button* o = new Fl_Button(620, 245, 30, 25, "Uuo");
        o->callback((Fl_Callback*)cb_Uuo);
      } // Fl_Button* o
      { Fl_Button* o = new Fl_Button(620, 65, 30, 25, "He");
        o->color((Fl_Color)9);
        o->labelfont(1);
        o->callback((Fl_Callback*)cb_He);
      } // Fl_Button* o
      { Fl_Button* o = new Fl_Button(95, 310, 30, 25, "La");
        o->callback((Fl_Callback*)cb_La);
      } // Fl_Button* o
      { Fl_Button* o = new Fl_Button(95, 340, 30, 25, "Ac");
        o->callback((Fl_Callback*)cb_Ac);
      } // Fl_Button* o
      { Fl_Button* o = new Fl_Button(130, 310, 30, 25, "Ce");
        o->callback((Fl_Callback*)cb_Ce);
      } // Fl_Button* o
      { Fl_Button* o = new Fl_Button(130, 340, 30, 25, "Th");
        o->callback((Fl_Callback*)cb_Th);
      } // Fl_Button* o
      { Fl_Button* o = new Fl_Button(165, 310, 30, 25, "Pr");
        o->callback((Fl_Callback*)cb_Pr);
      } // Fl_Button* o
      { Fl_Button* o = new Fl_Button(165, 340, 30, 25, "Pa");
        o->callback((Fl_Callback*)cb_Pa);
      } // Fl_Button* o
      { Fl_Button* o = new Fl_Button(200, 310, 30, 25, "Nd");
        o->callback((Fl_Callback*)cb_Nd);
      } // Fl_Button* o
      { Fl_Button* o = new Fl_Button(200, 340, 30, 25, "U");
        o->callback((Fl_Callback*)cb_U);
      } // Fl_Button* o
      { Fl_Button* o = new Fl_Button(235, 310, 30, 25, "Pm");
        o->callback((Fl_Callback*)cb_Pm);
      } // Fl_Button* o
      { Fl_Button* o = new Fl_Button(235, 340, 30, 25, "Np");
        o->callback((Fl_Callback*)cb_Np);
      } // Fl_Button* o
      { Fl_Button* o = new Fl_Button(270, 310, 30, 25, "Sm");
        o->callback((Fl_Callback*)cb_Sm);
      } // Fl_Button* o
      { Fl_Button* o = new Fl_Button(270, 340, 30, 25, "Pu");
        o->callback((Fl_Callback*)cb_Pu);
      } // Fl_Button* o
      { Fl_Button* o = new Fl_Button(305, 310, 30, 25, "Eu");
        o->callback((Fl_Callback*)cb_Eu);
      } // Fl_Button* o
      { Fl_Button* o = new Fl_Button(305, 340, 30, 25, "Am");
        o->callback((Fl_Callback*)cb_Am);
      } // Fl_Button* o
      { Fl_Button* o = new Fl_Button(340, 310, 30, 25, "Gd");
        o->callback((Fl_Callback*)cb_Gd);
      } // Fl_Button* o
      { Fl_Button* o = new Fl_Button(340, 340, 30, 25, "Cm");
        o->callback((Fl_Callback*)cb_Cm);
      } // Fl_Button* o
      { Fl_Button* o = new Fl_Button(375, 310, 30, 25, "Tb");
        o->callback((Fl_Callback*)cb_Tb);
      } // Fl_Button* o
      { Fl_Button* o = new Fl_Button(375, 340, 30, 25, "Bk");
        o->callback((Fl_Callback*)cb_Bk);
      } // Fl_Button* o
      { Fl_Button* o = new Fl_Button(410, 310, 30, 25, "Dy");
        o->callback((Fl_Callback*)cb_Dy);
      } // Fl_Button* o
      { Fl_Button* o = new Fl_Button(410, 340, 30, 25, "Cf");
        o->callback((Fl_Callback*)cb_Cf);
      } // Fl_Button* o
      { Fl_Button* o = new Fl_Button(445, 310, 30, 25, "Ho");
        o->callback((Fl_Callback*)cb_Ho);
      } // Fl_Button* o
      { Fl_Button* o = new Fl_Button(445, 340, 30, 25, "Es");
        o->callback((Fl_Callback*)cb_Es);
      } // Fl_Button* o
      { Fl_Button* o = new Fl_Button(480, 310, 30, 25, "Er");
        o->callback((Fl_Callback*)cb_Er);
      } // Fl_Button* o
      { Fl_Button* o = new Fl_Button(480, 340, 30, 25, "Fm");
        o->callback((Fl_Callback*)cb_Fm);
      } // Fl_Button* o
      { Fl_Button* o = new Fl_Button(515, 310, 30, 25, "Tm");
        o->callback((Fl_Callback*)cb_Tm);
      } // Fl_Button* o
      { Fl_Button* o = new Fl_Button(515, 340, 30, 25, "Md");
        o->callback((Fl_Callback*)cb_Md);
      } // Fl_Button* o
      { Fl_Button* o = new Fl_Button(550, 310, 30, 25, "Yb");
        o->callback((Fl_Callback*)cb_Yb);
      } // Fl_Button* o
      { Fl_Button* o = new Fl_Button(550, 340, 30, 25, "No");
        o->callback((Fl_Callback*)cb_No);
      } // Fl_Button* o
      o->end();
      Fl_Group::current()->resizable(o);
    } // Fl_Group* o
    { Fl_Box* o = new Fl_Box(15, 5, 650, 35, "PERIODIC TABLE");
      o->box(FL_ENGRAVED_BOX);
      o->labelfont(1);
    } // Fl_Box* o
    form_element_pse->end();
  } // Fl_Double_Window* form_element_pse
  { form1_periodic_information = new Fl_Double_Window(780, 535, "Periodic -- Information");
    { Fl_Button* o = new Fl_Button(20, 495, 740, 25, "&Close frame");
      o->labelfont(1);
      o->callback((Fl_Callback*)cb_Close8);
    } // Fl_Button* o
    { Fl_Group* o = new Fl_Group(20, 50, 740, 440);
      o->box(FL_DOWN_BOX);
      { form_content_browser1 = new Fl_Browser(30, 60, 720, 420);
      } // Fl_Browser* form_content_browser1
      o->end();
      Fl_Group::current()->resizable(o);
    } // Fl_Group* o
    { Fl_Box* o = new Fl_Box(20, 10, 740, 30, "ELEMENT INFORMATION");
      o->box(FL_ENGRAVED_BOX);
      o->labelfont(1);
    } // Fl_Box* o
    form1_periodic_information->end();
  } // Fl_Double_Window* form1_periodic_information
  return form1_periodic_information;
}

void addkeypress( int keypress ) {
  //char str[PATH_MAX]; 
     //snprintf( str , sizeof( str ), "%s%c", inputline->value() , keypress ); 
     //inputline->value( str  );
}

int main( int argc, char *argv[] ) {
  char mydirnow[2500];  
    strncpy( inipath , getcwd( mydirnow, 2500 ), 2500 );
    
    // working dir 
    if ( argc == 2)
    if ( strcmp( argv[1] , "" ) !=  0 )
    {
            chdir( argv[ 1 ] );
    }
    printf( "Current Directory: %s \n", getcwd( mydirnow, 2500 ) );
    strncpy( userpath , getcwd( mydirnow, 2500 ), 2500 );
  
  
    // vars
    strncpy( var_system, "fe c ", PATH_MAX);
    //output_system->value( var_system );  <- seg.
  
    make_window();
    win1->show();
  
    Fl::run();
}

void void_flfront_preview_browser1_refresh() {
  flfront_preview_browser1->clear();    
    
    char filein[PATH_MAX];
    strncpy( filein, "macro.ocm"  , PATH_MAX );
         
    
    int fetchi;
    FILE *fp5;
    FILE *fp6;
    char fetchline[PATH_MAX];
    char fetchlinetmp[PATH_MAX];
    
    if ( fexist( filein ) == 1 )
    {
      fp6 = fopen( filein , "rb");
      while( !feof(fp6) ) 
      {
            fgets(fetchlinetmp, PATH_MAX, fp6); 
            strncpy( fetchline, "" , PATH_MAX );
            for( fetchi = 0 ; ( fetchi <= strlen( fetchlinetmp ) ); fetchi++ )
              if ( fetchlinetmp[ fetchi ] != '\n' )
                fetchline[fetchi]=fetchlinetmp[fetchi];
                
            if ( !feof(fp6)  )
                flfront_preview_browser1->add( fetchline );    
  
       }
       fclose( fp6 );
   }
}

void void_plot_preview_plotfile( const  char *foopatfile  ) {
  flplot_preview_browser->clear();    
    
    char filein[PATH_MAX];
    strncpy( filein, foopatfile  , PATH_MAX );
         
    
    int fetchi;
    FILE *fp5;
    FILE *fp6;
    char fetchline[PATH_MAX];
    char fetchlinetmp[PATH_MAX];
    
    if ( fexist( filein ) == 1 )
    {
      fp6 = fopen( filein , "rb");
      while( !feof(fp6) ) 
      {
            fgets(fetchlinetmp, PATH_MAX, fp6); 
            strncpy( fetchline, "" , PATH_MAX );
            for( fetchi = 0 ; ( fetchi <= strlen( fetchlinetmp ) ); fetchi++ )
              if ( fetchlinetmp[ fetchi ] != '\n' )
                fetchline[fetchi]=fetchlinetmp[fetchi];
                
            if ( !feof(fp6)  )
                flplot_preview_browser->add( fetchline );    
  
       }
       fclose( fp6 );
   }
}

int ncopysetterm( const char *foofileout,  const  char *foofilein, const  char *fooxdriver  ) {
  // foofileout foofilein    
   // *fooxdriver
    printf(" Copy with updating the plot code\n" );
    
    
    int i;
    FILE *fp;
    FILE *fp1;
    FILE *fp2;
    
    char strline[PATH_MAX];
    char strlinein[PATH_MAX];
  
    printf(" Path: %s\n", getcwd( strline, PATH_MAX ) );
    printf(" Source: %s\n", foofilein );
    printf(" Target: %s\n", foofileout );
   
    if ( fexist( foofilein ) == 1 )
    {
    
        printf(" Source: %s\n", foofilein );
        printf(" Target: %s\n", foofileout );
  
    
      fp = fopen( foofilein , "rb");
      fp2 = fopen( foofileout , "wb");
  
      while( !feof(fp) )
      {
  	    fgets( strlinein , PATH_MAX, fp);
  	    //strncpy( strline , "" , PATH_MAX );
  	    
  	    if ( strlinein[ 0 ] == '#' )  
  	    {
  	    	    printf( "%s", strlinein ); 
    	            fputs( strlinein , fp2  );
  	    }
  	    else if ( strstr( strlinein, "set term" ) != 0 ) 
  	    {
   		    printf( "==> Set Term %s\n", strlinein ); 
   		 
   		    if ( strcmp( plot_gnuplot_term_drivername->value(),    "x11" ) == 0 ) 
        		          fputs( "set termin x11 \n", fp2 );
        		    else if ( strcmp( plot_gnuplot_term_drivername->value(),    "wxt" ) == 0 ) 
        		          fputs( "set termin wxt \n", fp2 );
        		    else if ( strcmp( plot_gnuplot_term_drivername->value() ,    "qt" ) == 0 ) 
        		          fputs( "set termin qt \n", fp2 );      		          
   		    else 
   		    {
       		          fputs( "\n", fp2 );
   		          fputs( fooxdriver , fp2 );
          		  fputs( "\n", fp2 );
   		    }		              
              }
  	    else 
  	    {
  	    	    printf( "%s", strlinein ); 
    	            fputs( strlinein , fp2  );
  	    }
       }
       
       fclose( fp );
       fclose( fp2 );
     }
}

void load_content( int fooz ) {
}

void void_form_add_new_element( const char *foonew ) {
  strncat( var_system , foonew , PATH_MAX - strlen( var_system ) -1 );
    strncat( var_system , " " ,  PATH_MAX -  strlen( var_system ) -1 );
    output_system->value( var_system );
    var_calc_number_element++;
    add_new_element( foonew  );
    redraw();
}
