// generated by Fast Light User Interface Designer (fluid) version 1.0304

#include "flopencalphad.h"
#include <stdio.h>
#include <stdlib.h>
#include "headerf.h"
#include <FL/Fl_Output.H>
#include "flopencalphad_def.h"

void redraw() {
  printf("Redraw!\n");
  
  
  strncpy( var_calc_x ,  input_var_calc_x->value() , PATH_MAX );
  strncpy( var_calc_y ,  input_var_calc_y->value() , PATH_MAX );
  // strncpy( var_plot_x ,  input_var_plot_x->value() , PATH_MAX );
  // strncpy( var_plot_y ,  input_var_plot_y->value() , PATH_MAX );
  strncpy( var_tdb_database, input_var_tdb_database->value(), PATH_MAX );  
  
  strncpy( var_system ,      output_system->value() , PATH_MAX );
  // output_system->value( "fe c" );
  // output_system->value( var_system  );
}

Fl_Double_Window *win1=(Fl_Double_Window *)0;

static void cb_Fe(Fl_Button*, void*) {
  printf( " Fe Element Selected\n" );

// printf( "%s\n" ,   inputline->value( browser1->text(  browser1->value() )  ) ) ;

  strncat( var_system , "fe" , PATH_MAX - strlen( var_system ) -1 );
  strncat( var_system , " " , PATH_MAX -  strlen( var_system ) -1 );
  output_system->value( var_system );
  
  redraw();
}

static void cb_C(Fl_Button*, void*) {
  printf( " C Selected\n" );



  strncat( var_system , "c" , PATH_MAX - strlen( var_system ) -1 );
  strncat( var_system , " " , PATH_MAX -  strlen( var_system ) -1 );
    output_system->value( var_system );

redraw();
}

static void cb_Mn(Fl_Button*, void*) {
  printf( " Mn Selected\n" );


  strncat( var_system , "mn" , PATH_MAX - strlen( var_system ) -1 );
  strncat( var_system , " " , PATH_MAX -  strlen( var_system ) -1 );
    output_system->value( var_system );
    
redraw();
}

static void cb_Al(Fl_Button*, void*) {
  printf( " Al Selected\n" );


  strncat( var_system , "al" , PATH_MAX - strlen( var_system ) -1 );
  strncat( var_system , " " , PATH_MAX -  strlen( var_system ) -1 );
    output_system->value( var_system );  

redraw();
}

static void cb_Si(Fl_Button*, void*) {
  // printf( "%s\n" ,   inputline->value( browser1->text(  browser1->value() )  ) ) ;


printf( " Si Selected\n" );

  strncat( var_system , "si" , PATH_MAX - strlen( var_system ) -1 );
  strncat( var_system , " " , PATH_MAX -  strlen( var_system ) -1 );
    output_system->value( var_system );


redraw();
}

static void cb_V(Fl_Button*, void* v) {
  printf( " V Selected\n" );


  strncat( var_system , "v" , PATH_MAX - strlen( var_system ) -1 );
  strncat( var_system , " " , PATH_MAX -  strlen( var_system ) -1 );
    output_system->value( var_system );

redraw();
}

static void cb_Mo(Fl_Button*, void*) {
  printf( " Mo Selected\n" );

  strncat( var_system , "mo" , PATH_MAX - strlen( var_system ) -1 );
  strncat( var_system , " " , PATH_MAX -  strlen( var_system ) -1 );
    output_system->value( var_system );

redraw();
}

static void cb_Cr(Fl_Button*, void*) {
  printf( " Cr Selected\n" );


  strncat( var_system , "cr" , PATH_MAX - strlen( var_system ) -1 );
  strncat( var_system , " " , PATH_MAX -  strlen( var_system ) -1 );
    output_system->value( var_system );

redraw();
}

static void cb_Cu(Fl_Button*, void*) {
  printf( " Cu Selected\n" );

  strncat( var_system , "cu" , PATH_MAX - strlen( var_system ) -1 );
  strncat( var_system , " " , PATH_MAX -  strlen( var_system ) -1 );
    output_system->value( var_system );


redraw();
}

static void cb_Nb(Fl_Button*, void*) {
  printf( " nb Selected\n" );


  strncat( var_system , "nb" , PATH_MAX - strlen( var_system ) -1 );
  strncat( var_system , " " , PATH_MAX -  strlen( var_system ) -1 );
    output_system->value( var_system );
    
    
redraw();
}

Fl_Output *output_system=(Fl_Output *)0;

static void cb_CA(Fl_Button*, void*) {
  printf( " Clr \n" );

// printf( "%s\n" ,   inputline->value( browser1->text(  browser1->value() )  ) ) ;

   strncpy( var_system, "", PATH_MAX );
   output_system->value( var_system );  

   redraw();
}

Fl_Input *input_var_calc_x=(Fl_Input *)0;

static void cb_CA1(Fl_Button*, void*) {
  printf( " Clr \n" );

// printf( "%s\n" ,   inputline->value( browser1->text(  browser1->value() )  ) ) ;

input_var_calc_x->value( "" );

redraw();
}

Fl_Input *input_var_calc_y=(Fl_Input *)0;

static void cb_CA2(Fl_Button*, void*) {
  printf( " Clr \n" );

// printf( "%s\n" ,   inputline->value( browser1->text(  browser1->value() )  ) ) ;

input_var_calc_y->value( "" );

redraw();
}

Fl_Input *input_var_tdb_database=(Fl_Input *)0;

static void cb_CA3(Fl_Button*, void*) {
  printf( " Clr \n" );

// printf( "%s\n" ,   inputline->value( browser1->text(  browser1->value() )  ) ) ;

input_var_tdb_database->value( "" );

redraw();
}

static void cb_Quit(Fl_Button*, void*) {
  exit( 0 );
}

static void cb_3(Fl_Button*, void*) {
  char mydirnow[2500];
  printf( "Current Directory: %s \n", getcwd( mydirnow, 2500 ) );



  redraw();
  nsystem(  "  screen -d  -m   xterm -e   oc   macro.ocm " );
  
  // oc6 bug 
  // gnuplot ocgnu.plt  &;
}

static void cb_2(Fl_Button*, void*) {
  redraw();

nsystem( "  screen -d -m fledit  macro.ocm " );
}

static void cb_1(Fl_Button*, void*) {
  redraw();

clear_plot();


create_macro( );
}

static void cb_4(Fl_Button*, void*) {
  char mydirnow[2500];
  printf( "Current Directory: %s \n", getcwd( mydirnow, 2500 ) );



  redraw();
  nsystem(  "  screen -d  -m  gnuplot ocgnu.plt  " );
  
  
  // oc6 bug 
  // gnuplot ocgnu.plt  &;
}

static void cb_Options(Fl_Button*, void*) {
  win2->show();
}

Fl_Double_Window *win2=(Fl_Double_Window *)0;

static void cb_ls(Fl_Button*, void*) {
  nls();
}

static void cb_xterm(Fl_Button*, void*) {
  nsystem( " screen -d -m xterm " );
}

static void cb_calc(Fl_Button*, void*) {
  nsystem( " screen -d -m fl48 " );
}

static void cb_Close(Fl_Button*, void*) {
  nsystem( " pkill gnuplot " );
}

Fl_Browser *browser1=(Fl_Browser *)0;

static void cb_browser1(Fl_Browser*, void*) {
  printf( "Click\n" );
}

Fl_Input *input_notes=(Fl_Input *)0;

static void cb_Add(Fl_Button*, void*) {
  browser1->add(   input_notes->value()  );

// if (  browser1->value() >= 1 )  printf( "%s\n" ,   browser1->text(  browser1->value() )  )  ;
}

Fl_Double_Window* make_window() {
  { win1 = new Fl_Double_Window(775, 700, "Notes");
    win1->labeltype(FL_ENGRAVED_LABEL);
    { Fl_Box* o = new Fl_Box(30, 25, 710, 30, "FLTK OpenCalphad");
      o->box(FL_ENGRAVED_BOX);
      o->labeltype(FL_ENGRAVED_LABEL);
    } // Fl_Box* o
    { Fl_Group* o = new Fl_Group(30, 85, 350, 125, "1. Element");
      o->box(FL_DOWN_BOX);
      o->labeltype(FL_ENGRAVED_LABEL);
      { Fl_Button* o = new Fl_Button(40, 95, 45, 35, "Fe");
        o->labelfont(1);
        o->labelsize(12);
        o->callback((Fl_Callback*)cb_Fe);
      } // Fl_Button* o
      { Fl_Button* o = new Fl_Button(100, 95, 45, 35, "C");
        o->labelfont(1);
        o->labelsize(12);
        o->callback((Fl_Callback*)cb_C);
      } // Fl_Button* o
      { Fl_Button* o = new Fl_Button(160, 95, 45, 35, "Mn");
        o->labelfont(1);
        o->labelsize(12);
        o->callback((Fl_Callback*)cb_Mn);
      } // Fl_Button* o
      { Fl_Button* o = new Fl_Button(220, 95, 45, 35, "Al");
        o->labelfont(1);
        o->labelsize(12);
        o->callback((Fl_Callback*)cb_Al);
      } // Fl_Button* o
      { Fl_Button* o = new Fl_Button(40, 140, 45, 35, "Si");
        o->labelfont(1);
        o->labelsize(12);
        o->callback((Fl_Callback*)cb_Si);
      } // Fl_Button* o
      { Fl_Button* o = new Fl_Button(100, 140, 45, 35, "V");
        o->labelfont(1);
        o->labelsize(12);
        o->callback((Fl_Callback*)cb_V);
      } // Fl_Button* o
      { Fl_Button* o = new Fl_Button(159, 140, 45, 35, "Mo");
        o->labelfont(1);
        o->labelsize(12);
        o->callback((Fl_Callback*)cb_Mo);
      } // Fl_Button* o
      { Fl_Button* o = new Fl_Button(220, 140, 45, 35, "Cr");
        o->labelfont(1);
        o->labelsize(12);
        o->callback((Fl_Callback*)cb_Cr);
      } // Fl_Button* o
      { Fl_Button* o = new Fl_Button(280, 95, 45, 35, "Cu");
        o->labelfont(1);
        o->labelsize(12);
        o->callback((Fl_Callback*)cb_Cu);
      } // Fl_Button* o
      { Fl_Button* o = new Fl_Button(280, 140, 45, 35, "Nb");
        o->labelfont(1);
        o->labelsize(12);
        o->callback((Fl_Callback*)cb_Nb);
      } // Fl_Button* o
      o->end();
    } // Fl_Group* o
    { Fl_Group* o = new Fl_Group(30, 240, 350, 170, "2. Compute");
      o->box(FL_DOWN_FRAME);
      o->labeltype(FL_ENGRAVED_LABEL);
      { output_system = new Fl_Output(95, 255, 205, 25, "System");
        output_system->color(FL_BACKGROUND_COLOR);
        output_system->value( "fe c" );
      } // Fl_Output* output_system
      { Fl_Button* o = new Fl_Button(305, 255, 30, 25, "CA");
        o->labelfont(1);
        o->labelsize(12);
        o->callback((Fl_Callback*)cb_CA);
      } // Fl_Button* o
      { input_var_calc_x = new Fl_Input(95, 285, 205, 25, "X var.");
        input_var_calc_x->value( "c" );
      } // Fl_Input* input_var_calc_x
      { Fl_Button* o = new Fl_Button(305, 285, 30, 25, "CA");
        o->labelfont(1);
        o->labelsize(12);
        o->callback((Fl_Callback*)cb_CA1);
      } // Fl_Button* o
      { input_var_calc_y = new Fl_Input(95, 315, 205, 25, "Y var.");
        input_var_calc_y->value( "T" );
      } // Fl_Input* input_var_calc_y
      { Fl_Button* o = new Fl_Button(305, 315, 30, 25, "CA");
        o->labelfont(1);
        o->labelsize(12);
        o->callback((Fl_Callback*)cb_CA2);
      } // Fl_Button* o
      { input_var_tdb_database = new Fl_Input(95, 345, 205, 25, "TDB");
        input_var_tdb_database->value( "steel1.tdb" );
      } // Fl_Input* input_var_tdb_database
      { Fl_Button* o = new Fl_Button(305, 345, 30, 25, "CA");
        o->labelfont(1);
        o->labelsize(12);
        o->callback((Fl_Callback*)cb_CA3);
      } // Fl_Button* o
      o->end();
      Fl_Group::current()->resizable(o);
    } // Fl_Group* o
    { Fl_Button* o = new Fl_Button(290, 650, 95, 30, "&Quit");
      o->callback((Fl_Callback*)cb_Quit);
    } // Fl_Button* o
    { Fl_Group* o = new Fl_Group(30, 450, 350, 170, "3. OCM GNUPlot");
      o->box(FL_DOWN_BOX);
      o->labeltype(FL_ENGRAVED_LABEL);
      { Fl_Button* o = new Fl_Button(135, 540, 145, 25, "[&3] Compute!");
        o->callback((Fl_Callback*)cb_3);
      } // Fl_Button* o
      { Fl_Button* o = new Fl_Button(135, 505, 145, 25, "[&2] Edit!");
        o->callback((Fl_Callback*)cb_2);
      } // Fl_Button* o
      { Fl_Button* o = new Fl_Button(135, 470, 145, 25, "[&1] Create!");
        o->callback((Fl_Callback*)cb_1);
      } // Fl_Button* o
      { Fl_Button* o = new Fl_Button(135, 575, 145, 25, "[&4] Plot!");
        o->callback((Fl_Callback*)cb_4);
      } // Fl_Button* o
      o->end();
    } // Fl_Group* o
    { Fl_Button* o = new Fl_Button(30, 650, 245, 30, "&Options");
      o->callback((Fl_Callback*)cb_Options);
    } // Fl_Button* o
    { Fl_Group* o = new Fl_Group(390, 85, 345, 535, "Output");
      o->box(FL_DOWN_BOX);
      o->labeltype(FL_ENGRAVED_LABEL);
      o->end();
    } // Fl_Group* o
    win1->end();
  } // Fl_Double_Window* win1
  { win2 = new Fl_Double_Window(890, 330);
    { Fl_Box* o = new Fl_Box(15, 25, 855, 35, "FLTK OpenCalphad -- Options");
      o->box(FL_ENGRAVED_BOX);
      o->labeltype(FL_ENGRAVED_LABEL);
    } // Fl_Box* o
    { Fl_Group* o = new Fl_Group(15, 100, 285, 45, "System Call");
      o->box(FL_DOWN_BOX);
      o->labeltype(FL_ENGRAVED_LABEL);
      { Fl_Button* o = new Fl_Button(25, 110, 50, 25, "ls");
        o->callback((Fl_Callback*)cb_ls);
      } // Fl_Button* o
      { Fl_Button* o = new Fl_Button(80, 110, 50, 25, "xterm");
        o->callback((Fl_Callback*)cb_xterm);
      } // Fl_Button* o
      { Fl_Button* o = new Fl_Button(135, 110, 50, 25, "calc");
        o->callback((Fl_Callback*)cb_calc);
      } // Fl_Button* o
      { Fl_Button* o = new Fl_Button(190, 110, 90, 25, "Close Plots");
        o->callback((Fl_Callback*)cb_Close);
      } // Fl_Button* o
      o->end();
    } // Fl_Group* o
    { Fl_Group* o = new Fl_Group(15, 170, 285, 140, "Notepad");
      o->box(FL_DOWN_BOX);
      o->labeltype(FL_ENGRAVED_LABEL);
      { browser1 = new Fl_Browser(25, 180, 260, 90);
        browser1->callback((Fl_Callback*)cb_browser1);
        browser1->type(FL_HOLD_BROWSER);
      } // Fl_Browser* browser1
      { input_notes = new Fl_Input(70, 275, 165, 25, "Notes");
        input_notes->tooltip("Demo");
        input_notes->color((Fl_Color)55);
      } // Fl_Input* input_notes
      { Fl_Button* o = new Fl_Button(240, 275, 45, 25, "&Add");
        o->callback((Fl_Callback*)cb_Add);
      } // Fl_Button* o
      o->end();
    } // Fl_Group* o
    win2->end();
  } // Fl_Double_Window* win2
  return win2;
}

void addkeypress( int keypress ) {
  //char str[PATH_MAX]; 
     //snprintf( str , sizeof( str ), "%s%c", inputline->value() , keypress ); 
     //inputline->value( str  );
}

int main( int argc, char *argv[]) {
  // working dir 
    if ( argc == 2)
    if ( strcmp( argv[1] , "" ) !=  0 )
    {
            chdir( argv[ 1 ] );
    }
    
    char mydirnow[2500];
    printf( "Current Directory: %s \n", getcwd( mydirnow, 2500 ) );
  
    // vars
    strncpy( var_system, "", PATH_MAX);
    
  
    make_window();
    win1->show();
  
    Fl::run();
}
