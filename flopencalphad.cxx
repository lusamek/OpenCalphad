// generated by Fast Light User Interface Designer (fluid) version 1.0304

#include "flopencalphad.h"
#include <stdio.h>
#include <stdlib.h>
#include "ccode.h"
#include <FL/Fl_Output.H>
#include "flopencalphad_def.h"

void redraw() {
  printf("> Procedure redraw!\n");
  
  
  strncpy( var_calc_x ,  input_var_calc_x->value() , PATH_MAX );
  strncpy( var_calc_y ,  input_var_calc_y->value() , PATH_MAX );
  // strncpy( var_plot_x ,  input_var_plot_x->value() , PATH_MAX );
  // strncpy( var_plot_y ,  input_var_plot_y->value() , PATH_MAX );
  strncpy( var_tdb_database, input_var_tdb_database->value(), PATH_MAX );  
  
  strncpy( var_system ,      output_system->value() , PATH_MAX );
  // output_system->value( "fe c" );
  // output_system->value( var_system  );
  
  // input_var_set_condition->value( "t=1000 p=1e5 n=1 x(c)=0.2 " );
  printf("Hello, World!\n");
}

Fl_Double_Window *win1=(Fl_Double_Window *)0;

static void cb_Fe(Fl_Button*, void*) {
  printf( " Fe Element Selected\n" );

// printf( "%s\n" ,   inputline->value( browser1->text(  browser1->value() )  ) ) ;

  strncat( var_system , "fe" , PATH_MAX - strlen( var_system ) -1 );
  strncat( var_system , " " ,  PATH_MAX -  strlen( var_system ) -1 );
  output_system->value( var_system );
  
  var_calc_number_element++;
  
  add_new_element( "fe" );
  
  redraw();
}

static void cb_C(Fl_Button*, void*) {
  printf( " C Selected\n" );



  strncat( var_system , "c" , PATH_MAX - strlen( var_system ) -1 );
  strncat( var_system , " " , PATH_MAX -  strlen( var_system ) -1 );
    output_system->value( var_system );


  var_calc_number_element++;

  add_new_element( "c" );  


redraw();
}

static void cb_Mn(Fl_Button*, void*) {
  printf( " Mn Selected\n" );


  strncat( var_system , "mn" , PATH_MAX - strlen( var_system ) -1 );
  strncat( var_system , " " , PATH_MAX -  strlen( var_system ) -1 );
    output_system->value( var_system );
    
  var_calc_number_element++;
  

  add_new_element( "mn" );  


redraw();
}

static void cb_Al(Fl_Button*, void*) {
  printf( " Al Selected\n" );


  strncat( var_system , "al" , PATH_MAX - strlen( var_system ) -1 );
  strncat( var_system , " " , PATH_MAX -  strlen( var_system ) -1 );
    output_system->value( var_system );  

  var_calc_number_element++;
  
  
  add_new_element( "al" );  


  

redraw();
}

static void cb_Si(Fl_Button*, void*) {
  // printf( "%s\n" ,   inputline->value( browser1->text(  browser1->value() )  ) ) ;


printf( " Si Selected\n" );

  strncat( var_system , "si" , PATH_MAX - strlen( var_system ) -1 );
  strncat( var_system , " " , PATH_MAX -  strlen( var_system ) -1 );
    output_system->value( var_system );

  var_calc_number_element++;
  

  add_new_element( "si" );  



redraw();
}

static void cb_V(Fl_Button*, void* v) {
  printf( " V Selected\n" );


  strncat( var_system , "v" , PATH_MAX - strlen( var_system ) -1 );
  strncat( var_system , " " , PATH_MAX -  strlen( var_system ) -1 );
    output_system->value( var_system );

  var_calc_number_element++;
  
  add_new_element( "v" );  



redraw();
}

static void cb_Mo(Fl_Button*, void*) {
  printf( " Mo Selected\n" );

  strncat( var_system , "mo" , PATH_MAX - strlen( var_system ) -1 );
  strncat( var_system , " " , PATH_MAX -  strlen( var_system ) -1 );
    output_system->value( var_system );

  var_calc_number_element++;
  

  add_new_element( "mo" );  


redraw();
}

static void cb_Cr(Fl_Button*, void*) {
  printf( " Cr Selected\n" );


  strncat( var_system , "cr" , PATH_MAX - strlen( var_system ) -1 );
  strncat( var_system , " " , PATH_MAX -  strlen( var_system ) -1 );
    output_system->value( var_system );

  var_calc_number_element++;
  
  add_new_element( "cr" );  



redraw();
}

static void cb_Cu(Fl_Button*, void*) {
  printf( " Cu Selected\n" );

  strncat( var_system , "cu" , PATH_MAX - strlen( var_system ) -1 );
  strncat( var_system , " " , PATH_MAX -  strlen( var_system ) -1 );
    output_system->value( var_system );

  var_calc_number_element++;
  

  add_new_element( "cu" );  



redraw();
}

static void cb_Nb(Fl_Button*, void*) {
  printf( " nb Selected\n" );


  strncat( var_system , "nb" , PATH_MAX - strlen( var_system ) -1 );
  strncat( var_system , " " , PATH_MAX -  strlen( var_system ) -1 );
    output_system->value( var_system );
    
  var_calc_number_element++;
  

  add_new_element( "nb" );  

redraw();
}

static void cb_Ni(Fl_Button*, void*) {
  printf( " ni Selected\n" );


  strncat( var_system , "ni" , PATH_MAX - strlen( var_system ) -1 );
  strncat( var_system , " " , PATH_MAX -  strlen( var_system ) -1 );
    output_system->value( var_system );

  var_calc_number_element++;
  
  
  add_new_element( "ni" );  


  

redraw();
}

static void cb_Ag(Fl_Button*, void*) {
  printf( " ag Selected\n" );


  strncat( var_system , "ag" , PATH_MAX - strlen( var_system ) -1 );
  strncat( var_system , " " , PATH_MAX -  strlen( var_system ) -1 );
    output_system->value( var_system );

  var_calc_number_element++;
  
  add_new_element( "ag" );  



redraw();
}

static void cb_Ti(Fl_Button*, void*) {
  printf( " ti Selected\n" );


  strncat( var_system , "ti" , PATH_MAX - strlen( var_system ) -1 );
  strncat( var_system , " " , PATH_MAX -  strlen( var_system ) -1 );
    output_system->value( var_system );

  var_calc_number_element++;
  

  add_new_element( "ti" );  


redraw();
}

static void cb_Zn(Fl_Button*, void*) {
  printf( " zn Selected\n" );


  strncat( var_system , "zn" , PATH_MAX - strlen( var_system ) -1 );
  strncat( var_system , " " , PATH_MAX -  strlen( var_system ) -1 );
    output_system->value( var_system );

  var_calc_number_element++;
  
  add_new_element( "zn" );  



redraw();
}

static void cb_W(Fl_Button*, void*) {
  printf( " w Selected\n" );


  strncat( var_system , "w" , PATH_MAX - strlen( var_system ) -1 );
  strncat( var_system , " " , PATH_MAX -  strlen( var_system ) -1 );
    output_system->value( var_system );

  var_calc_number_element++;
  
  add_new_element( "w" );  



redraw();
}

Fl_Output *output_system=(Fl_Output *)0;

static void cb_CA(Fl_Button*, void*) {
  printf( " Clr \n" );

// printf( "%s\n" ,   inputline->value( browser1->text(  browser1->value() )  ) ) ;


   input_var_set_condition->value( " t=1000 p=1e5 n=1  " );
   
   strncpy( var_system, "", PATH_MAX );
   output_system->value( var_system ); 
   
   var_calc_number_element = 0; 

   redraw();
}

Fl_Input *input_var_calc_x=(Fl_Input *)0;

static void cb_CA1(Fl_Button*, void*) {
  printf( " Clr \n" );

// printf( "%s\n" ,   inputline->value( browser1->text(  browser1->value() )  ) ) ;

input_var_calc_x->value( "" );

redraw();
}

Fl_Input *input_var_calc_y=(Fl_Input *)0;

static void cb_CA2(Fl_Button*, void*) {
  printf( " Clr \n" );

// printf( "%s\n" ,   inputline->value( browser1->text(  browser1->value() )  ) ) ;

input_var_calc_y->value( "" );

redraw();
}

Fl_Input *input_var_tdb_database=(Fl_Input *)0;

static void cb_CA3(Fl_Button*, void*) {
  printf( " Clr \n" );

// printf( "%s\n" ,   inputline->value( browser1->text(  browser1->value() )  ) ) ;

input_var_tdb_database->value( "" );

redraw();
}

static void cb_Quit(Fl_Button*, void*) {
  exit( 0 );
}

static void cb_3(Fl_Button*, void*) {
  char mydirnow[2500];
  printf( "Current Directory: %s \n", getcwd( mydirnow, 2500 ) );

  void_plot_preview_plotfile();

  redraw();
  
  if ( checkbutton_xterm_console->value( ) == 1 ) 
     nsystem(  "  screen -d  -m   xterm -e   oc   macro.ocm " );
     
  else if ( checkbutton_single_console->value( ) == 1 ) 
     nsystem(  "  oc   macro.ocm " );
     
     
  
  // oc6 bug 
  // gnuplot ocgnu.plt  &;
}

static void cb_2(Fl_Button*, void*) {
  redraw();

nsystem( "  screen -d -m fledit  macro.ocm " );
}

static void cb_1(Fl_Button*, void*) {
  redraw();

clear_plot();


create_macro( );


void_flfront_preview_browser1_refresh();
}

static void cb_4(Fl_Button*, void*) {
  char mydirnow[2500];
  printf( "Current Directory: %s \n", getcwd( mydirnow, 2500 ) );



  redraw();
  nsystem(  "  screen -d  -m  gnuplot ocgnu.plt  " );
  
  
  // oc6 bug 
  // gnuplot ocgnu.plt  &;
}

static void cb_Option(Fl_Button*, void*) {
  win3->show();
}

Fl_Browser *flfront_preview_browser1=(Fl_Browser *)0;

static void cb_Refresh(Fl_Button*, void*) {
  void_flfront_preview_browser1_refresh();
}

static void cb_Edit(Fl_Button*, void*) {
  redraw();

nsystem( "  screen -d -m fledit  macro.ocm " );
}

static void cb_Database(Fl_Button*, void*) {
  win2->show();
}

static void cb_Plot(Fl_Button*, void*) {
  win4->show();
}

static void cb_Macro(Fl_Button*, void*) {
  win5->show();
}

static void cb_Condition(Fl_Button*, void*) {
  win6->show();
}

static void cb_Help(Fl_Button*, void*) {
  if ( fexist( "/usr/bin/chromium" ) == 1) 
   nsystem(  " screen -d -m chromium  --new-window  http://github.com/lusamek/opencalphad " );
   
else if ( fexist( "/usr/bin/chromium-browser" ) == 1) 
   nsystem(  " screen -d -m chromium-browser   --new-window  http://github.com/lusamek/opencalphad " );
   
else
   nsystem(  " screen -d -m dillo http://github.com/lusamek/opencalphad " );
}

static void cb_Periodic(Fl_Button*, void*) {
  nsystem( " screen -d -m gperiodic " );
}

Fl_Double_Window *win2=(Fl_Double_Window *)0;

Fl_Browser *browser1=(Fl_Browser *)0;

static void cb_browser1(Fl_Browser*, void*) {
  printf( "Click\n" );



 input_var_tdb_database->value(  browser1->text(   browser1->value() ) ); 
 

redraw();
}

Fl_Input *input_notes=(Fl_Input *)0;

static void cb_Add(Fl_Button*, void*) {
  browser1->add(   input_notes->value()  );

// if (  browser1->value() >= 1 )  printf( "%s\n" ,   browser1->text(  browser1->value() )  )  ;
}

static void cb_Edit1(Fl_Button*, void*) {
  redraw();
  
  char charo[PATH_MAX];
  strncpy( charo, "", PATH_MAX );
  strncat( charo , " screen -d -m  fledit  " , PATH_MAX - strlen( charo ) -1 );
  strncat( charo , " " , PATH_MAX -  strlen( charo ) -1 );
  strncat( charo , " \"" , PATH_MAX -  strlen( charo ) -1 );
  strncat( charo , var_tdb_database , PATH_MAX -  strlen( charo ) -1 );
  strncat( charo , "\" " , PATH_MAX -  strlen( charo ) -1 );
  nsystem(  charo );
}

static void cb_ls(Fl_Button*, void*) {
  redraw();

  printf( "============================\n" );
  printf( "   DATABASE                 \n" );
  printf( "============================\n" );
  
  nlsgrep( ".tdb" );
  nlsgrep( ".TDB" );
}

static void cb_Elemen(Fl_Button*, void*) {
  redraw();
  
  
  printf( "============================\n" );
  printf( "   ELEMENT                  \n" );
  printf( "============================\n" );
  
  
  
  filegrep( var_tdb_database , "ELEM" );
}

static void cb_Browse(Fl_Button*, void*) {
  redraw();

  printf( "============================\n" );
  printf( "   DATABASE                 \n" );
  printf( "============================\n" );
  
  nlsgrep( ".tdb" );
  nlsgrep( ".TDB" );
  
  
  printf( "============================\n" );
  printf( "   DATABASE                 \n" );
  printf( "============================\n" );

  
        browser1->clear();
	DIR *dirp;
	struct dirent *dp;
	dirp = opendir( "." );
	while  ((dp = readdir( dirp )) != NULL ) 
	{
		if (  strcmp( dp->d_name, "." ) != 0 )
		if (  strcmp( dp->d_name, ".." ) != 0 )
                {
                    if ( ( strstr( dp->d_name, ".TDB" ) != 0 )  || ( strstr( dp->d_name, ".tdb" ) != 0 )  ) 
                    {
			printf( "%s\n", dp->d_name );
 		        browser1->add(  dp->d_name  );
 		     }
                }
	}
	closedir( dirp );
}

static void cb_Species(Fl_Button*, void*) {
  redraw();
  
  
  printf( "============================\n" );
  printf( "   SPECIES                  \n" );
  printf( "============================\n" );
  
  
  
  filegrep( var_tdb_database , "SPECIE" );
}

static void cb_Path(Fl_Button*, void*) {
  redraw();

  printf( "============================\n" );
  printf( "   PATH                     \n" );
  printf( "============================\n" );
  
    char mydirnow[2500];
  printf( "Current Directory: %s \n", getcwd( mydirnow, 2500 ) );
}

static void cb_View(Fl_Button*, void*) {
  redraw();
  
  char charo[PATH_MAX];
  strncpy( charo, "", PATH_MAX );
  strncat( charo , " screen -d -m  flview   " , PATH_MAX - strlen( charo ) -1 );
  strncat( charo , " " , PATH_MAX -  strlen( charo ) -1 );
  strncat( charo , " \"" , PATH_MAX -  strlen( charo ) -1 );
  strncat( charo , var_tdb_database , PATH_MAX -  strlen( charo ) -1 );
  strncat( charo , "\" " , PATH_MAX -  strlen( charo ) -1 );
  nsystem(  charo );
}

static void cb_Phase(Fl_Button*, void*) {
  redraw();
  
  
  printf( "============================\n" );
  printf( "   PHASE                   \n" );
  printf( "============================\n" );
  
  
  
  filegrep( var_tdb_database , "PHASE " );
}

static void cb_Fun(Fl_Button*, void*) {
  redraw();
  
  
  printf( "============================\n" );
  printf( "   FUN                   \n" );
  printf( "============================\n" );
  
  
  
  filegrep( var_tdb_database , "FUN " );
}

static void cb_Function(Fl_Button*, void*) {
  redraw();
  
  
  printf( "============================\n" );
  printf( "   FUNCTION                  \n" );
  printf( "============================\n" );
  
  
  
  filegrep( var_tdb_database , "FUNCTION " );
}

static void cb_Cat(Fl_Button*, void*) {
  redraw();
  ncat( var_tdb_database );
}

static void cb_Close(Fl_Button*, void*) {
  win2->hide();
}

static void cb_Fetch(Fl_Button*, void*) {
  redraw();
  
  char charo[PATH_MAX];
  strncpy( charo, "", PATH_MAX );
  strncat( charo , " xterm -e wget  -c     " , PATH_MAX - strlen( charo ) -1 );
  strncat( charo , " " , PATH_MAX -  strlen( charo ) -1 );
  strncat( charo , " \"" , PATH_MAX -  strlen( charo ) -1 );
  strncat( charo , form_database_fetch_url->value() , PATH_MAX -  strlen( charo ) -1 );
  strncat( charo , "\" " , PATH_MAX -  strlen( charo ) -1 );
  nsystem(  charo );
 

redraw();

  printf( "============================\n" );
  printf( "   DATABASE                 \n" );
  printf( "============================\n" );
  
  nlsgrep( ".tdb" );
  nlsgrep( ".TDB" );
  
  
  printf( "============================\n" );
  printf( "   DATABASE                 \n" );
  printf( "============================\n" );

  
        browser1->clear();
	DIR *dirp;
	struct dirent *dp;
	dirp = opendir( "." );
	while  ((dp = readdir( dirp )) != NULL ) 
	{
		if (  strcmp( dp->d_name, "." ) != 0 )
		if (  strcmp( dp->d_name, ".." ) != 0 )
                {
                    if ( ( strstr( dp->d_name, ".TDB" ) != 0 )  || ( strstr( dp->d_name, ".tdb" ) != 0 )  ) 
                    {
			printf( "%s\n", dp->d_name );
 		        browser1->add(  dp->d_name  );
 		     }
                }
	}
	closedir( dirp );
}

static void cb_dos2unix(Fl_Button*, void*) {
  redraw();
  
  char charo[PATH_MAX];
  strncpy( charo, "", PATH_MAX );
  strncat( charo , " xterm -e dos2unix    " , PATH_MAX - strlen( charo ) -1 );
  strncat( charo , " " , PATH_MAX -  strlen( charo ) -1 );
  strncat( charo , " \"" , PATH_MAX -  strlen( charo ) -1 );
  strncat( charo , var_tdb_database , PATH_MAX -  strlen( charo ) -1 );
  strncat( charo , "\" " , PATH_MAX -  strlen( charo ) -1 );
  nsystem(  charo );
}

Fl_Input *form_database_fetch_url=(Fl_Input *)0;

Fl_Double_Window *win3=(Fl_Double_Window *)0;

static void cb_ls1(Fl_Button*, void*) {
  nls();
}

static void cb_xterm(Fl_Button*, void*) {
  nsystem( " screen -d -m xterm " );
}

static void cb_fl48(Fl_Button*, void*) {
  nsystem( " screen -d -m fl48 " );
}

static void cb_fledit(Fl_Button*, void*) {
  nsystem( " screen -d -m fledit " );
}

static void cb_Path1(Fl_Button*, void*) {
  redraw();

  printf( "============================\n" );
  printf( "   PATH                     \n" );
  printf( "============================\n" );
  
    char mydirnow[2500];
  printf( "Current Directory: %s \n", getcwd( mydirnow, 2500 ) );
}

static void cb_rox(Fl_Button*, void*) {
  nsystem( " rox " );
}

static void cb_x48(Fl_Button*, void*) {
  nsystem( " screen -d -m x48 " );
}

static void cb_xlock(Fl_Button*, void*) {
  nsystem( "  cd ; screen -d -m   xlock  -nolock  " );
}

static void cb_Keyboard(Fl_Button*, void*) {
  nsystem( " screen -d -m flkeyboard " );
}

static void cb_Monitor(Fl_Button*, void*) {
  nsystem( " screen -d -m flmonitor " );
}

static void cb_flm(Fl_Button*, void*) {
  nsystem( " screen -d -m flm  " );
}

static void cb_flcalc(Fl_Button*, void*) {
  nsystem( " screen -d -m flcalc   " );
}

static void cb_Close1(Fl_Button*, void*) {
  win3->hide();
}

Fl_Check_Button *checkbutton_single_console=(Fl_Check_Button *)0;

Fl_Check_Button *checkbutton_xterm_console=(Fl_Check_Button *)0;

static void cb_Development(Fl_Button*, void*) {
  win7->show();
}

static void cb_Web(Fl_Button*, void*) {
  if ( fexist( "/usr/bin/dillo" ) == 1) 
   nsystem(  " screen -d -m dillo  http://duckduckgo.com   " );

else if ( fexist( "/usr/bin/chromium" ) == 1) 
   nsystem(  " screen -d -m chromium  --new-window  http://duckduckgo.com " );
   
else if ( fexist( "/usr/bin/chromium-browser" ) == 1) 
   nsystem(  " screen -d -m chromium-browser   --new-window  http://duckduckgo.com   " );
   
else if ( fexist( "/usr/bin/firefox" ) == 1) 
   nsystem(  " screen -d -m firefox  --new-window  http://duckduckgo.com " );
   
else if ( fexist( "/usr/bin/chromium-browser" ) == 1) 
   nsystem(  " screen -d -m chromium-browser   --new-window  http://duckduckgo.com   " );
   
else
   nsystem(  " screen -d -m dillo http://duckduckgo.com    " );
}

static void cb_Development1(Fl_Button*, void*) {
  if ( fexist( "/usr/bin/chromium" ) == 1) 
   nsystem(  " screen -d -m chromium  --new-window  https://webchat.freenode.net/?channels=#opencalphad " );
   
else if ( fexist( "/usr/bin/chromium-browser" ) == 1) 
   nsystem(  " screen -d -m chromium-browser   --new-window  https://webchat.freenode.net/?channels=#opencalphad  " );
}

Fl_Double_Window *win4=(Fl_Double_Window *)0;

static void cb_Close2(Fl_Button*, void*) {
  nsystem( " pkill gnuplot " );
}

static void cb_Clear(Fl_Button*, void*) {
  /// this might be modified for windows/mac ...
nsystem( "  rm  ocgnu.plt " );

void_plot_preview_plotfile();
}

static void cb_View1(Fl_Button*, void*) {
  redraw();
  
  char charo[PATH_MAX];
  strncpy( charo, "", PATH_MAX );
  strncat( charo , " screen -d -m  flview   " , PATH_MAX - strlen( charo ) -1 );
  strncat( charo , " " , PATH_MAX -  strlen( charo ) -1 );
  strncat( charo , " \"" , PATH_MAX -  strlen( charo ) -1 );
  strncat( charo , "ocgnu.plt"   , PATH_MAX -  strlen( charo ) -1 );
  strncat( charo , "\" " , PATH_MAX -  strlen( charo ) -1 );
  nsystem(  charo );
}

static void cb_Edit2(Fl_Button*, void*) {
  redraw();
  
  char charo[PATH_MAX];
  strncpy( charo, "", PATH_MAX );
  strncat( charo , " screen -d -m  fledit   " , PATH_MAX - strlen( charo ) -1 );
  strncat( charo , " " , PATH_MAX -  strlen( charo ) -1 );
  strncat( charo , " \"" , PATH_MAX -  strlen( charo ) -1 );
  strncat( charo , "ocgnu.plt"   , PATH_MAX -  strlen( charo ) -1 );
  strncat( charo , "\" " , PATH_MAX -  strlen( charo ) -1 );
  nsystem(  charo );
}

static void cb_Plot1(Fl_Button*, void*) {
  char mydirnow[2500];
  printf( "Current Directory: %s \n", getcwd( mydirnow, 2500 ) );
  
  redraw();
  
  if ( plot_gnuplot_term_driver_force->value( ) == 0 )  
  {
      ncp( "advocgnu.plt" , "ocgnu.plt" );
      nsystem(  "  screen -d  -m  gnuplot ocgnu.plt     " );
  }   
  
  else if ( plot_gnuplot_term_driver_force->value( ) == 1 )
  { 
      ncp(           "advocgnu.plt" , "ocgnu.plt" );
      ncopysetterm(  "advocgnu.plt" ,  "ocgnu.plt" ,  plot_gnuplot_term_drivername->value()   );
      nsystem(  "  screen -d  -m  gnuplot advocgnu.plt  " );
  }  
     
  // oc6 bug 
  // gnuplot ocgnu.plt  &;
}

static void cb_Refresh1(Fl_Button*, void*) {
  void_plot_preview_plotfile();
}

Fl_Browser *flplot_preview_browser=(Fl_Browser *)0;

static void cb_Automatic(Fl_Button*, void*) {
  plot_gnuplot_term_driver_force->value( 0 );
}

Fl_Input *plot_gnuplot_term_drivername=(Fl_Input *)0;

Fl_Check_Button *plot_gnuplot_term_driver_force=(Fl_Check_Button *)0;

static void cb_(Fl_Button*, void*) {
  printf("Util: Create help.txt !\n");

      FILE *fpout;

      fpout = fopen( "help.txt", "wb" );
      
      fputs( "===============\n", fpout );
      fputs( "GNUPLOT DRIVER \n", fpout );
      fputs( "===============\n", fpout );
      fputs( "cairolatex        canvas            cgm               context \n", fpout );
      fputs( "corel             dumb              dxf               eepic\n", fpout );
      fputs( "emf               emtex             epscairo          epslate\n", fpout );
      fputs( "fig               gif               hpgl              jpeg\n", fpout );
      fputs( "latex             lua               mf                mp\n", fpout );
      fputs( "pcl5              pdfcairo          png               pngcair\n", fpout );
      fputs( "pop               postscript        pslatex           pstex\n", fpout );
      fputs( "pstricks          push              qms               svg\n", fpout );
      fputs( "tek40xx           tek410x           texdraw           tgif\n", fpout );
      fputs( "tikz              tkcanvas          tpic              vttek\n", fpout );
      fputs( "wxt               x11               xlib              xterm\n", fpout );
      fclose( fpout );
      
      
      nsystem( " screen -d -m flview help.txt " );
}

static void cb_Edit3(Fl_Button*, void*) {
  redraw();
  
  char charo[PATH_MAX];
  strncpy( charo, "", PATH_MAX );
  strncat( charo , " screen -d -m  fledit   " , PATH_MAX - strlen( charo ) -1 );
  strncat( charo , " " , PATH_MAX -  strlen( charo ) -1 );
  strncat( charo , " \"" , PATH_MAX -  strlen( charo ) -1 );
  strncat( charo , "advocgnu.plt"   , PATH_MAX -  strlen( charo ) -1 );
  strncat( charo , "\" " , PATH_MAX -  strlen( charo ) -1 );
  nsystem(  charo );
}

static void cb_Close3(Fl_Button*, void*) {
  win4->hide();
}

Fl_Double_Window *win5=(Fl_Double_Window *)0;

Fl_Browser *browser2=(Fl_Browser *)0;

static void cb_browser2(Fl_Browser*, void*) {
  printf( "Click\n" );


 input_var_macro_filename->value(  browser2->text(   browser2->value() ) ); 



  
  int fetchi;
  FILE *fp5;
  FILE *fp6;
  char fetchline[PATH_MAX];
  char fetchlinetmp[PATH_MAX];
  char filein[PATH_MAX];
  strncpy( filein,   input_var_macro_filename->value(), PATH_MAX );
  
  
    browser_macro_filecontent->clear();
    
    fp6 = fopen( filein , "rb");
    while( !feof(fp6) ) 
    {
          fgets(fetchlinetmp, PATH_MAX, fp6); 
          strncpy( fetchline, "" , PATH_MAX );
          for( fetchi = 0 ; ( fetchi <= strlen( fetchlinetmp ) ); fetchi++ )
            if ( fetchlinetmp[ fetchi ] != '\n' )
                 fetchline[fetchi]=fetchlinetmp[fetchi];
                 
                if ( !feof( fp6 ) ) 
                {
                    browser_macro_filecontent->add( fetchline );    
                }

     }
     fclose( fp6 );

  
 
 redraw();
}

Fl_Input *input_var_macro_filename=(Fl_Input *)0;

static void cb_Browse1(Fl_Button*, void*) {
  redraw();

  printf( "============================\n" );
  printf( "   MACRO                    \n" );
  printf( "============================\n" );
  
  nlsgrep( ".ocm" );
  nlsgrep( ".OCM" );
   
      
        browser2->clear();
	DIR *dirp;
	struct dirent *dp;
	dirp = opendir( "." );
	while  ((dp = readdir( dirp )) != NULL ) 
	{
		if (  strcmp( dp->d_name, "." ) != 0 )
		if (  strcmp( dp->d_name, ".." ) != 0 )
                {
                    if ( ( strstr( dp->d_name, ".OCM" ) != 0 )  || ( strstr( dp->d_name, ".ocm" ) != 0 )          ) 
                    {
			printf( "%s\n", dp->d_name );
 		        browser2->add(  dp->d_name  );
 		     }
                }
	}
	closedir( dirp );
}

static void cb_New(Fl_Button*, void*) {
  redraw();
  char charo[PATH_MAX];
  strncpy( charo, "", PATH_MAX );
  strncat( charo , " screen -d -m  flnotepad  " , PATH_MAX - strlen( charo ) -1 );
  strncat( charo , " " , PATH_MAX -  strlen( charo ) -1 );
  strncat( charo , " \"" , PATH_MAX -  strlen( charo ) -1 );
  strncat( charo , input_var_macro_filename->value() , PATH_MAX -  strlen( charo ) -1 );
  strncat( charo , "\" " , PATH_MAX -  strlen( charo ) -1 );
  nsystem(  charo );
}

static void cb_Use(Fl_Button*, void*) {
  redraw();

  printf( "============================\n" );
  printf( "   MACRO                    \n" );
  printf( "============================\n" );
  
  printf( "   FILECOPY                  \n" );
  printf( "   Source: %s                  \n" ,  input_var_macro_filename->value()   );
  printf( "   Destination: %s                  \n" ,  "macro.ocm"   );
  

  ncp( "macro.ocm" ,   input_var_macro_filename->value() );
  
  void_flfront_preview_browser1_refresh();
}

static void cb_View2(Fl_Button*, void*) {
  redraw();
  
  char charo[PATH_MAX];
  strncpy( charo, "", PATH_MAX );
  strncat( charo , " screen -d -m  flview   " , PATH_MAX - strlen( charo ) -1 );
  strncat( charo , " " , PATH_MAX -  strlen( charo ) -1 );
  strncat( charo , " \"" , PATH_MAX -  strlen( charo ) -1 );
  strncat( charo , input_var_macro_filename->value() , PATH_MAX -  strlen( charo ) -1 );
  strncat( charo , "\" " , PATH_MAX -  strlen( charo ) -1 );
  nsystem(  charo );
}

static void cb_Cat1(Fl_Button*, void*) {
  redraw();
  
  ncat( input_var_macro_filename->value() );
}

static void cb_Edit4(Fl_Button*, void*) {
  redraw();
  
  char charo[PATH_MAX];
  strncpy( charo, "", PATH_MAX );
  strncat( charo , " screen -d -m  fledit  " , PATH_MAX - strlen( charo ) -1 );
  strncat( charo , " " , PATH_MAX -  strlen( charo ) -1 );
  strncat( charo , " \"" , PATH_MAX -  strlen( charo ) -1 );
  strncat( charo , input_var_macro_filename->value() , PATH_MAX -  strlen( charo ) -1 );
  strncat( charo , "\" " , PATH_MAX -  strlen( charo ) -1 );
  nsystem(  charo );
}

static void cb_Browse2(Fl_Button*, void*) {
  redraw();

  printf( "============================\n" );
  printf( "   MACRO                    \n" );
  printf( "============================\n" );

  nlsgrep( ".ocl" );
 
  printf( "  ocl: improved OC format with more features (ocl: OC Language).\n" );
  printf( "  ocm: standard OC format.\n" );
     
        browser2->clear();
	DIR *dirp;
	struct dirent *dp;
	dirp = opendir( "." );
	while  ((dp = readdir( dirp )) != NULL ) 
	{
		if (  strcmp( dp->d_name, "." ) != 0 )
		if (  strcmp( dp->d_name, ".." ) != 0 )
                {
                    if ( strstr( dp->d_name, ".ocl" ) != 0 ) 
                    {
			printf( "%s\n", dp->d_name );
 		        browser2->add(  dp->d_name  );
 		     }
                }
	}
	closedir( dirp );
}

static void cb_Use1(Fl_Button*, void*) {
  redraw();

  printf( "============================\n" );
  printf( "   MACRO (OCL with SKIP)    \n" );
  printf( "============================\n" );
  
  printf( "   FILECOPY                  \n" );
  printf( "   Source: %s                  \n" ,  input_var_macro_filename->value()   );
  printf( "   Destination: %s                  \n" ,  "macro.ocm"   );
  
  ncpskip(  "macro.ocm" ,  input_var_macro_filename->value()  ,  "@&"  );
}

static void cb_Close4(Fl_Button*, void*) {
  win5->hide();
}

Fl_Browser *browser_macro_filecontent=(Fl_Browser *)0;

Fl_Double_Window *win6=(Fl_Double_Window *)0;

Fl_Input *input_var_set_condition=(Fl_Input *)0;

Fl_Input *input_var_calc_ymin=(Fl_Input *)0;

Fl_Input *input_var_calc_ymax=(Fl_Input *)0;

Fl_Input *input_var_calc_ystep=(Fl_Input *)0;

Fl_Input *input_var_calc_xmin=(Fl_Input *)0;

Fl_Input *input_var_calc_xmax=(Fl_Input *)0;

static void cb_Close5(Fl_Button*, void*) {
  win6->hide();
}

Fl_Double_Window *win7=(Fl_Double_Window *)0;

static void cb_ccode(Fl_Button*, void*) {
  nsystem( " screen -d -m fledit flopencalphad_def.h  " );
}

static void cb_Inipath(Fl_Button*, void*) {
  redraw();

  printf( "============================\n" );
  printf( "  CHANGE PATH               \n" );
  printf( "============================\n" );
  
  printf( "Change to...\n" );
  chdir( inipath );
  
  char mydirnow[2500];
  printf( "Current Directory: %s \n", getcwd( mydirnow, 2500 ) );
}

static void cb_Userpath(Fl_Button*, void*) {
  redraw();

  printf( "============================\n" );
  printf( "  CHANGE PATH               \n" );
  printf( "============================\n" );
  
  printf( "Change to...\n" );
  chdir( userpath );
  
  char mydirnow[2500];
  printf( "Current Directory: %s \n", getcwd( mydirnow, 2500 ) );
}

static void cb_chdir(Fl_Button*, void*) {
  redraw();

  printf( "============================\n" );
  printf( "  CHANGE PATH               \n" );
  printf( "============================\n" );
  
  printf( "Change to...\n" );
  chdir( dev_path_input1->value()  );
  
  char mydirnow[2500];
  printf( "Current Directory: %s \n", getcwd( mydirnow, 2500 ) );
}

Fl_Input *dev_path_input1=(Fl_Input *)0;

static void cb_Close6(Fl_Button*, void*) {
  win7->hide();
}

static void cb_VIM(Fl_Button*, void*) {
  redraw();
  
  nrun( " vim " ,  input_var_macro_filename->value() );
}

static void cb_VIM1(Fl_Button*, void*) {
  redraw();
  
  nrun( " vim " , "macro.ocm" );
}

static void cb_VIM2(Fl_Button*, void*) {
  redraw();
  
  nrun( " vim " , input_var_tdb_database->value(  ) );
}

static void cb_41(Fl_Button*, void*) {
  char mydirnow[2500];
  printf( "Current Directory: %s \n", getcwd( mydirnow, 2500 ) );



  redraw();
  nsystem(  "  screen -d  -m  gnuplot ocgnu.plt  " );
  
  
  // oc6 bug 
  // gnuplot ocgnu.plt  &;
}

static void cb_31(Fl_Button*, void*) {
  char mydirnow[2500];
  printf( "Current Directory: %s \n", getcwd( mydirnow, 2500 ) );



  redraw();
  nsystem(  "  screen -d  -m   xterm -e   oc   macro.ocm " );
  
  // oc6 bug 
  // gnuplot ocgnu.plt  &;
}

static void cb_GnuPlot(Fl_Button*, void*) {
  char mydirnow[2500];
  printf( "Current Directory: %s \n", getcwd( mydirnow, 2500 ) );



  redraw();
  
  printf(   "Export Result on Solaris/Unix/BSD Simulation Station\n" );
  
  nsystem(  " env DISPLAY=192.168.1.2:0    screen -d  -m  gnuplot ocgnu.plt  " );
  
  
  
  // oc6 bug 
  // gnuplot ocgnu.plt  &;
}

Fl_Double_Window* make_window() {
  { win1 = new Fl_Double_Window(785, 695, "FLOPENCALPHAD");
    { Fl_Box* o = new Fl_Box(25, 10, 730, 30, "FLTK OpenCalphad");
      o->box(FL_ENGRAVED_BOX);
      o->labeltype(FL_ENGRAVED_LABEL);
    } // Fl_Box* o
    { Fl_Group* o = new Fl_Group(25, 70, 350, 155, "1. Element");
      o->box(FL_DOWN_BOX);
      o->labeltype(FL_ENGRAVED_LABEL);
      { Fl_Button* o = new Fl_Button(35, 80, 45, 35, "Fe");
        o->labelfont(1);
        o->labelsize(12);
        o->callback((Fl_Callback*)cb_Fe);
      } // Fl_Button* o
      { Fl_Button* o = new Fl_Button(95, 80, 45, 35, "C");
        o->labelfont(1);
        o->labelsize(12);
        o->callback((Fl_Callback*)cb_C);
      } // Fl_Button* o
      { Fl_Button* o = new Fl_Button(155, 80, 45, 35, "Mn");
        o->labelfont(1);
        o->labelsize(12);
        o->callback((Fl_Callback*)cb_Mn);
      } // Fl_Button* o
      { Fl_Button* o = new Fl_Button(215, 80, 45, 35, "Al");
        o->labelfont(1);
        o->labelsize(12);
        o->callback((Fl_Callback*)cb_Al);
      } // Fl_Button* o
      { Fl_Button* o = new Fl_Button(275, 80, 45, 35, "Si");
        o->labelfont(1);
        o->labelsize(12);
        o->callback((Fl_Callback*)cb_Si);
      } // Fl_Button* o
      { Fl_Button* o = new Fl_Button(275, 170, 45, 35, "V");
        o->labelfont(1);
        o->labelsize(12);
        o->callback((Fl_Callback*)cb_V);
      } // Fl_Button* o
      { Fl_Button* o = new Fl_Button(154, 125, 45, 35, "Mo");
        o->labelfont(1);
        o->labelsize(12);
        o->callback((Fl_Callback*)cb_Mo);
      } // Fl_Button* o
      { Fl_Button* o = new Fl_Button(95, 125, 45, 35, "Cr");
        o->labelfont(1);
        o->labelsize(12);
        o->callback((Fl_Callback*)cb_Cr);
      } // Fl_Button* o
      { Fl_Button* o = new Fl_Button(95, 170, 45, 35, "Cu");
        o->labelfont(1);
        o->labelsize(12);
        o->callback((Fl_Callback*)cb_Cu);
      } // Fl_Button* o
      { Fl_Button* o = new Fl_Button(275, 125, 45, 35, "Nb");
        o->labelfont(1);
        o->labelsize(12);
        o->callback((Fl_Callback*)cb_Nb);
      } // Fl_Button* o
      { Fl_Button* o = new Fl_Button(35, 125, 45, 35, "Ni");
        o->labelfont(1);
        o->labelsize(12);
        o->callback((Fl_Callback*)cb_Ni);
      } // Fl_Button* o
      { Fl_Button* o = new Fl_Button(35, 170, 45, 35, "Ag");
        o->labelfont(1);
        o->labelsize(12);
        o->callback((Fl_Callback*)cb_Ag);
      } // Fl_Button* o
      { Fl_Button* o = new Fl_Button(215, 125, 45, 35, "Ti");
        o->labelfont(1);
        o->labelsize(12);
        o->callback((Fl_Callback*)cb_Ti);
      } // Fl_Button* o
      { Fl_Button* o = new Fl_Button(155, 170, 45, 35, "Zn");
        o->labelfont(1);
        o->labelsize(12);
        o->callback((Fl_Callback*)cb_Zn);
      } // Fl_Button* o
      { Fl_Button* o = new Fl_Button(215, 170, 45, 35, "W");
        o->labelfont(1);
        o->labelsize(12);
        o->callback((Fl_Callback*)cb_W);
      } // Fl_Button* o
      o->end();
    } // Fl_Group* o
    { Fl_Group* o = new Fl_Group(25, 260, 350, 150, "2. Compute");
      o->box(FL_DOWN_FRAME);
      o->labeltype(FL_ENGRAVED_LABEL);
      { output_system = new Fl_Output(90, 275, 205, 25, "System");
        output_system->color(FL_BACKGROUND_COLOR);
        output_system->value( "fe c " );
        var_calc_number_element = 2;
      } // Fl_Output* output_system
      { Fl_Button* o = new Fl_Button(300, 275, 30, 25, "CA");
        o->labelfont(1);
        o->labelsize(12);
        o->callback((Fl_Callback*)cb_CA);
      } // Fl_Button* o
      { input_var_calc_x = new Fl_Input(90, 305, 205, 25, "X var.");
        input_var_calc_x->value( "c" );
      } // Fl_Input* input_var_calc_x
      { Fl_Button* o = new Fl_Button(300, 305, 30, 25, "CA");
        o->labelfont(1);
        o->labelsize(12);
        o->callback((Fl_Callback*)cb_CA1);
      } // Fl_Button* o
      { input_var_calc_y = new Fl_Input(90, 335, 205, 25, "Y var.");
        input_var_calc_y->value( "T" );
      } // Fl_Input* input_var_calc_y
      { Fl_Button* o = new Fl_Button(300, 335, 30, 25, "CA");
        o->labelfont(1);
        o->labelsize(12);
        o->callback((Fl_Callback*)cb_CA2);
      } // Fl_Button* o
      { input_var_tdb_database = new Fl_Input(90, 365, 205, 25, "TDB");
        input_var_tdb_database->value( "steel1.tdb" );
      } // Fl_Input* input_var_tdb_database
      { Fl_Button* o = new Fl_Button(300, 365, 30, 25, "CA");
        o->labelfont(1);
        o->labelsize(12);
        o->callback((Fl_Callback*)cb_CA3);
      } // Fl_Button* o
      o->end();
    } // Fl_Group* o
    { Fl_Button* o = new Fl_Button(690, 650, 65, 30, "&Quit");
      o->callback((Fl_Callback*)cb_Quit);
    } // Fl_Button* o
    { Fl_Group* o = new Fl_Group(25, 450, 350, 170, "3. OCM GNUPlot");
      o->box(FL_DOWN_BOX);
      o->labeltype(FL_ENGRAVED_LABEL);
      { Fl_Button* o = new Fl_Button(130, 540, 145, 25, "[&3] Compute!");
        o->callback((Fl_Callback*)cb_3);
      } // Fl_Button* o
      { Fl_Button* o = new Fl_Button(130, 505, 145, 25, "[&2] Edit!");
        o->callback((Fl_Callback*)cb_2);
      } // Fl_Button* o
      { Fl_Button* o = new Fl_Button(130, 470, 145, 25, "[&1] Create!");
        o->callback((Fl_Callback*)cb_1);
      } // Fl_Button* o
      { Fl_Button* o = new Fl_Button(130, 575, 145, 25, "[&4] Plot!");
        o->callback((Fl_Callback*)cb_4);
      } // Fl_Button* o
      o->end();
    } // Fl_Group* o
    { Fl_Button* o = new Fl_Button(600, 650, 80, 30, "&Option");
      o->callback((Fl_Callback*)cb_Option);
    } // Fl_Button* o
    { Fl_Group* o = new Fl_Group(385, 70, 370, 550, "Preview");
      o->box(FL_DOWN_BOX);
      o->labeltype(FL_ENGRAVED_LABEL);
      { flfront_preview_browser1 = new Fl_Browser(395, 80, 350, 505);
        flfront_preview_browser1->type( FL_HOLD_BROWSER );
      } // Fl_Browser* flfront_preview_browser1
      { Fl_Button* o = new Fl_Button(395, 590, 130, 25, "Refresh Preview");
        o->callback((Fl_Callback*)cb_Refresh);
      } // Fl_Button* o
      { Fl_Button* o = new Fl_Button(530, 590, 60, 25, "Edit");
        o->callback((Fl_Callback*)cb_Edit);
      } // Fl_Button* o
      o->end();
      Fl_Group::current()->resizable(o);
    } // Fl_Group* o
    { Fl_Button* o = new Fl_Button(25, 650, 80, 30, "&Database");
      o->callback((Fl_Callback*)cb_Database);
    } // Fl_Button* o
    { Fl_Button* o = new Fl_Button(205, 650, 80, 30, "&Plot");
      o->callback((Fl_Callback*)cb_Plot);
    } // Fl_Button* o
    { Fl_Button* o = new Fl_Button(295, 650, 80, 30, "&Macro");
      o->callback((Fl_Callback*)cb_Macro);
    } // Fl_Button* o
    { Fl_Button* o = new Fl_Button(115, 650, 80, 30, "&Condition");
      o->callback((Fl_Callback*)cb_Condition);
    } // Fl_Button* o
    { Fl_Button* o = new Fl_Button(475, 650, 115, 30, "Help");
      o->labelfont(1);
      o->callback((Fl_Callback*)cb_Help);
    } // Fl_Button* o
    { Fl_Button* o = new Fl_Button(385, 650, 80, 30, "Periodic");
      o->callback((Fl_Callback*)cb_Periodic);
    } // Fl_Button* o
    win1->end();
  } // Fl_Double_Window* win1
  { win2 = new Fl_Double_Window(880, 370, "Database");
    { Fl_Box* o = new Fl_Box(15, 25, 850, 35, "FLTK OpenCalphad -- Database");
      o->box(FL_ENGRAVED_BOX);
      o->labeltype(FL_ENGRAVED_LABEL);
    } // Fl_Box* o
    { Fl_Group* o = new Fl_Group(15, 95, 390, 220, "Browser");
      o->box(FL_DOWN_BOX);
      o->labeltype(FL_ENGRAVED_LABEL);
      { browser1 = new Fl_Browser(25, 110, 370, 155);
        browser1->callback((Fl_Callback*)cb_browser1);
        Fl_Group::current()->resizable(browser1);
        browser1->type(FL_HOLD_BROWSER);
      } // Fl_Browser* browser1
      { input_notes = new Fl_Input(75, 275, 165, 25, "Notes");
        input_notes->tooltip("Demo");
        input_notes->color((Fl_Color)55);
      } // Fl_Input* input_notes
      { Fl_Button* o = new Fl_Button(245, 275, 45, 25, "&Add");
        o->callback((Fl_Callback*)cb_Add);
      } // Fl_Button* o
      o->end();
    } // Fl_Group* o
    { Fl_Group* o = new Fl_Group(415, 195, 450, 120, "Database");
      o->box(FL_DOWN_BOX);
      o->labeltype(FL_ENGRAVED_LABEL);
      { Fl_Button* o = new Fl_Button(525, 275, 50, 25, "&Edit");
        o->callback((Fl_Callback*)cb_Edit1);
      } // Fl_Button* o
      { Fl_Button* o = new Fl_Button(435, 275, 70, 25, "ls tdb");
        o->callback((Fl_Callback*)cb_ls);
      } // Fl_Button* o
      { Fl_Button* o = new Fl_Button(635, 215, 75, 25, "Elemen&t");
        o->callback((Fl_Callback*)cb_Elemen);
      } // Fl_Button* o
      { Fl_Button* o = new Fl_Button(435, 215, 70, 25, "Browse");
        o->callback((Fl_Callback*)cb_Browse);
      } // Fl_Button* o
      { Fl_Button* o = new Fl_Button(635, 245, 75, 25, "&Species");
        o->callback((Fl_Callback*)cb_Species);
      } // Fl_Button* o
      { Fl_Button* o = new Fl_Button(435, 245, 70, 25, "Path");
        o->callback((Fl_Callback*)cb_Path);
      } // Fl_Button* o
      { Fl_Button* o = new Fl_Button(525, 245, 50, 25, "&View");
        o->callback((Fl_Callback*)cb_View);
      } // Fl_Button* o
      { Fl_Button* o = new Fl_Button(715, 215, 75, 25, "&Phase");
        o->callback((Fl_Callback*)cb_Phase);
      } // Fl_Button* o
      { Fl_Button* o = new Fl_Button(715, 245, 75, 25, "&Fun");
        o->callback((Fl_Callback*)cb_Fun);
      } // Fl_Button* o
      { Fl_Button* o = new Fl_Button(635, 275, 75, 25, "&Function");
        o->callback((Fl_Callback*)cb_Function);
      } // Fl_Button* o
      { Fl_Button* o = new Fl_Button(525, 215, 50, 25, "&Cat");
        o->callback((Fl_Callback*)cb_Cat);
      } // Fl_Button* o
      o->end();
    } // Fl_Group* o
    { Fl_Button* o = new Fl_Button(755, 335, 110, 25, "Close Frame");
      o->callback((Fl_Callback*)cb_Close);
    } // Fl_Button* o
    { Fl_Group* o = new Fl_Group(415, 95, 450, 80, "Create");
      o->box(FL_DOWN_BOX);
      o->labeltype(FL_ENGRAVED_LABEL);
      { Fl_Button* o = new Fl_Button(430, 105, 75, 25, "Fetch!");
        o->callback((Fl_Callback*)cb_Fetch);
      } // Fl_Button* o
      { Fl_Button* o = new Fl_Button(430, 135, 75, 30, "dos2unix");
        o->callback((Fl_Callback*)cb_dos2unix);
      } // Fl_Button* o
      { form_database_fetch_url = new Fl_Input(540, 105, 315, 25, "Url");
      } // Fl_Input* form_database_fetch_url
      o->end();
    } // Fl_Group* o
    win2->end();
    win2->resizable(win2);
  } // Fl_Double_Window* win2
  { win3 = new Fl_Double_Window(405, 410, "Option");
    { Fl_Box* o = new Fl_Box(15, 15, 380, 35, "FLTK OpenCalphad -- Option");
      o->box(FL_ENGRAVED_BOX);
      o->labeltype(FL_ENGRAVED_LABEL);
    } // Fl_Box* o
    { Fl_Group* o = new Fl_Group(15, 95, 375, 80, "User system call");
      o->box(FL_DOWN_BOX);
      o->labeltype(FL_ENGRAVED_LABEL);
      { Fl_Button* o = new Fl_Button(25, 105, 55, 25, "&ls");
        o->callback((Fl_Callback*)cb_ls1);
      } // Fl_Button* o
      { Fl_Button* o = new Fl_Button(85, 105, 50, 25, "&xterm");
        o->callback((Fl_Callback*)cb_xterm);
      } // Fl_Button* o
      { Fl_Button* o = new Fl_Button(275, 140, 50, 25, "&fl48");
        o->callback((Fl_Callback*)cb_fl48);
      } // Fl_Button* o
      { Fl_Button* o = new Fl_Button(275, 105, 50, 25, "&fledit");
        o->callback((Fl_Callback*)cb_fledit);
      } // Fl_Button* o
      { Fl_Button* o = new Fl_Button(25, 140, 55, 25, "Path");
        o->callback((Fl_Callback*)cb_Path1);
      } // Fl_Button* o
      { Fl_Button* o = new Fl_Button(85, 140, 50, 25, "rox");
        o->callback((Fl_Callback*)cb_rox);
      } // Fl_Button* o
      { Fl_Button* o = new Fl_Button(330, 140, 50, 25, "x48");
        o->callback((Fl_Callback*)cb_x48);
      } // Fl_Button* o
      { Fl_Button* o = new Fl_Button(330, 105, 50, 25, "&xlock");
        o->callback((Fl_Callback*)cb_xlock);
      } // Fl_Button* o
      { Fl_Button* o = new Fl_Button(195, 140, 75, 25, "Keyboard");
        o->callback((Fl_Callback*)cb_Keyboard);
      } // Fl_Button* o
      { Fl_Button* o = new Fl_Button(195, 105, 75, 25, "Monitor");
        o->callback((Fl_Callback*)cb_Monitor);
      } // Fl_Button* o
      { Fl_Button* o = new Fl_Button(140, 140, 50, 25, "flm");
        o->callback((Fl_Callback*)cb_flm);
      } // Fl_Button* o
      { Fl_Button* o = new Fl_Button(140, 105, 50, 25, "flcalc");
        o->callback((Fl_Callback*)cb_flcalc);
      } // Fl_Button* o
      o->end();
    } // Fl_Group* o
    { Fl_Button* o = new Fl_Button(275, 355, 115, 30, "&Close Frame");
      o->callback((Fl_Callback*)cb_Close1);
    } // Fl_Button* o
    { Fl_Group* o = new Fl_Group(15, 225, 375, 70, "Console output");
      o->box(FL_DOWN_BOX);
      o->labeltype(FL_ENGRAVED_LABEL);
      { checkbutton_single_console = new Fl_Check_Button(35, 235, 25, 25, "Single console output");
        checkbutton_single_console->down_box(FL_DOWN_BOX);
      } // Fl_Check_Button* checkbutton_single_console
      { checkbutton_xterm_console = new Fl_Check_Button(35, 265, 25, 25, "xterm console output");
        checkbutton_xterm_console->down_box(FL_DOWN_BOX);
        checkbutton_xterm_console->value( 1 );
      } // Fl_Check_Button* checkbutton_xterm_console
      o->end();
    } // Fl_Group* o
    { Fl_Button* o = new Fl_Button(160, 355, 110, 30, "&Development");
      o->callback((Fl_Callback*)cb_Development);
    } // Fl_Button* o
    { Fl_Button* o = new Fl_Button(15, 355, 140, 30, "&Web");
      o->callback((Fl_Callback*)cb_Web);
    } // Fl_Button* o
    { Fl_Button* o = new Fl_Button(15, 312, 375, 30, "Development and Support");
      o->labelfont(1);
      o->callback((Fl_Callback*)cb_Development1);
    } // Fl_Button* o
    win3->end();
    win3->resizable(win3);
  } // Fl_Double_Window* win3
  { win4 = new Fl_Double_Window(830, 485, "Graphics Plot");
    { Fl_Box* o = new Fl_Box(15, 25, 800, 35, "FLTK OpenCalphad -- Plot");
      o->box(FL_ENGRAVED_BOX);
      o->labeltype(FL_ENGRAVED_LABEL);
    } // Fl_Box* o
    { Fl_Group* o = new Fl_Group(15, 100, 850, 340, "Advanced Plot");
      o->box(FL_DOWN_BOX);
      o->labeltype(FL_ENGRAVED_LABEL);
      { Fl_Button* o = new Fl_Button(450, 110, 130, 25, "Close all &plots");
        o->callback((Fl_Callback*)cb_Close2);
      } // Fl_Button* o
      { Fl_Button* o = new Fl_Button(585, 110, 130, 25, "Clear GnuPlot plt");
        o->callback((Fl_Callback*)cb_Clear);
      } // Fl_Button* o
      { Fl_Button* o = new Fl_Button(25, 110, 130, 25, "View Plot File");
        o->callback((Fl_Callback*)cb_View1);
      } // Fl_Button* o
      { Fl_Button* o = new Fl_Button(165, 110, 130, 25, "Edit Plot File");
        o->callback((Fl_Callback*)cb_Edit2);
      } // Fl_Button* o
      { Fl_Button* o = new Fl_Button(310, 110, 130, 25, "Plot!");
        o->callback((Fl_Callback*)cb_Plot1);
      } // Fl_Button* o
      { Fl_Button* o = new Fl_Button(25, 145, 130, 25, "Refresh Preview");
        o->callback((Fl_Callback*)cb_Refresh1);
      } // Fl_Button* o
      { flplot_preview_browser = new Fl_Browser(25, 175, 780, 250);
        flplot_preview_browser->type( FL_HOLD_BROWSER );
      } // Fl_Browser* flplot_preview_browser
      { Fl_Button* o = new Fl_Button(165, 145, 190, 25, "Automatic Term Driver");
        o->callback((Fl_Callback*)cb_Automatic);
      } // Fl_Button* o
      { plot_gnuplot_term_drivername = new Fl_Input(445, 145, 130, 25, "Term Driver");
        plot_gnuplot_term_drivername->value( "x11" );
      } // Fl_Input* plot_gnuplot_term_drivername
      { plot_gnuplot_term_driver_force = new Fl_Check_Button(605, 145, 25, 25, "Active User Driver");
        plot_gnuplot_term_driver_force->down_box(FL_DOWN_BOX);
      } // Fl_Check_Button* plot_gnuplot_term_driver_force
      { Fl_Button* o = new Fl_Button(575, 145, 25, 25, "&?");
        o->callback((Fl_Callback*)cb_);
      } // Fl_Button* o
      { Fl_Button* o = new Fl_Button(720, 110, 65, 25, "Edit Adv.");
        o->callback((Fl_Callback*)cb_Edit3);
      } // Fl_Button* o
      o->end();
      Fl_Group::current()->resizable(o);
    } // Fl_Group* o
    { Fl_Button* o = new Fl_Button(705, 450, 110, 25, "Close Frame");
      o->callback((Fl_Callback*)cb_Close3);
    } // Fl_Button* o
    win4->end();
  } // Fl_Double_Window* win4
  { win5 = new Fl_Double_Window(850, 485, "Macro");
    { Fl_Box* o = new Fl_Box(15, 15, 820, 35, "FLTK OpenCalphad -- Macro");
      o->box(FL_ENGRAVED_BOX);
      o->labeltype(FL_ENGRAVED_LABEL);
    } // Fl_Box* o
    { Fl_Group* o = new Fl_Group(15, 205, 370, 240, "Browser");
      o->box(FL_DOWN_BOX);
      o->labeltype(FL_ENGRAVED_LABEL);
      { browser2 = new Fl_Browser(35, 245, 330, 195);
        browser2->callback((Fl_Callback*)cb_browser2);
        browser2->type(FL_HOLD_BROWSER);
      } // Fl_Browser* browser2
      { input_var_macro_filename = new Fl_Input(100, 215, 265, 25, "Filename");
      } // Fl_Input* input_var_macro_filename
      o->end();
    } // Fl_Group* o
    { Fl_Group* o = new Fl_Group(15, 85, 370, 95, "Macro");
      o->box(FL_DOWN_BOX);
      o->labeltype(FL_ENGRAVED_LABEL);
      { Fl_Button* o = new Fl_Button(25, 105, 95, 25, "Browse");
        o->callback((Fl_Callback*)cb_Browse1);
      } // Fl_Button* o
      { Fl_Button* o = new Fl_Button(265, 135, 50, 25, "&New");
        o->callback((Fl_Callback*)cb_New);
      } // Fl_Button* o
      { Fl_Button* o = new Fl_Button(25, 135, 95, 25, "&Use macro");
        o->callback((Fl_Callback*)cb_Use);
      } // Fl_Button* o
      { Fl_Button* o = new Fl_Button(320, 105, 50, 25, "&View");
        o->callback((Fl_Callback*)cb_View2);
      } // Fl_Button* o
      { Fl_Button* o = new Fl_Button(265, 105, 50, 25, "&Cat");
        o->callback((Fl_Callback*)cb_Cat1);
      } // Fl_Button* o
      { Fl_Button* o = new Fl_Button(320, 135, 50, 25, "&Edit");
        o->callback((Fl_Callback*)cb_Edit4);
      } // Fl_Button* o
      { Fl_Button* o = new Fl_Button(145, 105, 95, 25, "Browse ocl");
        o->callback((Fl_Callback*)cb_Browse2);
      } // Fl_Button* o
      { Fl_Button* o = new Fl_Button(145, 135, 95, 25, "&Use ocl");
        o->callback((Fl_Callback*)cb_Use1);
      } // Fl_Button* o
      o->end();
    } // Fl_Group* o
    { Fl_Button* o = new Fl_Button(725, 450, 110, 25, "Close Frame");
      o->callback((Fl_Callback*)cb_Close4);
    } // Fl_Button* o
    { Fl_Group* o = new Fl_Group(405, 80, 430, 365, "File description");
      o->box(FL_DOWN_BOX);
      o->labeltype(FL_ENGRAVED_LABEL);
      { browser_macro_filecontent = new Fl_Browser(410, 85, 420, 355);
        browser_macro_filecontent->type(FL_HOLD_BROWSER);
      } // Fl_Browser* browser_macro_filecontent
      o->end();
      Fl_Group::current()->resizable(o);
    } // Fl_Group* o
    win5->end();
  } // Fl_Double_Window* win5
  { win6 = new Fl_Double_Window(655, 465, "Condition");
    { Fl_Box* o = new Fl_Box(15, 15, 625, 30, "FLTK OpenCalphad -- Condition");
      o->box(FL_ENGRAVED_BOX);
      o->labeltype(FL_ENGRAVED_LABEL);
    } // Fl_Box* o
    { Fl_Group* o = new Fl_Group(15, 105, 625, 315, "Set-Condition (Create)");
      o->box(FL_DOWN_BOX);
      o->labeltype(FL_ENGRAVED_LABEL);
      { input_var_set_condition = new Fl_Input(90, 135, 535, 25, "set-con");
        input_var_set_condition->value( "t=1000 p=1e5 n=1 x(c)=0.2 " );
      } // Fl_Input* input_var_set_condition
      { input_var_calc_ymin = new Fl_Input(90, 280, 535, 25, "Ymin");
        input_var_calc_ymin->value( "500" );
      } // Fl_Input* input_var_calc_ymin
      { input_var_calc_ymax = new Fl_Input(90, 310, 535, 25, "Ymax");
        input_var_calc_ymax->value( "2000" );
      } // Fl_Input* input_var_calc_ymax
      { input_var_calc_ystep = new Fl_Input(90, 340, 535, 25, "Ystep");
        input_var_calc_ystep->value( "10" );
      } // Fl_Input* input_var_calc_ystep
      { input_var_calc_xmin = new Fl_Input(90, 195, 535, 25, "Xmin");
        input_var_calc_xmin->value( "0" );
      } // Fl_Input* input_var_calc_xmin
      { input_var_calc_xmax = new Fl_Input(90, 225, 535, 25, "Xmax");
        input_var_calc_xmax->value( "0.25" );
      } // Fl_Input* input_var_calc_xmax
      o->end();
      Fl_Group::current()->resizable(o);
    } // Fl_Group* o
    { Fl_Button* o = new Fl_Button(530, 430, 110, 25, "Close Frame");
      o->callback((Fl_Callback*)cb_Close5);
    } // Fl_Button* o
    win6->end();
  } // Fl_Double_Window* win6
  { win7 = new Fl_Double_Window(395, 480, "Development");
    { Fl_Box* o = new Fl_Box(10, 15, 380, 35, "FLTK OpenCalphad -- Development");
      o->box(FL_ENGRAVED_BOX);
      o->labeltype(FL_ENGRAVED_LABEL);
    } // Fl_Box* o
    { Fl_Group* o = new Fl_Group(10, 90, 375, 100, "Path Binary");
      o->box(FL_DOWN_BOX);
      o->labeltype(FL_ENGRAVED_LABEL);
      { Fl_Button* o = new Fl_Button(20, 105, 100, 25, "ccode");
        o->callback((Fl_Callback*)cb_ccode);
      } // Fl_Button* o
      { Fl_Button* o = new Fl_Button(130, 105, 100, 25, "Inipath");
        o->callback((Fl_Callback*)cb_Inipath);
      } // Fl_Button* o
      { Fl_Button* o = new Fl_Button(245, 105, 115, 25, "Userpath");
        o->callback((Fl_Callback*)cb_Userpath);
      } // Fl_Button* o
      { Fl_Button* o = new Fl_Button(245, 140, 115, 25, "chdir()");
        o->callback((Fl_Callback*)cb_chdir);
      } // Fl_Button* o
      { dev_path_input1 = new Fl_Input(60, 140, 170, 25, "Path: ");
      } // Fl_Input* dev_path_input1
      o->end();
    } // Fl_Group* o
    { Fl_Button* o = new Fl_Button(275, 440, 110, 30, "&Close Frame");
      o->callback((Fl_Callback*)cb_Close6);
    } // Fl_Button* o
    { Fl_Group* o = new Fl_Group(10, 275, 375, 155, "Development");
      o->box(FL_DOWN_BOX);
      o->labeltype(FL_ENGRAVED_LABEL);
      { Fl_Button* o = new Fl_Button(145, 290, 90, 25, "VIM &Macro");
        o->callback((Fl_Callback*)cb_VIM);
      } // Fl_Button* o
      { Fl_Button* o = new Fl_Button(40, 290, 90, 25, "&VIM SIM");
        o->callback((Fl_Callback*)cb_VIM1);
      } // Fl_Button* o
      { Fl_Button* o = new Fl_Button(250, 290, 110, 25, "VIM &Database");
        o->callback((Fl_Callback*)cb_VIM2);
      } // Fl_Button* o
      { Fl_Button* o = new Fl_Button(215, 325, 145, 25, "[&4] Plot!");
        o->callback((Fl_Callback*)cb_41);
      } // Fl_Button* o
      { Fl_Button* o = new Fl_Button(40, 325, 150, 25, "[&3] Compute!");
        o->callback((Fl_Callback*)cb_31);
      } // Fl_Button* o
      { Fl_Button* o = new Fl_Button(40, 360, 320, 25, "GnuPlot XForward/Unix");
        o->callback((Fl_Callback*)cb_GnuPlot);
      } // Fl_Button* o
      o->end();
    } // Fl_Group* o
    win7->end();
    win7->resizable(win7);
  } // Fl_Double_Window* win7
  return win7;
}

void addkeypress( int keypress ) {
  //char str[PATH_MAX]; 
     //snprintf( str , sizeof( str ), "%s%c", inputline->value() , keypress ); 
     //inputline->value( str  );
}

int main( int argc, char *argv[] ) {
  char mydirnow[2500];  
    strncpy( inipath , getcwd( mydirnow, 2500 ), 2500 );
    
    // working dir 
    if ( argc == 2)
    if ( strcmp( argv[1] , "" ) !=  0 )
    {
            chdir( argv[ 1 ] );
    }
    printf( "Current Directory: %s \n", getcwd( mydirnow, 2500 ) );
    strncpy( userpath , getcwd( mydirnow, 2500 ), 2500 );
  
  
    // vars
    strncpy( var_system, "fe c ", PATH_MAX);
    //output_system->value( var_system );  <- seg.
  
    make_window();
    win1->show();
  
    Fl::run();
}

void void_flfront_preview_browser1_refresh() {
  flfront_preview_browser1->clear();    
    
    char filein[PATH_MAX];
    strncpy( filein, "macro.ocm"  , PATH_MAX );
         
    
    int fetchi;
    FILE *fp5;
    FILE *fp6;
    char fetchline[PATH_MAX];
    char fetchlinetmp[PATH_MAX];
    
    if ( fexist( filein ) == 1 )
    {
      fp6 = fopen( filein , "rb");
      while( !feof(fp6) ) 
      {
            fgets(fetchlinetmp, PATH_MAX, fp6); 
            strncpy( fetchline, "" , PATH_MAX );
            for( fetchi = 0 ; ( fetchi <= strlen( fetchlinetmp ) ); fetchi++ )
              if ( fetchlinetmp[ fetchi ] != '\n' )
                fetchline[fetchi]=fetchlinetmp[fetchi];
                
            if ( !feof(fp6)  )
                flfront_preview_browser1->add( fetchline );    
  
       }
       fclose( fp6 );
   }
}

void void_plot_preview_plotfile() {
  flplot_preview_browser->clear();    
    
    char filein[PATH_MAX];
    strncpy( filein, "ocgnu.plt"  , PATH_MAX );
         
    
    int fetchi;
    FILE *fp5;
    FILE *fp6;
    char fetchline[PATH_MAX];
    char fetchlinetmp[PATH_MAX];
    
    if ( fexist( filein ) == 1 )
    {
      fp6 = fopen( filein , "rb");
      while( !feof(fp6) ) 
      {
            fgets(fetchlinetmp, PATH_MAX, fp6); 
            strncpy( fetchline, "" , PATH_MAX );
            for( fetchi = 0 ; ( fetchi <= strlen( fetchlinetmp ) ); fetchi++ )
              if ( fetchlinetmp[ fetchi ] != '\n' )
                fetchline[fetchi]=fetchlinetmp[fetchi];
                
            if ( !feof(fp6)  )
                flplot_preview_browser->add( fetchline );    
  
       }
       fclose( fp6 );
   }
}

int ncopysetterm( const char *foofileout,  const  char *foofilein, const  char *fooxdriver  ) {
  // foofileout foofilein    
   // *fooxdriver
    printf(" Copy with updating the plot code\n" );
    
    
    int i;
    FILE *fp;
    FILE *fp1;
    FILE *fp2;
    
    char strline[PATH_MAX];
    char strlinein[PATH_MAX];
  
    printf(" Path: %s\n", getcwd( strline, PATH_MAX ) );
    printf(" Source: %s\n", foofilein );
    printf(" Target: %s\n", foofileout );
   
    if ( fexist( foofilein ) == 1 )
    {
    
        printf(" Source: %s\n", foofilein );
        printf(" Target: %s\n", foofileout );
  
    
      fp = fopen( foofilein , "rb");
      fp2 = fopen( foofileout , "wb");
  
      while( !feof(fp) )
      {
  	    fgets( strlinein , PATH_MAX, fp);
  	    //strncpy( strline , "" , PATH_MAX );
  	    
  	    if ( strlinein[ 0 ] == '#' )  
  	    {
  	    	    printf( "%s", strlinein ); 
    	            fputs( strlinein , fp2  );
  	    }
  	    else if ( strstr( strlinein, "set term" ) != 0 ) 
  	    {
   		    printf( "==> Set Term %s\n", strlinein ); 
   		 
   		    if ( strcmp( plot_gnuplot_term_drivername->value(),    "x11" ) == 0 ) 
        		          fputs( "set termin x11 \n", fp2 );
        		    else if ( strcmp( plot_gnuplot_term_drivername->value(),    "wxt" ) == 0 ) 
        		          fputs( "set termin wxt \n", fp2 );
        		    else if ( strcmp( plot_gnuplot_term_drivername->value() ,    "qt" ) == 0 ) 
        		          fputs( "set termin qt \n", fp2 );      		          
   		    else 
   		    {
       		          fputs( "\n", fp2 );
   		          fputs( fooxdriver , fp2 );
          		  fputs( "\n", fp2 );
   		    }		              
              }
  	    else 
  	    {
  	    	    printf( "%s", strlinein ); 
    	            fputs( strlinein , fp2  );
  	    }
       }
       
       fclose( fp );
       fclose( fp2 );
     }
}
