# data file for the Fltk User Interface Designer (fluid)
version 1.0304
header_name {.h}
code_name {.cxx}
decl {\#include <stdio.h>} {private local
}

decl {\#include <stdlib.h>} {private local
}

decl {\#include "ccode.h"} {private local
}

decl {int plot_adv_computer_skipint_int = 0;} {private local
}

decl {\#include <FL/Fl_Output.H>} {private local
}

decl {\#include "flopencalphad_def.h"} {private local
}

Function {redraw()} {} {
  code {printf("> Procedure redraw!\\n");


strncpy( var_calc_x ,  input_var_calc_x->value() , PATH_MAX );
strncpy( var_calc_y ,  input_var_calc_y->value() , PATH_MAX );
// strncpy( var_plot_x ,  input_var_plot_x->value() , PATH_MAX );
// strncpy( var_plot_y ,  input_var_plot_y->value() , PATH_MAX );
strncpy( var_tdb_database, input_var_tdb_database->value(), PATH_MAX );  

strncpy( var_system ,      output_system->value() , PATH_MAX );
// output_system->value( "fe c" );
// output_system->value( var_system  );

// input_var_set_condition->value( "t=1000 p=1e5 n=1 x(c)=0.2 " );} {}
  code {printf("Hello, World!\\n");} {}
}

Function {make_window()} {open
} {
  Fl_Window win1 {
    label FLOPENCALPHAD open
    xywh {130 221 785 695} type Double resizable visible
  } {
    Fl_Box {} {
      label {FLTK OpenCalphad}
      xywh {25 10 730 30} box ENGRAVED_BOX labeltype ENGRAVED_LABEL
    }
    Fl_Group {} {
      label {1. Element} open
      xywh {25 70 350 155} box DOWN_BOX labeltype ENGRAVED_LABEL
    } {
      Fl_Button {} {
        label Fe
        callback {printf( " Fe Element Selected\\n" );

// printf( "%s\\n" ,   inputline->value( browser1->text(  browser1->value() )  ) ) ;

  strncat( var_system , "fe" , PATH_MAX - strlen( var_system ) -1 );
  strncat( var_system , " " ,  PATH_MAX -  strlen( var_system ) -1 );
  output_system->value( var_system );
  
  var_calc_number_element++;
  
  add_new_element( "fe" );
  
  redraw();}
        xywh {35 80 45 35} labelfont 1 labelsize 12
      }
      Fl_Button {} {
        label C
        callback {printf( " C Selected\\n" );



  strncat( var_system , "c" , PATH_MAX - strlen( var_system ) -1 );
  strncat( var_system , " " , PATH_MAX -  strlen( var_system ) -1 );
    output_system->value( var_system );


  var_calc_number_element++;

  add_new_element( "c" );  


redraw();}
        xywh {95 80 45 35} labelfont 1 labelsize 12
      }
      Fl_Button {} {
        label Mn
        callback {printf( " Mn Selected\\n" );


  strncat( var_system , "mn" , PATH_MAX - strlen( var_system ) -1 );
  strncat( var_system , " " , PATH_MAX -  strlen( var_system ) -1 );
    output_system->value( var_system );
    
  var_calc_number_element++;
  

  add_new_element( "mn" );  


redraw();}
        xywh {155 80 45 35} labelfont 1 labelsize 12
      }
      Fl_Button {} {
        label Al
        callback {printf( " Al Selected\\n" );


  strncat( var_system , "al" , PATH_MAX - strlen( var_system ) -1 );
  strncat( var_system , " " , PATH_MAX -  strlen( var_system ) -1 );
    output_system->value( var_system );  

  var_calc_number_element++;
  
  
  add_new_element( "al" );  


  

redraw();}
        xywh {215 80 45 35} labelfont 1 labelsize 12
      }
      Fl_Button {} {
        label Si
        callback {// printf( "%s\\n" ,   inputline->value( browser1->text(  browser1->value() )  ) ) ;


printf( " Si Selected\\n" );

  strncat( var_system , "si" , PATH_MAX - strlen( var_system ) -1 );
  strncat( var_system , " " , PATH_MAX -  strlen( var_system ) -1 );
    output_system->value( var_system );

  var_calc_number_element++;
  

  add_new_element( "si" );  



redraw();}
        xywh {275 80 45 35} labelfont 1 labelsize 12
      }
      Fl_Button {} {
        label V
        callback {printf( " V Selected\\n" );


  strncat( var_system , "v" , PATH_MAX - strlen( var_system ) -1 );
  strncat( var_system , " " , PATH_MAX -  strlen( var_system ) -1 );
    output_system->value( var_system );

  var_calc_number_element++;
  
  add_new_element( "v" );  



redraw();}
        xywh {275 170 45 35} labelfont 1 labelsize 12
      }
      Fl_Button {} {
        label Mo
        callback {printf( " Mo Selected\\n" );

  strncat( var_system , "mo" , PATH_MAX - strlen( var_system ) -1 );
  strncat( var_system , " " , PATH_MAX -  strlen( var_system ) -1 );
    output_system->value( var_system );

  var_calc_number_element++;
  

  add_new_element( "mo" );  


redraw();}
        xywh {154 125 45 35} labelfont 1 labelsize 12
      }
      Fl_Button {} {
        label Cr
        callback {printf( " Cr Selected\\n" );


  strncat( var_system , "cr" , PATH_MAX - strlen( var_system ) -1 );
  strncat( var_system , " " , PATH_MAX -  strlen( var_system ) -1 );
    output_system->value( var_system );

  var_calc_number_element++;
  
  add_new_element( "cr" );  



redraw();}
        xywh {95 125 45 35} labelfont 1 labelsize 12
      }
      Fl_Button {} {
        label Cu
        callback {printf( " Cu Selected\\n" );

  strncat( var_system , "cu" , PATH_MAX - strlen( var_system ) -1 );
  strncat( var_system , " " , PATH_MAX -  strlen( var_system ) -1 );
    output_system->value( var_system );

  var_calc_number_element++;
  

  add_new_element( "cu" );  



redraw();}
        xywh {95 170 45 35} labelfont 1 labelsize 12
      }
      Fl_Button {} {
        label Nb
        callback {printf( " nb Selected\\n" );


  strncat( var_system , "nb" , PATH_MAX - strlen( var_system ) -1 );
  strncat( var_system , " " , PATH_MAX -  strlen( var_system ) -1 );
    output_system->value( var_system );
    
  var_calc_number_element++;
  

  add_new_element( "nb" );  

redraw();}
        xywh {275 125 45 35} labelfont 1 labelsize 12
      }
      Fl_Button {} {
        label Ni
        callback {printf( " ni Selected\\n" );


  strncat( var_system , "ni" , PATH_MAX - strlen( var_system ) -1 );
  strncat( var_system , " " , PATH_MAX -  strlen( var_system ) -1 );
    output_system->value( var_system );

  var_calc_number_element++;
  
  
  add_new_element( "ni" );  


  

redraw();}
        xywh {35 125 45 35} labelfont 1 labelsize 12
      }
      Fl_Button {} {
        label Ag
        callback {printf( " ag Selected\\n" );


  strncat( var_system , "ag" , PATH_MAX - strlen( var_system ) -1 );
  strncat( var_system , " " , PATH_MAX -  strlen( var_system ) -1 );
    output_system->value( var_system );

  var_calc_number_element++;
  
  add_new_element( "ag" );  



redraw();}
        xywh {35 170 45 35} labelfont 1 labelsize 12
      }
      Fl_Button {} {
        label Ti
        callback {printf( " ti Selected\\n" );


  strncat( var_system , "ti" , PATH_MAX - strlen( var_system ) -1 );
  strncat( var_system , " " , PATH_MAX -  strlen( var_system ) -1 );
    output_system->value( var_system );

  var_calc_number_element++;
  

  add_new_element( "ti" );  


redraw();}
        xywh {215 125 45 35} labelfont 1 labelsize 12
      }
      Fl_Button {} {
        label Zn
        callback {printf( " zn Selected\\n" );


  strncat( var_system , "zn" , PATH_MAX - strlen( var_system ) -1 );
  strncat( var_system , " " , PATH_MAX -  strlen( var_system ) -1 );
    output_system->value( var_system );

  var_calc_number_element++;
  
  add_new_element( "zn" );  



redraw();}
        xywh {155 170 45 35} labelfont 1 labelsize 12
      }
      Fl_Button {} {
        label W
        callback {printf( " w Selected\\n" );


  strncat( var_system , "w" , PATH_MAX - strlen( var_system ) -1 );
  strncat( var_system , " " , PATH_MAX -  strlen( var_system ) -1 );
    output_system->value( var_system );

  var_calc_number_element++;
  
  add_new_element( "w" );  



redraw();}
        xywh {215 170 45 35} labelfont 1 labelsize 12
      }
    }
    Fl_Group {} {
      label {2. Compute} open
      xywh {25 260 350 150} box DOWN_FRAME labeltype ENGRAVED_LABEL
    } {
      Fl_Output output_system {
        label System
        xywh {90 275 205 25} color 49
        code1 {output_system->value( "fe c " );}
        code2 {var_calc_number_element = 2;}
      }
      Fl_Button {} {
        label CA
        callback {printf( " Clr \\n" );

// printf( "%s\\n" ,   inputline->value( browser1->text(  browser1->value() )  ) ) ;


   input_var_set_condition->value( " t=1000 p=1e5 n=1  " );
   
   strncpy( var_system, "", PATH_MAX );
   output_system->value( var_system ); 
   
   var_calc_number_element = 0; 

   redraw();}
        xywh {300 275 30 25} labelfont 1 labelsize 12
      }
      Fl_Input input_var_calc_x {
        label {X var.}
        xywh {90 305 205 25}
        code1 {input_var_calc_x->value( "c" );}
      }
      Fl_Button {} {
        label CA
        callback {printf( " Clr \\n" );

// printf( "%s\\n" ,   inputline->value( browser1->text(  browser1->value() )  ) ) ;

input_var_calc_x->value( "" );

redraw();}
        xywh {300 305 30 25} labelfont 1 labelsize 12
      }
      Fl_Input input_var_calc_y {
        label {Y var.}
        xywh {90 335 205 25}
        code1 {input_var_calc_y->value( "T" );}
      }
      Fl_Button {} {
        label CA
        callback {printf( " Clr \\n" );

// printf( "%s\\n" ,   inputline->value( browser1->text(  browser1->value() )  ) ) ;

input_var_calc_y->value( "" );

redraw();}
        xywh {300 335 30 25} labelfont 1 labelsize 12
      }
      Fl_Input input_var_tdb_database {
        label TDB
        xywh {90 365 205 25}
        code1 {input_var_tdb_database->value( "steel1.tdb" );}
      }
      Fl_Button {} {
        label CA
        callback {printf( " Clr \\n" );

// printf( "%s\\n" ,   inputline->value( browser1->text(  browser1->value() )  ) ) ;

input_var_tdb_database->value( "" );

redraw();}
        xywh {300 365 30 25} labelfont 1 labelsize 12
      }
    }
    Fl_Button {} {
      label {&Quit}
      callback {exit( 0 );}
      xywh {690 650 65 30}
    }
    Fl_Group {} {
      label {3. OCM GNUPlot} open
      xywh {25 450 350 170} box DOWN_BOX labeltype ENGRAVED_LABEL
    } {
      Fl_Button {} {
        label {[&3] Compute!}
        callback {char mydirnow[2500];
  printf( "Current Directory: %s \\n", getcwd( mydirnow, 2500 ) );

  void_plot_preview_plotfile(   "ocgnu.plt"   );

  redraw();
  
  if ( checkbutton_xterm_console->value( ) == 1 ) 
     nsystem(  "  screen -d  -m   xterm -e   oc   macro.ocm " );
     
  else if ( checkbutton_single_console->value( ) == 1 ) 
     nsystem(  "  oc   macro.ocm " );
     
     
  
  // oc6 bug 
  // gnuplot ocgnu.plt  &}
        xywh {130 540 145 25}
      }
      Fl_Button {} {
        label {[&2] Edit!}
        callback {redraw();

nsystem( "  screen -d -m fledit  macro.ocm " );}
        xywh {130 505 145 25}
      }
      Fl_Button {} {
        label {[&1] Create!}
        callback {redraw();

clear_plot();


create_macro( );


void_flfront_preview_browser1_refresh();}
        xywh {130 470 145 25}
      }
      Fl_Button {} {
        label {[&4] Plot!}
        callback {char mydirnow[2500];
  printf( "Current Directory: %s \\n", getcwd( mydirnow, 2500 ) );



  redraw();
  nsystem(  "  screen -d  -m  gnuplot ocgnu.plt  " );
  
  
  // oc6 bug 
  // gnuplot ocgnu.plt  &}
        xywh {130 575 145 25}
      }
    }
    Fl_Button {} {
      label {&Option}
      callback {win3->show();}
      xywh {600 650 80 30}
    }
    Fl_Group {} {
      label Preview open
      xywh {385 70 370 550} box DOWN_BOX labeltype ENGRAVED_LABEL resizable
    } {
      Fl_Browser flfront_preview_browser1 {
        xywh {395 80 350 505}
        code1 {flfront_preview_browser1->type( FL_HOLD_BROWSER );}
      }
      Fl_Button {} {
        label {Refresh Preview}
        callback {void_flfront_preview_browser1_refresh();}
        xywh {395 590 130 25}
      }
      Fl_Button {} {
        label Edit
        callback {redraw();

nsystem( "  screen -d -m fledit  macro.ocm " );}
        xywh {530 590 60 25}
      }
    }
    Fl_Button {} {
      label {&Database}
      callback {win2->show();}
      xywh {25 650 80 30}
    }
    Fl_Button {} {
      label {&Plot}
      callback {win4->show();}
      xywh {205 650 80 30}
    }
    Fl_Button {} {
      label {&Macro}
      callback {win5->show();}
      xywh {295 650 80 30}
    }
    Fl_Button {} {
      label {&Condition}
      callback {win6->show();}
      xywh {115 650 80 30}
    }
    Fl_Button {} {
      label Help
      callback {if ( fexist( "/usr/bin/chromium" ) == 1) 
   nsystem(  " screen -d -m chromium  --new-window  http://github.com/lusamek/opencalphad " );
   
else if ( fexist( "/usr/bin/chromium-browser" ) == 1) 
   nsystem(  " screen -d -m chromium-browser   --new-window  http://github.com/lusamek/opencalphad " );
   
else
   nsystem(  " screen -d -m dillo http://github.com/lusamek/opencalphad " );}
      xywh {475 650 115 30} labelfont 1
    }
    Fl_Button {} {
      label Periodic
      callback {nsystem( " screen -d -m gperiodic " );}
      xywh {385 650 80 30}
    }
  }
  Fl_Window win2 {
    label Database open
    xywh {589 97 880 370} type Double resizable visible
  } {
    Fl_Box {} {
      label {FLTK OpenCalphad -- Database}
      xywh {15 25 850 35} box ENGRAVED_BOX labeltype ENGRAVED_LABEL
    }
    Fl_Group {} {
      label Browser open
      xywh {15 95 390 220} box DOWN_BOX labeltype ENGRAVED_LABEL
    } {
      Fl_Browser browser1 {
        callback {printf( "Click\\n" );



 input_var_tdb_database->value(  browser1->text(   browser1->value() ) ); 
 

redraw();}
        xywh {25 110 370 155} resizable
        code1 {browser1->type(FL_HOLD_BROWSER);}
      }
      Fl_Input input_notes {
        label Notes
        tooltip Demo xywh {75 275 165 25} color 55
      }
      Fl_Button {} {
        label {&Add}
        callback {browser1->add(   input_notes->value()  );

// if (  browser1->value() >= 1 )  printf( "%s\\n" ,   browser1->text(  browser1->value() )  )  ;}
        xywh {245 275 45 25}
      }
    }
    Fl_Group {} {
      label Database open
      xywh {415 195 450 120} box DOWN_BOX labeltype ENGRAVED_LABEL
    } {
      Fl_Button {} {
        label {&Edit}
        callback {redraw();
  
  char charo[PATH_MAX];
  strncpy( charo, "", PATH_MAX );
  strncat( charo , " screen -d -m  fledit  " , PATH_MAX - strlen( charo ) -1 );
  strncat( charo , " " , PATH_MAX -  strlen( charo ) -1 );
  strncat( charo , " \\"" , PATH_MAX -  strlen( charo ) -1 );
  strncat( charo , var_tdb_database , PATH_MAX -  strlen( charo ) -1 );
  strncat( charo , "\\" " , PATH_MAX -  strlen( charo ) -1 );
  nsystem(  charo );}
        xywh {525 275 50 25}
      }
      Fl_Button {} {
        label {ls tdb}
        callback {redraw();

  printf( "============================\\n" );
  printf( "   DATABASE                 \\n" );
  printf( "============================\\n" );
  
  nlsgrep( ".tdb" );
  nlsgrep( ".TDB" );}
        xywh {435 275 70 25}
      }
      Fl_Button {} {
        label {Elemen&t}
        callback {redraw();
  
  
  printf( "============================\\n" );
  printf( "   ELEMENT                  \\n" );
  printf( "============================\\n" );
  
  
  
  filegrep( var_tdb_database , "ELEM" );}
        xywh {635 215 75 25}
      }
      Fl_Button {} {
        label Browse
        callback {redraw();

  printf( "============================\\n" );
  printf( "   DATABASE                 \\n" );
  printf( "============================\\n" );
  
  nlsgrep( ".tdb" );
  nlsgrep( ".TDB" );
  
  
  printf( "============================\\n" );
  printf( "   DATABASE                 \\n" );
  printf( "============================\\n" );

  
        browser1->clear();
	DIR *dirp;
	struct dirent *dp;
	dirp = opendir( "." );
	while  ((dp = readdir( dirp )) != NULL ) 
	{
		if (  strcmp( dp->d_name, "." ) != 0 )
		if (  strcmp( dp->d_name, ".." ) != 0 )
                {
                    if ( ( strstr( dp->d_name, ".TDB" ) != 0 )  || ( strstr( dp->d_name, ".tdb" ) != 0 )  ) 
                    {
			printf( "%s\\n", dp->d_name );
 		        browser1->add(  dp->d_name  );
 		     }
                }
	}
	closedir( dirp );}
        xywh {435 215 70 25}
      }
      Fl_Button {} {
        label {&Species}
        callback {redraw();
  
  
  printf( "============================\\n" );
  printf( "   SPECIES                  \\n" );
  printf( "============================\\n" );
  
  
  
  filegrep( var_tdb_database , "SPECIE" );}
        xywh {635 245 75 25}
      }
      Fl_Button {} {
        label Path
        callback {redraw();

  printf( "============================\\n" );
  printf( "   PATH                     \\n" );
  printf( "============================\\n" );
  
    char mydirnow[2500];
  printf( "Current Directory: %s \\n", getcwd( mydirnow, 2500 ) );}
        xywh {435 245 70 25}
      }
      Fl_Button {} {
        label {&View}
        callback {redraw();
  
  char charo[PATH_MAX];
  strncpy( charo, "", PATH_MAX );
  strncat( charo , " screen -d -m  flview   " , PATH_MAX - strlen( charo ) -1 );
  strncat( charo , " " , PATH_MAX -  strlen( charo ) -1 );
  strncat( charo , " \\"" , PATH_MAX -  strlen( charo ) -1 );
  strncat( charo , var_tdb_database , PATH_MAX -  strlen( charo ) -1 );
  strncat( charo , "\\" " , PATH_MAX -  strlen( charo ) -1 );
  nsystem(  charo );}
        xywh {525 245 50 25}
      }
      Fl_Button {} {
        label {&Phase}
        callback {redraw();
  
  
  printf( "============================\\n" );
  printf( "   PHASE                   \\n" );
  printf( "============================\\n" );
  
  
  
  filegrep( var_tdb_database , "PHASE " );}
        xywh {715 215 75 25}
      }
      Fl_Button {} {
        label {&Fun}
        callback {redraw();
  
  
  printf( "============================\\n" );
  printf( "   FUN                   \\n" );
  printf( "============================\\n" );
  
  
  
  filegrep( var_tdb_database , "FUN " );}
        xywh {715 245 75 25}
      }
      Fl_Button {} {
        label {&Function}
        callback {redraw();
  
  
  printf( "============================\\n" );
  printf( "   FUNCTION                  \\n" );
  printf( "============================\\n" );
  
  
  
  filegrep( var_tdb_database , "FUNCTION " );}
        xywh {635 275 75 25}
      }
      Fl_Button {} {
        label {&Cat}
        callback {redraw();
  ncat( var_tdb_database );}
        xywh {525 215 50 25}
      }
    }
    Fl_Button {} {
      label {Close Frame}
      callback {win2->hide();}
      xywh {755 335 110 25}
    }
    Fl_Group {} {
      label Create open
      xywh {415 95 450 80} box DOWN_BOX labeltype ENGRAVED_LABEL
    } {
      Fl_Button {} {
        label {Fetch!}
        callback {redraw();
  
  char charo[PATH_MAX];
  strncpy( charo, "", PATH_MAX );
  strncat( charo , " xterm -e wget  -c     " , PATH_MAX - strlen( charo ) -1 );
  strncat( charo , " " , PATH_MAX -  strlen( charo ) -1 );
  strncat( charo , " \\"" , PATH_MAX -  strlen( charo ) -1 );
  strncat( charo , form_database_fetch_url->value() , PATH_MAX -  strlen( charo ) -1 );
  strncat( charo , "\\" " , PATH_MAX -  strlen( charo ) -1 );
  nsystem(  charo );
 

redraw();

  printf( "============================\\n" );
  printf( "   DATABASE                 \\n" );
  printf( "============================\\n" );
  
  nlsgrep( ".tdb" );
  nlsgrep( ".TDB" );
  
  
  printf( "============================\\n" );
  printf( "   DATABASE                 \\n" );
  printf( "============================\\n" );

  
        browser1->clear();
	DIR *dirp;
	struct dirent *dp;
	dirp = opendir( "." );
	while  ((dp = readdir( dirp )) != NULL ) 
	{
		if (  strcmp( dp->d_name, "." ) != 0 )
		if (  strcmp( dp->d_name, ".." ) != 0 )
                {
                    if ( ( strstr( dp->d_name, ".TDB" ) != 0 )  || ( strstr( dp->d_name, ".tdb" ) != 0 )  ) 
                    {
			printf( "%s\\n", dp->d_name );
 		        browser1->add(  dp->d_name  );
 		     }
                }
	}
	closedir( dirp );}
        xywh {430 105 75 25}
      }
      Fl_Button {} {
        label dos2unix
        callback {redraw();
  
  char charo[PATH_MAX];
  strncpy( charo, "", PATH_MAX );
  strncat( charo , " xterm -e dos2unix    " , PATH_MAX - strlen( charo ) -1 );
  strncat( charo , " " , PATH_MAX -  strlen( charo ) -1 );
  strncat( charo , " \\"" , PATH_MAX -  strlen( charo ) -1 );
  strncat( charo , var_tdb_database , PATH_MAX -  strlen( charo ) -1 );
  strncat( charo , "\\" " , PATH_MAX -  strlen( charo ) -1 );
  nsystem(  charo );}
        xywh {430 140 75 25}
      }
      Fl_Input form_database_fetch_url {
        label Url
        xywh {540 105 315 25}
      }
      Fl_Button {} {
        label {&Edit}
        callback {redraw();
  
  char charo[PATH_MAX];
  strncpy( charo, "", PATH_MAX );
  strncat( charo , " screen -d -m  fledit  " , PATH_MAX - strlen( charo ) -1 );
  strncat( charo , " " , PATH_MAX -  strlen( charo ) -1 );
  strncat( charo , " \\"" , PATH_MAX -  strlen( charo ) -1 );
  strncat( charo , var_tdb_database , PATH_MAX -  strlen( charo ) -1 );
  strncat( charo , "\\" " , PATH_MAX -  strlen( charo ) -1 );
  nsystem(  charo );}
        xywh {518 140 80 25}
      }
    }
  }
  Fl_Window win3 {
    label Option open
    xywh {1352 154 405 410} type Double resizable visible
  } {
    Fl_Box {} {
      label {FLTK OpenCalphad -- Option}
      xywh {15 15 380 35} box ENGRAVED_BOX labeltype ENGRAVED_LABEL
    }
    Fl_Group {} {
      label {User system call} open
      xywh {15 95 375 80} box DOWN_BOX labeltype ENGRAVED_LABEL
    } {
      Fl_Button {} {
        label {&ls}
        callback {nls();}
        xywh {25 105 55 25}
      }
      Fl_Button {} {
        label {&xterm}
        callback {nsystem( " screen -d -m xterm " );}
        xywh {85 105 50 25}
      }
      Fl_Button {} {
        label {&fl48}
        callback {nsystem( " screen -d -m fl48 " );}
        xywh {275 140 50 25}
      }
      Fl_Button {} {
        label {&fledit}
        callback {nsystem( " screen -d -m fledit " );}
        xywh {275 105 50 25}
      }
      Fl_Button {} {
        label Path
        callback {redraw();

  printf( "============================\\n" );
  printf( "   PATH                     \\n" );
  printf( "============================\\n" );
  
    char mydirnow[2500];
  printf( "Current Directory: %s \\n", getcwd( mydirnow, 2500 ) );}
        xywh {25 140 55 25}
      }
      Fl_Button {} {
        label rox
        callback {nsystem( " rox " );}
        xywh {85 140 50 25}
      }
      Fl_Button {} {
        label x48
        callback {nsystem( " screen -d -m x48 " );}
        xywh {330 140 50 25}
      }
      Fl_Button {} {
        label {&xlock}
        callback {nsystem( "  cd ; screen -d -m   xlock  -nolock  " );}
        xywh {330 105 50 25}
      }
      Fl_Button {} {
        label Keyboard
        callback {nsystem( " screen -d -m flkeyboard " );}
        xywh {195 140 75 25}
      }
      Fl_Button {} {
        label Monitor
        callback {nsystem( " screen -d -m flmonitor " );}
        xywh {195 105 75 25}
      }
      Fl_Button {} {
        label flm
        callback {nsystem( " screen -d -m flm  " );}
        xywh {140 140 50 25}
      }
      Fl_Button {} {
        label flcalc
        callback {nsystem( " screen -d -m flcalc   " );}
        xywh {140 105 50 25}
      }
    }
    Fl_Button {} {
      label {&Close Frame}
      callback {win3->hide();}
      xywh {275 355 115 30}
    }
    Fl_Group {} {
      label {Console output} open
      xywh {15 225 375 70} box DOWN_BOX labeltype ENGRAVED_LABEL
    } {
      Fl_Check_Button checkbutton_single_console {
        label {Single console output}
        xywh {35 235 25 25} down_box DOWN_BOX
      }
      Fl_Check_Button checkbutton_xterm_console {
        label {xterm console output}
        xywh {35 265 25 25} down_box DOWN_BOX
        code2 {checkbutton_xterm_console->value( 1 );}
      }
    }
    Fl_Button {} {
      label {&Development}
      callback {win7->show();}
      xywh {160 355 110 30}
    }
    Fl_Button {} {
      label {&Web}
      callback {if ( fexist( "/usr/bin/dillo" ) == 1) 
   nsystem(  " screen -d -m dillo  http://duckduckgo.com   " );

else if ( fexist( "/usr/bin/chromium" ) == 1) 
   nsystem(  " screen -d -m chromium  --new-window  http://duckduckgo.com " );
   
else if ( fexist( "/usr/bin/chromium-browser" ) == 1) 
   nsystem(  " screen -d -m chromium-browser   --new-window  http://duckduckgo.com   " );
   
else if ( fexist( "/usr/bin/firefox" ) == 1) 
   nsystem(  " screen -d -m firefox  --new-window  http://duckduckgo.com " );
   
else if ( fexist( "/usr/bin/chromium-browser" ) == 1) 
   nsystem(  " screen -d -m chromium-browser   --new-window  http://duckduckgo.com   " );
   
else
   nsystem(  " screen -d -m dillo http://duckduckgo.com    " );}
      xywh {15 355 140 30}
    }
    Fl_Button {} {
      label {Development and Support}
      callback {if ( fexist( "/usr/bin/chromium" ) == 1) 
   nsystem(  " screen -d -m chromium  --new-window  https://webchat.freenode.net/?channels=\#opencalphad " );
   
else if ( fexist( "/usr/bin/chromium-browser" ) == 1) 
   nsystem(  " screen -d -m chromium-browser   --new-window  https://webchat.freenode.net/?channels=\#opencalphad  " );}
      xywh {15 312 375 30} labelfont 1
    }
  }
  Fl_Window win4 {
    label {Graphics Plot} open
    xywh {782 452 890 545} type Double resizable visible
  } {
    Fl_Box {} {
      label {FLTK OpenCalphad -- Plot}
      xywh {15 25 860 35} box ENGRAVED_BOX labeltype ENGRAVED_LABEL
    }
    Fl_Group {} {
      label {Advanced Plot} open selected
      xywh {15 100 860 385} box DOWN_BOX labeltype ENGRAVED_LABEL resizable
    } {
      Fl_Button {} {
        label {Close all &plots}
        callback {nsystem( " pkill gnuplot " );}
        xywh {590 110 135 25}
      }
      Fl_Button {} {
        label {Clear GnuPlot plt}
        callback {/// this might be modified for windows/mac ...
nsystem( "  rm  ocgnu.plt " );

flplot_preview_browser->clear();}
        xywh {450 110 130 25}
      }
      Fl_Button {} {
        label {View Plot File}
        callback {redraw();
  
  char charo[PATH_MAX];
  strncpy( charo, "", PATH_MAX );
  strncat( charo , " screen -d -m  flview   " , PATH_MAX - strlen( charo ) -1 );
  strncat( charo , " " , PATH_MAX -  strlen( charo ) -1 );
  strncat( charo , " \\"" , PATH_MAX -  strlen( charo ) -1 );
  strncat( charo , "ocgnu.plt"   , PATH_MAX -  strlen( charo ) -1 );
  strncat( charo , "\\" " , PATH_MAX -  strlen( charo ) -1 );
  nsystem(  charo );}
        xywh {25 110 130 25}
      }
      Fl_Button {} {
        label {Edit Plot File}
        callback {redraw();
  
  char charo[PATH_MAX];
  strncpy( charo, "", PATH_MAX );
  strncat( charo , " screen -d -m  fledit   " , PATH_MAX - strlen( charo ) -1 );
  strncat( charo , " " , PATH_MAX -  strlen( charo ) -1 );
  strncat( charo , " \\"" , PATH_MAX -  strlen( charo ) -1 );
  strncat( charo , "ocgnu.plt"   , PATH_MAX -  strlen( charo ) -1 );
  strncat( charo , "\\" " , PATH_MAX -  strlen( charo ) -1 );
  nsystem(  charo );}
        xywh {165 110 130 25}
      }
      Fl_Button {} {
        label {Plot!}
        callback {char mydirnow[2500];
  printf( "Current Directory: %s \\n", getcwd( mydirnow, 2500 ) );
  
  redraw();
  
  if ( plot_gnuplot_term_driver_force->value( ) == 0 )  
  {
      ncp( "advocgnu.plt" , "ocgnu.plt" );
      form_plot_statusline->value("ocgnu.plt");
      void_plot_preview_plotfile(  "ocgnu.plt" );
      nsystem(  "  screen -d  -m  gnuplot ocgnu.plt     " );
  }   
  
  else if ( plot_gnuplot_term_driver_force->value( ) == 1 )
  { 
      ncp(           "advocgnu.plt" , "ocgnu.plt" );
      ncopysetterm(  "advocgnu.plt" ,  "ocgnu.plt" ,  plot_gnuplot_term_drivername->value()   );
      form_plot_statusline->value( "advocgnu.plt" );
      void_plot_preview_plotfile(  "advocgnu.plt" );
      nsystem(  "  screen -d  -m  gnuplot advocgnu.plt  " );
      
  }  
     
  // oc6 bug 
  // gnuplot ocgnu.plt  &}
        xywh {590 140 135 25} labelfont 1
      }
      Fl_Button {} {
        label {Refresh Preview}
        callback {form_plot_statusline->value("ocgnu.plt");
  void_plot_preview_plotfile(  "ocgnu.plt" );}
        xywh {25 170 130 25}
      }
      Fl_Browser flplot_preview_browser {
        xywh {25 215 840 255} resizable
        code1 {flplot_preview_browser->type( FL_HOLD_BROWSER );}
      }
      Fl_Button {} {
        label {Automatic Term Driver}
        callback {plot_gnuplot_term_driver_force->value( 0 );}
        xywh {165 170 190 25}
      }
      Fl_Input plot_gnuplot_term_drivername {
        label {Term Driver}
        xywh {575 170 130 25}
        code2 {plot_gnuplot_term_drivername->value( "x11" );}
      }
      Fl_Check_Button plot_gnuplot_term_driver_force {
        label {Active Driver}
        xywh {735 170 25 25} down_box DOWN_BOX
      }
      Fl_Button {} {
        label {&?}
        callback {printf("Util: Create help.txt !\\n");

      FILE *fpout;

      fpout = fopen( "help.txt", "wb" );
      
      fputs( "===============\\n", fpout );
      fputs( "GNUPLOT DRIVER \\n", fpout );
      fputs( "===============\\n", fpout );
      fputs( "cairolatex        canvas            cgm               context \\n", fpout );
      fputs( "corel             dumb              dxf               eepic\\n", fpout );
      fputs( "emf               emtex             epscairo          epslate\\n", fpout );
      fputs( "fig               gif               hpgl              jpeg\\n", fpout );
      fputs( "latex             lua               mf                mp\\n", fpout );
      fputs( "pcl5              pdfcairo          png               pngcair\\n", fpout );
      fputs( "pop               postscript        pslatex           pstex\\n", fpout );
      fputs( "pstricks          push              qms               svg\\n", fpout );
      fputs( "tek40xx           tek410x           texdraw           tgif\\n", fpout );
      fputs( "tikz              tkcanvas          tpic              vttek\\n", fpout );
      fputs( "wxt               x11               xlib              xterm\\n", fpout );
      fclose( fpout );
      
      
      nsystem( " screen -d -m flview help.txt " );}
        xywh {705 170 25 25}
      }
      Fl_Button {} {
        label {Edit Adv. Plot}
        callback {redraw();
  
  char charo[PATH_MAX];
  strncpy( charo, "", PATH_MAX );
  strncat( charo , " screen -d -m  fledit   " , PATH_MAX - strlen( charo ) -1 );
  strncat( charo , " " , PATH_MAX -  strlen( charo ) -1 );
  strncat( charo , " \\"" , PATH_MAX -  strlen( charo ) -1 );
  strncat( charo , "advocgnu.plt"   , PATH_MAX -  strlen( charo ) -1 );
  strncat( charo , "\\" " , PATH_MAX -  strlen( charo ) -1 );
  nsystem(  charo );}
        xywh {305 110 135 25}
      }
      Fl_Button {} {
        label {Adv. Compute}
        callback {char mydirnow[2500];
  printf( "Current Directory: %s \\n", getcwd( mydirnow, 2500 ) );

  redraw();
  ncpadvmac( "macro2.ocm" , "advmacro.ocm" );
  
  if ( checkbutton_xterm_console->value( ) == 1 ) 
     nsystem(  "  screen -d  -m   xterm -e   oc   macro2.ocm " );
     
  else if ( checkbutton_single_console->value( ) == 1 ) 
     nsystem(  "  oc   macro2.ocm " );
     
  // oc6 bug 
  // gnuplot ocgnu.plt  &}
        xywh {450 140 130 25}
      }
      Fl_Button {} {
        label {Edit Adv. Macro}
        callback {redraw();
  
  char charo[PATH_MAX];
  strncpy( charo, "", PATH_MAX );
  strncat( charo , " screen -d -m  fledit   " , PATH_MAX - strlen( charo ) -1 );
  strncat( charo , " " , PATH_MAX -  strlen( charo ) -1 );
  strncat( charo , " \\"" , PATH_MAX -  strlen( charo ) -1 );
  strncat( charo , "advmacro.ocm"   , PATH_MAX -  strlen( charo ) -1 );
  strncat( charo , "\\" " , PATH_MAX -  strlen( charo ) -1 );
  nsystem(  charo );}
        xywh {165 140 130 25}
      }
      Fl_Button {} {
        label {Dup. Adv. Macro}
        callback {redraw();
  ncp( "advmacro.ocm" , "macro.ocm" );}
        xywh {25 140 130 25}
      }
      Fl_Button {} {
        label {View Res. Macro.}
        callback {redraw();
  ncpadvmac( "macro2.ocm" , "advmacro.ocm" );

  ncat( "macro2.ocm" );

  
  char charo[PATH_MAX];
  strncpy( charo, "", PATH_MAX );
  strncat( charo , " screen -d -m  flview    " , PATH_MAX - strlen( charo ) -1 );
  strncat( charo , " " , PATH_MAX -  strlen( charo ) -1 );
  strncat( charo , " \\"" , PATH_MAX -  strlen( charo ) -1 );
  strncat( charo , "macro2.ocm"   , PATH_MAX -  strlen( charo ) -1 );
  strncat( charo , "\\" " , PATH_MAX -  strlen( charo ) -1 );
  nsystem(  charo );}
        xywh {305 140 135 25}
      }
      Fl_Check_Button plot_adv_computer_skipint {
        label {Skip Keypress}
        callback {plot_adv_computer_skipint_int = plot_adv_computer_skipint->value();

printf( "%d\\n", plot_adv_computer_skipint->value() );
printf( "%d\\n", plot_adv_computer_skipint_int );}
        xywh {735 140 25 25} down_box DOWN_BOX
      }
    }
    Fl_Button {} {
      label {Close Frame}
      callback {win4->hide();}
      xywh {765 495 110 25}
    }
    Fl_Output form_plot_statusline {
      xywh {15 495 740 25} color 49
      code1 {form_plot_statusline->value("ocgnu.plt");}
    }
  }
  Fl_Window win5 {
    label Macro open
    xywh {923 140 850 485} type Double resizable visible
  } {
    Fl_Box {} {
      label {FLTK OpenCalphad -- Macro}
      xywh {15 15 820 35} box ENGRAVED_BOX labeltype ENGRAVED_LABEL
    }
    Fl_Group {} {
      label Browser open
      xywh {15 205 370 240} box DOWN_BOX labeltype ENGRAVED_LABEL
    } {
      Fl_Browser browser2 {
        callback {printf( "Click\\n" );


 input_var_macro_filename->value(  browser2->text(   browser2->value() ) ); 



  
  int fetchi;
  FILE *fp5;
  FILE *fp6;
  char fetchline[PATH_MAX];
  char fetchlinetmp[PATH_MAX];
  char filein[PATH_MAX];
  strncpy( filein,   input_var_macro_filename->value(), PATH_MAX );
  
  
    browser_macro_filecontent->clear();
    
    fp6 = fopen( filein , "rb");
    while( !feof(fp6) ) 
    {
          fgets(fetchlinetmp, PATH_MAX, fp6); 
          strncpy( fetchline, "" , PATH_MAX );
          for( fetchi = 0 ; ( fetchi <= strlen( fetchlinetmp ) ); fetchi++ )
            if ( fetchlinetmp[ fetchi ] != '\\n' )
                 fetchline[fetchi]=fetchlinetmp[fetchi];
                 
                if ( !feof( fp6 ) ) 
                {
                    browser_macro_filecontent->add( fetchline );    
                }

     }
     fclose( fp6 );

  
 
 redraw();}
        xywh {35 245 330 195}
        code1 {browser2->type(FL_HOLD_BROWSER);}
      }
      Fl_Input input_var_macro_filename {
        label Filename
        xywh {100 215 265 25}
      }
    }
    Fl_Group {} {
      label Macro open
      xywh {15 85 370 95} box DOWN_BOX labeltype ENGRAVED_LABEL
    } {
      Fl_Button {} {
        label Browse
        callback {redraw();

  printf( "============================\\n" );
  printf( "   MACRO                    \\n" );
  printf( "============================\\n" );
  
  nlsgrep( ".ocm" );
  nlsgrep( ".OCM" );
   
      
        browser2->clear();
	DIR *dirp;
	struct dirent *dp;
	dirp = opendir( "." );
	while  ((dp = readdir( dirp )) != NULL ) 
	{
		if (  strcmp( dp->d_name, "." ) != 0 )
		if (  strcmp( dp->d_name, ".." ) != 0 )
                {
                    if ( ( strstr( dp->d_name, ".OCM" ) != 0 )  || ( strstr( dp->d_name, ".ocm" ) != 0 )          ) 
                    {
			printf( "%s\\n", dp->d_name );
 		        browser2->add(  dp->d_name  );
 		     }
                }
	}
	closedir( dirp );}
        xywh {25 105 95 25}
      }
      Fl_Button {} {
        label {&New}
        callback {redraw();
  char charo[PATH_MAX];
  strncpy( charo, "", PATH_MAX );
  strncat( charo , " screen -d -m  flnotepad  " , PATH_MAX - strlen( charo ) -1 );
  strncat( charo , " " , PATH_MAX -  strlen( charo ) -1 );
  strncat( charo , " \\"" , PATH_MAX -  strlen( charo ) -1 );
  strncat( charo , input_var_macro_filename->value() , PATH_MAX -  strlen( charo ) -1 );
  strncat( charo , "\\" " , PATH_MAX -  strlen( charo ) -1 );
  nsystem(  charo );}
        xywh {265 135 50 25}
      }
      Fl_Button {} {
        label {&Use macro}
        callback {redraw();

  printf( "============================\\n" );
  printf( "   MACRO                    \\n" );
  printf( "============================\\n" );
  
  printf( "   FILECOPY                  \\n" );
  printf( "   Source: %s                  \\n" ,  input_var_macro_filename->value()   );
  printf( "   Destination: %s                  \\n" ,  "macro.ocm"   );
  

  ncp( "macro.ocm" ,   input_var_macro_filename->value() );
  
  void_flfront_preview_browser1_refresh();}
        xywh {25 135 95 25}
      }
      Fl_Button {} {
        label {&View}
        callback {redraw();
  
  char charo[PATH_MAX];
  strncpy( charo, "", PATH_MAX );
  strncat( charo , " screen -d -m  flview   " , PATH_MAX - strlen( charo ) -1 );
  strncat( charo , " " , PATH_MAX -  strlen( charo ) -1 );
  strncat( charo , " \\"" , PATH_MAX -  strlen( charo ) -1 );
  strncat( charo , input_var_macro_filename->value() , PATH_MAX -  strlen( charo ) -1 );
  strncat( charo , "\\" " , PATH_MAX -  strlen( charo ) -1 );
  nsystem(  charo );}
        xywh {320 105 50 25}
      }
      Fl_Button {} {
        label {&Cat}
        callback {redraw();
  
  ncat( input_var_macro_filename->value() );}
        xywh {265 105 50 25}
      }
      Fl_Button {} {
        label {&Edit}
        callback {redraw();
  
  char charo[PATH_MAX];
  strncpy( charo, "", PATH_MAX );
  strncat( charo , " screen -d -m  fledit  " , PATH_MAX - strlen( charo ) -1 );
  strncat( charo , " " , PATH_MAX -  strlen( charo ) -1 );
  strncat( charo , " \\"" , PATH_MAX -  strlen( charo ) -1 );
  strncat( charo , input_var_macro_filename->value() , PATH_MAX -  strlen( charo ) -1 );
  strncat( charo , "\\" " , PATH_MAX -  strlen( charo ) -1 );
  nsystem(  charo );}
        xywh {320 135 50 25}
      }
      Fl_Button {} {
        label {Browse ocl}
        callback {redraw();

  printf( "============================\\n" );
  printf( "   MACRO                    \\n" );
  printf( "============================\\n" );

  nlsgrep( ".ocl" );
 
  printf( "  ocl: improved OC format with more features (ocl: OC Language).\\n" );
  printf( "  ocm: standard OC format.\\n" );
     
        browser2->clear();
	DIR *dirp;
	struct dirent *dp;
	dirp = opendir( "." );
	while  ((dp = readdir( dirp )) != NULL ) 
	{
		if (  strcmp( dp->d_name, "." ) != 0 )
		if (  strcmp( dp->d_name, ".." ) != 0 )
                {
                    if ( strstr( dp->d_name, ".ocl" ) != 0 ) 
                    {
			printf( "%s\\n", dp->d_name );
 		        browser2->add(  dp->d_name  );
 		     }
                }
	}
	closedir( dirp );}
        xywh {145 105 95 25}
      }
      Fl_Button {} {
        label {&Use ocl}
        callback {redraw();

  printf( "============================\\n" );
  printf( "   MACRO (OCL with SKIP)    \\n" );
  printf( "============================\\n" );
  
  printf( "   FILECOPY                  \\n" );
  printf( "   Source: %s                  \\n" ,  input_var_macro_filename->value()   );
  printf( "   Destination: %s                  \\n" ,  "macro.ocm"   );
  
  ncpskip(  "macro.ocm" ,  input_var_macro_filename->value()  ,  "@&"  );}
        xywh {145 135 95 25}
      }
    }
    Fl_Button {} {
      label {Close Frame}
      callback {win5->hide();}
      xywh {725 450 110 25}
    }
    Fl_Group {} {
      label {File description} open
      xywh {405 80 430 365} box DOWN_BOX labeltype ENGRAVED_LABEL resizable
    } {
      Fl_Browser browser_macro_filecontent {
        xywh {410 85 420 355}
        code0 {browser_macro_filecontent->type(FL_HOLD_BROWSER);}
      }
    }
  }
  Fl_Window win6 {
    label Condition open
    xywh {1111 568 655 465} type Double resizable visible
  } {
    Fl_Box {} {
      label {FLTK OpenCalphad -- Condition}
      xywh {15 15 625 30} box ENGRAVED_BOX labeltype ENGRAVED_LABEL
    }
    Fl_Group {} {
      label {Set-Condition (Create)} open
      xywh {15 105 625 315} box DOWN_BOX labeltype ENGRAVED_LABEL resizable
    } {
      Fl_Input input_var_set_condition {
        label {set-con}
        xywh {90 135 535 25}
        code1 {input_var_set_condition->value( "t=1000 p=1e5 n=1 x(c)=0.2 " );}
      }
      Fl_Input input_var_calc_ymin {
        label Ymin
        xywh {90 280 535 25}
        code1 {input_var_calc_ymin->value( "500" );}
      }
      Fl_Input input_var_calc_ymax {
        label Ymax
        xywh {90 310 535 25}
        code1 {input_var_calc_ymax->value( "2000" );}
      }
      Fl_Input input_var_calc_ystep {
        label Ystep
        xywh {90 340 535 25}
        code1 {input_var_calc_ystep->value( "10" );}
      }
      Fl_Input input_var_calc_xmin {
        label Xmin
        xywh {90 195 535 25}
        code1 {input_var_calc_xmin->value( "0" );}
      }
      Fl_Input input_var_calc_xmax {
        label Xmax
        xywh {90 225 535 25}
        code1 {input_var_calc_xmax->value( "0.25" );}
      }
    }
    Fl_Button {} {
      label {Close Frame}
      callback {win6->hide();}
      xywh {530 430 110 25}
    }
  }
  Fl_Window win7 {
    label Development open
    xywh {1062 235 395 480} type Double resizable visible
  } {
    Fl_Box {} {
      label {FLTK OpenCalphad -- Development}
      xywh {10 15 380 35} box ENGRAVED_BOX labeltype ENGRAVED_LABEL
    }
    Fl_Group {} {
      label {Path Binary} open
      xywh {10 90 375 100} box DOWN_BOX labeltype ENGRAVED_LABEL
    } {
      Fl_Button {} {
        label ccode
        callback {nsystem( " screen -d -m fledit flopencalphad_def.h  " );}
        xywh {20 105 100 25}
      }
      Fl_Button {} {
        label Inipath
        callback {redraw();

  printf( "============================\\n" );
  printf( "  CHANGE PATH               \\n" );
  printf( "============================\\n" );
  
  printf( "Change to...\\n" );
  chdir( inipath );
  
  char mydirnow[2500];
  printf( "Current Directory: %s \\n", getcwd( mydirnow, 2500 ) );}
        xywh {130 105 100 25}
      }
      Fl_Button {} {
        label Userpath
        callback {redraw();

  printf( "============================\\n" );
  printf( "  CHANGE PATH               \\n" );
  printf( "============================\\n" );
  
  printf( "Change to...\\n" );
  chdir( userpath );
  
  char mydirnow[2500];
  printf( "Current Directory: %s \\n", getcwd( mydirnow, 2500 ) );}
        xywh {245 105 115 25}
      }
      Fl_Button {} {
        label {chdir()}
        callback {redraw();

  printf( "============================\\n" );
  printf( "  CHANGE PATH               \\n" );
  printf( "============================\\n" );
  
  printf( "Change to...\\n" );
  chdir( dev_path_input1->value()  );
  
  char mydirnow[2500];
  printf( "Current Directory: %s \\n", getcwd( mydirnow, 2500 ) );}
        xywh {245 140 115 25}
      }
      Fl_Input dev_path_input1 {
        label {Path: }
        xywh {60 140 170 25}
      }
    }
    Fl_Button {} {
      label {&Close Frame}
      callback {win7->hide();}
      xywh {275 440 110 30}
    }
    Fl_Group {} {
      label Development open
      xywh {10 275 375 155} box DOWN_BOX labeltype ENGRAVED_LABEL
    } {
      Fl_Button {} {
        label {VIM &Macro}
        callback {redraw();
  
  nrun( " vim " ,  input_var_macro_filename->value() );}
        xywh {145 290 90 25}
      }
      Fl_Button {} {
        label {&VIM SIM}
        callback {redraw();
  
  nrun( " vim " , "macro.ocm" );}
        xywh {40 290 90 25}
      }
      Fl_Button {} {
        label {VIM &Database}
        callback {redraw();
  
  nrun( " vim " , input_var_tdb_database->value(  ) );}
        xywh {250 290 110 25}
      }
      Fl_Button {} {
        label {[&4] Plot!}
        callback {char mydirnow[2500];
  printf( "Current Directory: %s \\n", getcwd( mydirnow, 2500 ) );



  redraw();
  nsystem(  "  screen -d  -m  gnuplot ocgnu.plt  " );
  
  
  // oc6 bug 
  // gnuplot ocgnu.plt  &}
        xywh {215 325 145 25}
      }
      Fl_Button {} {
        label {[&3] Compute!}
        callback {char mydirnow[2500];
  printf( "Current Directory: %s \\n", getcwd( mydirnow, 2500 ) );



  redraw();
  nsystem(  "  screen -d  -m   xterm -e   oc   macro.ocm " );
  
  // oc6 bug 
  // gnuplot ocgnu.plt  &}
        xywh {40 325 150 25}
      }
      Fl_Button {} {
        label {GnuPlot XForward/Unix}
        callback {char mydirnow[2500];
  printf( "Current Directory: %s \\n", getcwd( mydirnow, 2500 ) );



  redraw();
  
  printf(   "Export Result on Solaris/Unix/BSD Simulation Station\\n" );
  
  nsystem(  " env DISPLAY=192.168.1.2:0    screen -d  -m  gnuplot ocgnu.plt  " );
  
  
  
  // oc6 bug 
  // gnuplot ocgnu.plt  &}
        xywh {40 360 320 25}
      }
    }
  }
}

Function {addkeypress( int keypress )} {} {
  code {//char str[PATH_MAX]; 
   //snprintf( str , sizeof( str ), "%s%c", inputline->value() , keypress ); 
   //inputline->value( str  );} {}
}

Function {main( int argc, char *argv[] )} {open return_type int
} {
  code {char mydirnow[2500];  
  strncpy( inipath , getcwd( mydirnow, 2500 ), 2500 );
  
  // working dir 
  if ( argc == 2)
  if ( strcmp( argv[1] , "" ) !=  0 )
  {
          chdir( argv[ 1 ] );
  }
  printf( "Current Directory: %s \\n", getcwd( mydirnow, 2500 ) );
  strncpy( userpath , getcwd( mydirnow, 2500 ), 2500 );


  // vars
  strncpy( var_system, "fe c ", PATH_MAX);
  //output_system->value( var_system );  <- seg.

  make_window();
  win1->show();

  Fl::run();} {}
}

Function {void_flfront_preview_browser1_refresh()} {open
} {
  code {flfront_preview_browser1->clear();    
  
  char filein[PATH_MAX];
  strncpy( filein, "macro.ocm"  , PATH_MAX );
       
  
  int fetchi;
  FILE *fp5;
  FILE *fp6;
  char fetchline[PATH_MAX];
  char fetchlinetmp[PATH_MAX];
  
  if ( fexist( filein ) == 1 )
  {
    fp6 = fopen( filein , "rb");
    while( !feof(fp6) ) 
    {
          fgets(fetchlinetmp, PATH_MAX, fp6); 
          strncpy( fetchline, "" , PATH_MAX );
          for( fetchi = 0 ; ( fetchi <= strlen( fetchlinetmp ) ); fetchi++ )
            if ( fetchlinetmp[ fetchi ] != '\\n' )
              fetchline[fetchi]=fetchlinetmp[fetchi];
              
          if ( !feof(fp6)  )
              flfront_preview_browser1->add( fetchline );    

     }
     fclose( fp6 );
 }} {}
}

Function {void_plot_preview_plotfile( const  char *foopatfile  )} {open
} {
  code {flplot_preview_browser->clear();    
  
  char filein[PATH_MAX];
  strncpy( filein, foopatfile  , PATH_MAX );
       
  
  int fetchi;
  FILE *fp5;
  FILE *fp6;
  char fetchline[PATH_MAX];
  char fetchlinetmp[PATH_MAX];
  
  if ( fexist( filein ) == 1 )
  {
    fp6 = fopen( filein , "rb");
    while( !feof(fp6) ) 
    {
          fgets(fetchlinetmp, PATH_MAX, fp6); 
          strncpy( fetchline, "" , PATH_MAX );
          for( fetchi = 0 ; ( fetchi <= strlen( fetchlinetmp ) ); fetchi++ )
            if ( fetchlinetmp[ fetchi ] != '\\n' )
              fetchline[fetchi]=fetchlinetmp[fetchi];
              
          if ( !feof(fp6)  )
              flplot_preview_browser->add( fetchline );    

     }
     fclose( fp6 );
 }} {}
}

Function {ncopysetterm( const char *foofileout,  const  char *foofilein, const  char *fooxdriver  )} {open return_type int
} {
  code {// foofileout foofilein    
 // *fooxdriver
  printf(" Copy with updating the plot code\\n" );
  
  
  int i;
  FILE *fp;
  FILE *fp1;
  FILE *fp2;
  
  char strline[PATH_MAX];
  char strlinein[PATH_MAX];

  printf(" Path: %s\\n", getcwd( strline, PATH_MAX ) );
  printf(" Source: %s\\n", foofilein );
  printf(" Target: %s\\n", foofileout );
 
  if ( fexist( foofilein ) == 1 )
  {
  
      printf(" Source: %s\\n", foofilein );
      printf(" Target: %s\\n", foofileout );

  
    fp = fopen( foofilein , "rb");
    fp2 = fopen( foofileout , "wb");

    while( !feof(fp) )
    {
	    fgets( strlinein , PATH_MAX, fp);
	    //strncpy( strline , "" , PATH_MAX );
	    
	    if ( strlinein[ 0 ] == '\#' )  
	    {
	    	    printf( "%s", strlinein ); 
  	            fputs( strlinein , fp2  );
	    }
	    else if ( strstr( strlinein, "set term" ) != 0 ) 
	    {
 		    printf( "==> Set Term %s\\n", strlinein ); 
 		 
 		    if ( strcmp( plot_gnuplot_term_drivername->value(),    "x11" ) == 0 ) 
      		          fputs( "set termin x11 \\n", fp2 );
      		    else if ( strcmp( plot_gnuplot_term_drivername->value(),    "wxt" ) == 0 ) 
      		          fputs( "set termin wxt \\n", fp2 );
      		    else if ( strcmp( plot_gnuplot_term_drivername->value() ,    "qt" ) == 0 ) 
      		          fputs( "set termin qt \\n", fp2 );      		          
 		    else 
 		    {
     		          fputs( "\\n", fp2 );
 		          fputs( fooxdriver , fp2 );
        		  fputs( "\\n", fp2 );
 		    }		              
            }
	    else 
	    {
	    	    printf( "%s", strlinein ); 
  	            fputs( strlinein , fp2  );
	    }
     }
     
     fclose( fp );
     fclose( fp2 );
   }} {}
}
