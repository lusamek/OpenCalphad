// generated by Fast Light User Interface Designer (fluid) version 1.0304

#include "flprintfile.h"
#include <stdio.h>
#include <stdlib.h>
#include "headerf.h"

void redraw() {
  printf("redraw!\n");
  
  char cwd[PATH_MAX];
  
  /*
  
        
          browser->clear();
  	DIR *dirp;
  	struct dirent *dp;
  	dirp = opendir( "." );
  	while  ((dp = readdir( dirp )) != NULL ) 
  	{
  		if (  strcmp( dp->d_name, "." ) != 0 )
  		if (  strcmp( dp->d_name, ".." ) != 0 )
  		if ( dp->d_name[0] != '.' ) 
                  {
  
   		     if ( fexist( dp->d_name ) == 2 ) 
   		     {
   		     	printf( "%s\n", dp->d_name );   browser->add(  dp->d_name  );
   		     } 
   		     
   		     else if ( filter_pdf->value() == 0 )
   		     {
   		     	printf( "%s\n", dp->d_name );   browser->add(  dp->d_name  );
  
   		     }
   		     
   		    else if ( filter_pdf->value() == 1 ) 
   		    {  
   		        if  (   ( strstr( dp->d_name, ".pdf" ) != 0 )  || ( strstr( dp->d_name, ".pdf" ) != 0 )   ) 
                          {  printf( "%s\n", dp->d_name );   browser->add(  dp->d_name  ); }
                          else
                          {    
                          } 
   		    }   
   		     
   		     
   		     
                  }
  	}
  	closedir( dirp );
  	
  	
  	fielddirectory->value(  getcwd( cwd, PATH_MAX) );
  	
  	
  	*/
  	
  	
          
      browser->clear();
      char str_filter[PATH_MAX];
      strncpy( str_filter, "", PATH_MAX );
      
      if ( filefilter->value() == 1 ) 
      {
          if ( strcmp( filefilterstr->value() , "" ) == 0 ) 
            browser->filter( "*.pdf" ); 
          else
            browser->filter( filefilterstr->value() ); 
      }
      else
      {
         browser->filter( 0 ); 
      }
      
      browser->load( "." );
          
      char curcwd[PATH_MAX];   
      char str[PATH_MAX];   
      strncpy( str, getcwd( curcwd, PATH_MAX ) , PATH_MAX );
      output_curdir->value( str );
      
      
      
      //printf( " Cur Dir %s\n" , str );
      //output_curdir->value( getcwd( curcwd, PATH_MAX ) );
      //tput_curfile
}

Fl_Double_Window *win1=(Fl_Double_Window *)0;

static void cb_Op(Fl_Button*, void*) {
  // output_curfile->value(  browser->text( browser->value() ) );




char cmdi[PATH_MAX];
char thefile[PATH_MAX];


if ( browser->value() >= 1 ) 
{

   strncpy( thefile,   browser->text( browser->value() )  , PATH_MAX );

 
   if ( fexist(  thefile    ) == 2 )
   {
         chdir( thefile  );
         redraw();
   }
   else if ( fexist( thefile  ) == 1 )
   {
	
	strncpy( cmdi , " screen -d -m ncrun  " , PATH_MAX );
	strncat( cmdi , " " , PATH_MAX - strlen( cmdi ) -1 );
	strncat( cmdi , " \""  , PATH_MAX - strlen( cmdi ) -1 );
	strncat( cmdi ,   thefile  , PATH_MAX - strlen( cmdi ) -1 );
	strncat( cmdi , "\" "  , PATH_MAX - strlen( cmdi ) -1 );
	strncat( cmdi , " " , PATH_MAX - strlen( cmdi ) -1 );
	system( cmdi );
   }
   
  }  
  //redraw();
}

Fl_File_Browser *browser=(Fl_File_Browser *)0;

static void cb_browser(Fl_File_Browser*, void*) {
  /// to copy to selection !! 
   ///  inputbox->value(  flbrow->text( flbrow->value() ) );

 //  pansel = 2 ; 
 
   
  // runfilename->value(  flbrow->text( flbrow->value() ) );
  
  
  output_curfile->value(  browser->text( browser->value() ) );
}

Fl_Output *output_curfile=(Fl_Output *)0;

static void cb_Dir(Fl_Button*, void*) {
  chdir( ".." );

browser->value( 1 );


redraw();
}

Fl_Output *output_curdir=(Fl_Output *)0;

Fl_Check_Button *filefilter=(Fl_Check_Button *)0;

static void cb_filefilter(Fl_Check_Button*, void*) {
  if ( strcmp( filefilterstr->value() , "" ) == 0 ) 
           filefilterstr->value( "*.pdf" );

redraw();
}

static void cb_Print(Fl_Button* o, void*) {
  // output_curfile->value(  browser->text( browser->value() ) );




char cmdi[PATH_MAX];
char thefile[PATH_MAX];


if ( browser->value() >= 1 ) 
{

   strncpy( thefile,   browser->text( browser->value() )  , PATH_MAX );

 
   if ( fexist(  thefile    ) == 2 )
   {
         chdir( thefile  );
         redraw();
   }
   else if ( fexist( thefile  ) == 1 )
   {
	
	strncpy( cmdi , " xterm -e  lpr -PHLL2340D  -o fit-to-page -o media=A4        " , PATH_MAX );
	strncat( cmdi , " " , PATH_MAX - strlen( cmdi ) -1 );
	strncat( cmdi , " \""  , PATH_MAX - strlen( cmdi ) -1 );
	strncat( cmdi ,   thefile  , PATH_MAX - strlen( cmdi ) -1 );
	strncat( cmdi , "\" "  , PATH_MAX - strlen( cmdi ) -1 );
	strncat( cmdi , " " , PATH_MAX - strlen( cmdi ) -1 );
	system( cmdi );
   }
   
  }  
  //redraw();
}

Fl_Input *filefilterstr=(Fl_Input *)0;

static void cb_(Fl_Button*, void*) {
  system( " screen -d -m  flprinter " );
}

static void cb_1(Fl_Button*, void*) {
  exit( 0 );
}

#include <FL/Fl_Image.H>
static const unsigned char idata_stop[] =
{255,255,255,0,255,255,255,0,255,255,255,0,255,255,255,0,255,255,255,0,255,
255,255,0,255,255,255,0,255,255,255,0,255,255,255,0,255,255,255,0,255,255,255,0,
255,255,255,0,255,255,255,0,255,255,255,0,255,255,255,0,255,255,255,0,255,255,
255,0,164,0,0,0,158,0,0,41,179,37,38,204,197,99,101,255,168,20,20,181,151,0,0,
15,148,0,0,0,147,0,0,0,143,0,0,11,152,13,13,173,185,99,99,255,159,45,45,215,
129,0,0,53,127,0,0,0,255,255,255,0,255,255,255,0,161,0,0,41,181,51,52,216,241,
220,219,255,255,231,223,255,232,200,202,255,162,24,25,193,145,0,0,11,144,0,0,5,
150,18,19,184,223,191,192,255,253,226,221,255,240,225,223,255,160,64,65,224,124,
0,0,53,255,255,255,0,255,255,255,0,179,39,40,209,242,219,219,255,255,158,134,
255,249,41,23,255,255,189,174,255,231,205,207,255,154,20,21,189,147,11,12,180,
225,196,197,255,245,195,187,255,209,24,22,255,227,128,117,255,236,227,226,255,
151,48,49,221,255,255,255,0,255,255,255,0,198,100,102,255,255,233,223,255,249,
41,15,255,242,26,0,255,237,33,6,255,249,185,173,255,226,197,199,255,222,191,
191,255,243,192,186,255,209,23,13,255,202,9,0,255,194,6,3,255,245,212,209,255,
180,116,116,255,255,255,255,0,255,255,255,0,169,26,27,185,231,196,197,255,255,
189,174,255,237,33,8,255,232,26,0,255,225,27,6,255,241,182,174,255,239,192,185,
255,209,23,12,255,203,12,0,255,195,10,2,255,230,161,156,255,227,207,207,255,136,
33,34,199,255,255,255,0,255,255,255,0,157,0,0,20,162,25,26,193,231,209,211,255,
250,184,172,255,224,27,6,255,220,20,0,255,216,32,10,255,211,31,13,255,204,13,0,
255,195,9,0,255,228,157,153,255,230,219,219,255,136,35,35,203,114,0,0,28,255,
255,255,0,255,255,255,0,160,0,0,0,149,0,0,13,154,17,17,186,225,197,198,255,241,
180,172,255,216,32,13,255,208,20,0,255,204,18,0,255,198,20,7,255,225,162,159,
255,223,206,207,255,133,24,24,196,112,0,0,18,119,0,0,0,255,255,255,0,255,255,
255,0,147,0,0,0,142,0,0,9,148,12,12,178,222,192,194,255,239,188,182,255,209,31,
16,255,204,17,0,255,198,15,0,255,192,19,9,255,225,171,168,255,221,202,203,255,
125,16,16,188,105,0,0,13,107,0,0,0,255,255,255,0,255,255,255,0,143,0,0,13,150,
19,20,184,226,196,198,255,243,192,186,255,209,25,12,255,203,13,0,255,198,19,5,
255,193,18,7,255,187,4,0,255,180,7,5,255,222,166,165,255,222,208,208,255,123,26,
26,193,102,0,0,20,255,255,255,0,255,255,255,0,152,21,22,173,223,189,189,255,
244,193,185,255,210,24,12,255,204,13,0,255,195,10,0,255,225,161,158,255,225,171,
169,255,180,6,5,255,175,1,0,255,168,6,6,255,219,167,167,255,216,196,196,255,120,
27,27,189,255,255,255,0,255,255,255,0,185,99,100,255,252,228,223,255,208,21,16,
255,201,8,0,255,195,9,3,255,228,158,155,255,224,208,208,255,220,201,201,255,221,
168,167,255,169,5,5,255,162,0,0,255,155,4,4,255,229,208,208,255,167,115,115,255,
255,255,255,0,255,255,255,0,160,45,46,219,240,224,225,255,226,127,117,255,195,
14,13,255,230,161,155,255,229,216,216,255,134,29,29,202,125,20,20,191,222,205,
205,255,219,167,167,255,154,12,12,255,189,99,99,255,229,225,225,255,132,56,56,
228,255,255,255,0,255,255,255,0,134,0,0,52,160,65,66,223,237,226,225,255,245,
210,208,255,227,209,209,255,137,34,34,203,113,0,0,20,111,0,0,10,124,25,25,193,
216,199,200,255,229,206,207,255,229,224,224,255,141,78,78,230,93,0,0,64,255,255,
255,0,255,255,255,0,137,0,0,0,125,0,0,55,150,47,47,216,180,114,115,255,136,28,
28,194,112,0,0,27,119,0,0,0,116,0,0,0,104,0,0,16,120,21,20,184,167,113,113,255,
132,55,55,224,90,0,0,65,97,0,0,0,255,255,255,0,255,255,255,0,255,255,255,0,255,
255,255,0,255,255,255,0,255,255,255,0,255,255,255,0,255,255,255,0,255,255,255,0,
255,255,255,0,255,255,255,0,255,255,255,0,255,255,255,0,255,255,255,0,255,255,
255,0,255,255,255,0,255,255,255,0};
static Fl_Image *image_stop() {
  static Fl_Image *image = new Fl_RGB_Image(idata_stop, 16, 16, 4, 0);
  return image;
}

Fl_Double_Window* make_window() {
  { win1 = new Fl_Double_Window(300, 450, "Documents");
    { Fl_Button* o = new Fl_Button(5, 380, 75, 25, "Op&en");
      o->labelfont(1);
      o->callback((Fl_Callback*)cb_Op);
    } // Fl_Button* o
    { Fl_Group* o = new Fl_Group(5, 60, 290, 285);
      o->box(FL_DOWN_BOX);
      { browser = new Fl_File_Browser(10, 65, 280, 275);
        browser->callback((Fl_Callback*)cb_browser);
        browser->type( FL_HOLD_BROWSER  );
      } // Fl_File_Browser* browser
      o->end();
      Fl_Group::current()->resizable(o);
    } // Fl_Group* o
    { Fl_Group* o = new Fl_Group(5, 5, 290, 20, "FLTK Print File");
      o->box(FL_UP_BOX);
      o->labeltype(FL_ENGRAVED_LABEL);
      o->align(Fl_Align(FL_ALIGN_CENTER));
      o->end();
    } // Fl_Group* o
    { output_curfile = new Fl_Output(5, 410, 250, 25);
      output_curfile->color(FL_BACKGROUND_COLOR);
    } // Fl_Output* output_curfile
    { Fl_Button* o = new Fl_Button(90, 380, 75, 25, "&Dir");
      o->labelfont(1);
      o->callback((Fl_Callback*)cb_Dir);
    } // Fl_Button* o
    { output_curdir = new Fl_Output(5, 30, 290, 25);
    } // Fl_Output* output_curdir
    { filefilter = new Fl_Check_Button(245, 350, 50, 25, "&Filt.");
      filefilter->down_box(FL_DOWN_BOX);
      filefilter->callback((Fl_Callback*)cb_filefilter);
    } // Fl_Check_Button* filefilter
    { Fl_Button* o = new Fl_Button(175, 380, 80, 25, "Print!");
      o->labelfont(1);
      o->callback((Fl_Callback*)cb_Print);
    } // Fl_Button* o
    { filefilterstr = new Fl_Input(10, 350, 230, 25);
    } // Fl_Input* filefilterstr
    { Fl_Button* o = new Fl_Button(265, 380, 30, 25, "&?");
      o->labelfont(1);
      o->callback((Fl_Callback*)cb_);
    } // Fl_Button* o
    { Fl_Button* o = new Fl_Button(265, 410, 30, 25);
      o->image( image_stop() );
      o->labelfont(1);
      o->callback((Fl_Callback*)cb_1);
    } // Fl_Button* o
    win1->end();
  } // Fl_Double_Window* win1
  return win1;
}

int main( int argc, char *argv[]) {
  printf( " == FLTK == \n" );
  int filter_pdf_arg = 0;
  
  
  ////////////////////////////////////////////////////////
    if ( argc == 2)
    if ( strcmp( argv[1] , "--pdf" ) ==  0 )
    {
      filter_pdf_arg = 1 ;      
    }
    else if ( strcmp( argv[1] , "" ) !=  0 )
    {
            chdir( argv[ 1 ] );
    }
  
    char mydirnow[2500];
    printf( "Current Directory: %s \n", getcwd( mydirnow, 2500 ) );
  
  
    make_window();
    
        
    redraw();
  
  
   
    win1->show();
    
    
  
    Fl::run();
}
