// generated by Fast Light User Interface Designer (fluid) version 1.0304

#include "fxgrapher.h"
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include "tinymath.h"

Fl_Double_Window *win1=(Fl_Double_Window *)0;

Fl_Input *form1_tab1_grapher_plot_filesource=(Fl_Input *)0;

static void cb_Edit(Fl_Button*, void*) {
  // form1_tab1_grapher_plot_filesource

if ( fexist( form1_tab1_grapher_plot_filesource->value() ) == 1 )
  {
        // form1_tab1_diffusion_filesource->value() 
        char cmdi[PATH_MAX];
        strncpy( cmdi , " screen -d -m flnotepad  "  , PATH_MAX );
        strncat( cmdi , " " , PATH_MAX - strlen( cmdi ) -1 );
        strncat( cmdi , " \""  , PATH_MAX - strlen( cmdi ) -1 );
        strncat( cmdi , form1_tab1_grapher_plot_filesource->value() , PATH_MAX - strlen( cmdi ) -1 );
        strncat( cmdi , "\" "  , PATH_MAX - strlen( cmdi ) -1 );
        strncat( cmdi , " " , PATH_MAX - strlen( cmdi ) -1 );
        system( cmdi ); 
   }
   
 //   plot [-10:10] [-5:5]  x**2, x**3, x , 0;
}

static void cb_View(Fl_Button*, void*) {
  if ( fexist( form1_tab1_grapher_plot_filesource->value() ) == 1 )
  {
        // form1_tab1_diffusion_filesource->value() 
        char cmdi[PATH_MAX];
        strncpy( cmdi , "  screen -d -m  gnuplot  -p    "  , PATH_MAX );
        strncat( cmdi , " " , PATH_MAX - strlen( cmdi ) -1 );
        strncat( cmdi , " \""  , PATH_MAX - strlen( cmdi ) -1 );
        strncat( cmdi , form1_tab1_grapher_plot_filesource->value() , PATH_MAX - strlen( cmdi ) -1 );
        strncat( cmdi , "\" "  , PATH_MAX - strlen( cmdi ) -1 );
        strncat( cmdi , " " , PATH_MAX - strlen( cmdi ) -1 );
        system( cmdi ); 
   };
}

static void cb_Close(Fl_Button*, void*) {
  // form1_tab1_diffusion_filesource->value() 
        char cmdi[PATH_MAX];
     
        system( " pkill gnuplot " );
}

static void cb_Plot(Fl_Button*, void*) {
  FILE *fp6;

fp6 = fopen( form1_tab1_grapher_plot_filesource->value() , "wb+");

  fputs( "\n" , fp6);
  //fputs( "   plot [-10:10] [-5:5]  x**2, x**3, x , 0 ;\n" , fp6);
  //  fputs( "   plot [-10:10] [-5:5]  " , fp6);
  
  if ( fxgrapher_mode_x11_driver_on->value( ) == 1 ) 
  {
        fputs( "   set termin x11   " , fp6);
        fputs( "  \n   " , fp6);
        // x11 wxt and qt 
  }
  
  
  fputs( "   plot   " , fp6);
  fputs( form1_tab1_grapher_xrange->value(), fp6 );
  fputs( " " , fp6);
  fputs( form1_tab1_grapher_yrange->value(), fp6 );
  fputs( " " , fp6);


  if ( fx_check_active_fx->value(  ) == 1 )
  {
     fputs( form1_tab1_grapher_function_fx->value( ) , fp6);
  }
  
  if ( fx_check_active_gx->value(  ) == 1 )
  {
     if ( fx_check_active_fx->value(  ) == 1 )  fputs( " , " , fp6);
     fputs( form1_tab1_grapher_function_gx->value( ) , fp6);
  }

  if ( fx_check_active_hx->value(  ) == 1 )
  {
      if ( fx_check_active_gx->value(  ) == 1 )  fputs( " , " , fp6);
      fputs( form1_tab1_grapher_function_hx->value( ) , fp6);
  }
  fputs( " ;\n " , fp6);
  
  fputs( "\n" , fp6);
  fputs( "   pause -1 ;\n" , fp6);
  fputs( "\n" , fp6);

fclose( fp6 );
 

if ( fexist( form1_tab1_grapher_plot_filesource->value() ) == 1 )
  {
        // form1_tab1_diffusion_filesource->value() 
        char cmdi[PATH_MAX];
        strncpy( cmdi , "  screen -d -m  gnuplot  -p    "  , PATH_MAX );
        strncat( cmdi , " " , PATH_MAX - strlen( cmdi ) -1 );
        strncat( cmdi , " \""  , PATH_MAX - strlen( cmdi ) -1 );
        strncat( cmdi , form1_tab1_grapher_plot_filesource->value() , PATH_MAX - strlen( cmdi ) -1 );
        strncat( cmdi , "\" "  , PATH_MAX - strlen( cmdi ) -1 );
        strncat( cmdi , " " , PATH_MAX - strlen( cmdi ) -1 );
        system( cmdi ); 
   };
}

Fl_Input *form1_tab1_grapher_function_fx=(Fl_Input *)0;

Fl_Input *form1_tab1_grapher_function_gx=(Fl_Input *)0;

Fl_Input *form1_tab1_grapher_function_hx=(Fl_Input *)0;

Fl_Check_Button *fx_check_active_fx=(Fl_Check_Button *)0;

Fl_Check_Button *fx_check_active_gx=(Fl_Check_Button *)0;

Fl_Check_Button *fx_check_active_hx=(Fl_Check_Button *)0;

static void cb_Reset(Fl_Button*, void*) {
  FILE *fp6;

fp6 = fopen( form1_tab1_grapher_plot_filesource->value() , "wb+");

  fputs( "\n" , fp6);
  fputs( "   plot [-10:10] [-5:5]  x**2, x**3, x , 0 ;\n" , fp6);
  fputs( "\n" , fp6);

  fputs( "\n" , fp6);
  fputs( "   pause -1 ;\n" , fp6);
  fputs( "\n" , fp6);

fclose( fp6 );

form1_tab1_grapher_function_fx->value( " x**2" );
form1_tab1_grapher_function_gx->value( " x**3" );
form1_tab1_grapher_function_hx->value( " 0" );
}

Fl_Input *form1_tab1_grapher_xrange=(Fl_Input *)0;

Fl_Input *form1_tab1_grapher_yrange=(Fl_Input *)0;

static void cb_CA(Fl_Button*, void*) {
  form1_tab1_grapher_xrange->value( " " );

form1_tab1_grapher_yrange->value( " " );
}

static void cb_Default(Fl_Button*, void*) {
  form1_tab1_grapher_xrange->value( "[-10:10]" );

form1_tab1_grapher_yrange->value( "[-5:5]" );
}

static void cb_10(Fl_Button*, void*) {
  form1_tab1_grapher_xrange->value( "[-10:10]" );

form1_tab1_grapher_yrange->value( "[-10:10]" );
}

static void cb_X(Fl_Button*, void*) {
  form1_tab1_grapher_xrange->value( "[0:1000]" );
form1_tab1_grapher_yrange->value( " " );
}

static void cb_CA1(Fl_Button*, void*) {
  form1_tab1_grapher_xrange->value( " " );
}

static void cb_CA2(Fl_Button*, void*) {
  form1_tab1_grapher_yrange->value( " " );
}

Fl_Check_Button *fxgrapher_mode_x11_driver_on=(Fl_Check_Button *)0;

Fl_Browser *browser1=(Fl_Browser *)0;

Fl_Input *fxgrapher_calcpad_formula1=(Fl_Input *)0;

static void cb_fxgrapher_calcpad_formula1(Fl_Input*, void*) {
  calc_ecalc_enter();
}

static void cb_CA3(Fl_Button*, void*) {
  browser1->clear();
}

static void cb_Cop(Fl_Button*, void*) {
  if ( browser1->value() >= 1) 
     form1_tab1_grapher_function_fx->value(  browser1->text( browser1->value()) );
}

static void cb_Edit1(Fl_Button*, void*) {
  system( " screen -d -m flnotepad /tmp/fxgrapher.log " );
}

static void cb_Enter(Fl_Button*, void*) {
  calc_ecalc_enter();
}

static void cb_Cop1(Fl_Button*, void*) {
  if ( browser1->value() >= 1) 
     fxgrapher_calcpad_formula1->value(  browser1->text( browser1->value()) );
}

Fl_Browser *browser2=(Fl_Browser *)0;

static void cb_browser2(Fl_Browser*, void*) {
  printf( "Click\n" );


if (  browser2->value() >= 1)
{

  input_var_macro_filename->value(  browser2->text(   browser2->value() ) ); 
 
  browser_macro_filecontent->clear();

  int fetchi;
  FILE *fp5;
  FILE *fp6;
  char fetchline[PATH_MAX];
  char fetchlinetmp[PATH_MAX];
  char filein[PATH_MAX];
  strncpy( filein,   input_var_macro_filename->value(), PATH_MAX );
  
         
    fp6 = fopen( filein , "rb");
    while( !feof(fp6) ) 
    {
          fgets(fetchlinetmp, PATH_MAX, fp6); 
          strncpy( fetchline, "" , PATH_MAX );
          for( fetchi = 0 ; ( fetchi <= strlen( fetchlinetmp ) ); fetchi++ )
            if ( fetchlinetmp[ fetchi ] != '\n' )
                 fetchline[fetchi]=fetchlinetmp[fetchi];
                 
                if ( !feof( fp6 ) ) 
                {
                    browser_macro_filecontent->add( fetchline );    
                }

     }
     fclose( fp6 );
};
}

Fl_Input *input_var_macro_filename=(Fl_Input *)0;

static void cb_Browse(Fl_Button*, void*) {
  browser2->clear();
	DIR *dirp;
	struct dirent *dp;
	dirp = opendir( "." );
	while  ((dp = readdir( dirp )) != NULL ) 
	{
		if (  strcmp( dp->d_name, "." ) != 0 )
		if (  strcmp( dp->d_name, ".." ) != 0 )
                {
                    if ( ( strstr( dp->d_name, ".txt" ) != 0 )
                    || ( strstr( dp->d_name, ".ini" ) != 0 )   
                      || ( strstr( dp->d_name, ".ddb" ) != 0 )     //tdb
                        || ( strstr( dp->d_name, ".log" ) != 0 )  ) 
                    {
			printf( "%s\n", dp->d_name );
 		        browser2->add(  dp->d_name  );
 		     }
                }
	}
	closedir( dirp );
}

static void cb_New(Fl_Button*, void*) {
  char charo[PATH_MAX];
  strncpy( charo, "", PATH_MAX );
  strncat( charo , " screen -d -m  flnotepad  " , PATH_MAX - strlen( charo ) -1 );
  strncat( charo , " " , PATH_MAX -  strlen( charo ) -1 );
  strncat( charo , " \"" , PATH_MAX -  strlen( charo ) -1 );
  strncat( charo , input_var_macro_filename->value() , PATH_MAX -  strlen( charo ) -1 );
  strncat( charo , "\" " , PATH_MAX -  strlen( charo ) -1 );
  system(  charo );
}

static void cb_View1(Fl_Button*, void*) {
  char charo[PATH_MAX];
  strncpy( charo, "", PATH_MAX );
  strncat( charo , " screen -d -m  flview   " , PATH_MAX - strlen( charo ) -1 );
  strncat( charo , " " , PATH_MAX -  strlen( charo ) -1 );
  strncat( charo , " \"" , PATH_MAX -  strlen( charo ) -1 );
  strncat( charo , input_var_macro_filename->value() , PATH_MAX -  strlen( charo ) -1 );
  strncat( charo , "\" " , PATH_MAX -  strlen( charo ) -1 );
  system(  charo );
}

static void cb_Edit2(Fl_Button*, void*) {
  char charo[PATH_MAX];
  strncpy( charo, "", PATH_MAX );
  strncat( charo , " screen -d -m  fledit  " , PATH_MAX - strlen( charo ) -1 );
  strncat( charo , " " , PATH_MAX -  strlen( charo ) -1 );
  strncat( charo , " \"" , PATH_MAX -  strlen( charo ) -1 );
  strncat( charo , input_var_macro_filename->value() , PATH_MAX -  strlen( charo ) -1 );
  strncat( charo , "\" " , PATH_MAX -  strlen( charo ) -1 );
  system(  charo );
}

static void cb_dos2unix(Fl_Button*, void*) {
  char charo[PATH_MAX];
  strncpy( charo, "", PATH_MAX );
  strncat( charo , " dos2unix   " , PATH_MAX - strlen( charo ) -1 );
  strncat( charo , " " , PATH_MAX -  strlen( charo ) -1 );
  strncat( charo , " \"" , PATH_MAX -  strlen( charo ) -1 );
  strncat( charo , input_var_macro_filename->value() , PATH_MAX -  strlen( charo ) -1 );
  strncat( charo , "\" " , PATH_MAX -  strlen( charo ) -1 );
  system(  charo );
}

Fl_Browser *browser_macro_filecontent=(Fl_Browser *)0;

static void cb_Copy(Fl_Button*, void*) {
  printf( "Click\n" );


if (  browser2->value() >= 1)
{

  input_var_macro_filename->value(  browser2->text(   browser2->value() ) ); 
 
  browser1->clear();

  int fetchi;
  FILE *fp5;
  FILE *fp6;
  char fetchline[PATH_MAX];
  char fetchlinetmp[PATH_MAX];
  char filein[PATH_MAX];
  strncpy( filein,   input_var_macro_filename->value(), PATH_MAX );
  
         
    fp6 = fopen( filein , "rb");
    while( !feof(fp6) ) 
    {
          fgets(fetchlinetmp, PATH_MAX, fp6); 
          strncpy( fetchline, "" , PATH_MAX );
          for( fetchi = 0 ; ( fetchi <= strlen( fetchlinetmp ) ); fetchi++ )
            if ( fetchlinetmp[ fetchi ] != '\n' )
                 fetchline[fetchi]=fetchlinetmp[fetchi];
                 
                if ( !feof( fp6 ) ) 
                {
                    browser1->add( fetchline );    
                }

     }
     fclose( fp6 );
};
}

Fl_Browser *tab5_browser2=(Fl_Browser *)0;

static void cb_tab5_browser2(Fl_Browser*, void*) {
  printf( "Click\n" );


if (  tab5_browser2->value() >= 1)
{

  tab5_input_var_macro_filename->value(  tab5_browser2->text(   tab5_browser2->value() ) ); 
 
  tab5_browser_macro_filecontent->clear();

  int fetchi;
  FILE *fp5;
  FILE *fp6;
  char fetchline[PATH_MAX];
  char fetchlinetmp[PATH_MAX];
  char filein[PATH_MAX];
  strncpy( filein,   tab5_input_var_macro_filename->value(), PATH_MAX );
  
         
    fp6 = fopen( filein , "rb");
    while( !feof(fp6) ) 
    {
          fgets(fetchlinetmp, PATH_MAX, fp6); 
          strncpy( fetchline, "" , PATH_MAX );
          for( fetchi = 0 ; ( fetchi <= strlen( fetchlinetmp ) ); fetchi++ )
            if ( fetchlinetmp[ fetchi ] != '\n' )
                 fetchline[fetchi]=fetchlinetmp[fetchi];
                 
                if ( !feof( fp6 ) ) 
                {
                    tab5_browser_macro_filecontent->add( fetchline );    
                }

     }
     fclose( fp6 );
};
}

Fl_Input *tab5_input_var_macro_filename=(Fl_Input *)0;

static void cb_Browse1(Fl_Button*, void*) {
  tab5_browser2->clear();
	DIR *dirp;
	struct dirent *dp;
	dirp = opendir( "." );
	while  ((dp = readdir( dirp )) != NULL ) 
	{
		if (  strcmp( dp->d_name, "." ) != 0 )
		if (  strcmp( dp->d_name, ".." ) != 0 )
                {
                    if ( ( strstr( dp->d_name, ".txt" ) != 0 )
                    || ( strstr( dp->d_name, ".ini" ) != 0 )   
                    || ( strstr( dp->d_name, ".dat" ) != 0 )   
                    || ( strstr( dp->d_name, "Makefile" ) != 0 )  
                    || ( strstr( dp->d_name, ".csv" ) != 0 ) 
                      || ( strstr( dp->d_name, ".ddb" ) != 0 )     //tdb
                        || ( strstr( dp->d_name, ".log" ) != 0 )  ) 
                    {
			printf( "%s\n", dp->d_name );
 		        tab5_browser2->add(  dp->d_name  );
 		     }
                }
	}
	closedir( dirp );
}

static void cb_New1(Fl_Button*, void*) {
  char charo[PATH_MAX];
  strncpy( charo, "", PATH_MAX );
  strncat( charo , " screen -d -m  flnotepad  " , PATH_MAX - strlen( charo ) -1 );
  strncat( charo , " " , PATH_MAX -  strlen( charo ) -1 );
  strncat( charo , " \"" , PATH_MAX -  strlen( charo ) -1 );
  strncat( charo , tab5_input_var_macro_filename->value() , PATH_MAX -  strlen( charo ) -1 );
  strncat( charo , "\" " , PATH_MAX -  strlen( charo ) -1 );
  system(  charo );
}

static void cb_View2(Fl_Button*, void*) {
  char charo[PATH_MAX];
  strncpy( charo, "", PATH_MAX );
  strncat( charo , " screen -d -m  flview   " , PATH_MAX - strlen( charo ) -1 );
  strncat( charo , " " , PATH_MAX -  strlen( charo ) -1 );
  strncat( charo , " \"" , PATH_MAX -  strlen( charo ) -1 );
  strncat( charo , tab5_input_var_macro_filename->value() , PATH_MAX -  strlen( charo ) -1 );
  strncat( charo , "\" " , PATH_MAX -  strlen( charo ) -1 );
  system(  charo );
}

static void cb_Edit3(Fl_Button*, void*) {
  char charo[PATH_MAX];
  strncpy( charo, "", PATH_MAX );
  strncat( charo , " screen -d -m  fledit  " , PATH_MAX - strlen( charo ) -1 );
  strncat( charo , " " , PATH_MAX -  strlen( charo ) -1 );
  strncat( charo , " \"" , PATH_MAX -  strlen( charo ) -1 );
  strncat( charo , tab5_input_var_macro_filename->value() , PATH_MAX -  strlen( charo ) -1 );
  strncat( charo , "\" " , PATH_MAX -  strlen( charo ) -1 );
  system(  charo );
}

static void cb_dos2unix1(Fl_Button*, void*) {
  char charo[PATH_MAX];
  strncpy( charo, "", PATH_MAX );
  strncat( charo , " dos2unix   " , PATH_MAX - strlen( charo ) -1 );
  strncat( charo , " " , PATH_MAX -  strlen( charo ) -1 );
  strncat( charo , " \"" , PATH_MAX -  strlen( charo ) -1 );
  strncat( charo , tab5_input_var_macro_filename->value() , PATH_MAX -  strlen( charo ) -1 );
  strncat( charo , "\" " , PATH_MAX -  strlen( charo ) -1 );
  system(  charo );
}

Fl_Browser *tab5_browser_macro_filecontent=(Fl_Browser *)0;

static void cb_Plot1(Fl_Button*, void*) {
  // gnuplot ... file:  plot "5h-Loesung.csv" u 1:4

  char charo[PATH_MAX];
  strncpy( charo, "", PATH_MAX );
  strncat( charo , "    gnuplot -p  -e    " , PATH_MAX - strlen( charo ) -1 );
  strncat( charo , " '  "  , PATH_MAX -  strlen( charo ) -1 ); 
  
  if ( tab5_dataplot_mode_x11_driver_on->value( ) == 1 )
  {
     strncat( charo , "  set termin x11 ;  " , PATH_MAX -  strlen( charo ) -1 );
  }
  
  strncat( charo , "  plot " , PATH_MAX -  strlen( charo ) -1 );
  
  strncat( charo , tab6_form1_tab1_grapher_xrange->value() , PATH_MAX -  strlen( charo ) -1 );
  strncat( charo , " " , PATH_MAX -  strlen( charo ) -1 );

  strncat( charo , tab6_form1_tab1_grapher_yrange->value() , PATH_MAX -  strlen( charo ) -1 );
  strncat( charo , " " , PATH_MAX -  strlen( charo ) -1 );
  
  strncat( charo , " \"" , PATH_MAX -  strlen( charo ) -1 );
  strncat( charo , tab5_input_var_macro_filename->value() , PATH_MAX -  strlen( charo ) -1 );
  strncat( charo , "\"  u   " , PATH_MAX -  strlen( charo ) -1 );
  strncat( charo , tab5_dataplot_colx->value() , PATH_MAX -  strlen( charo ) -1 );
  strncat( charo , ":"  , PATH_MAX -  strlen( charo ) -1 );
  strncat( charo , tab5_dataplot_coly->value() , PATH_MAX -  strlen( charo ) -1 );
  strncat( charo , " ;   "  , PATH_MAX -  strlen( charo ) -1 ); 
  strncat( charo , " '  "  , PATH_MAX -  strlen( charo ) -1 ); 
  
  printf( "Command: %s \n" , charo );
     
  system(  charo );
}

Fl_Input *tab5_dataplot_colx=(Fl_Input *)0;

Fl_Input *tab5_dataplot_coly=(Fl_Input *)0;

Fl_Check_Button *tab5_dataplot_mode_x11_driver_on=(Fl_Check_Button *)0;

static void cb_Close1(Fl_Button*, void*) {
  // form1_tab1_diffusion_filesource->value() 
        char cmdi[PATH_MAX];
     
        system( " pkill gnuplot " );
}

Fl_Input *tab6_form1_tab1_grapher_xrange=(Fl_Input *)0;

Fl_Input *tab6_form1_tab1_grapher_yrange=(Fl_Input *)0;

static void cb_Create(Fl_Button*, void*) {
  // gnuplot ... file:  plot "5h-Loesung.csv" u 1:4


  char charo[PATH_MAX];
  strncpy( charo, "", PATH_MAX );
  strncat( charo , "   calctwocol    " , PATH_MAX - strlen( charo ) -1 );
  strncat( charo , "    "  , PATH_MAX -  strlen( charo ) -1 );
  strncat( charo , tab7_form1_x_min->value() , PATH_MAX -  strlen( charo ) -1 );
  strncat( charo , " " , PATH_MAX -  strlen( charo ) -1 );
  strncat( charo , tab7_form1_x_max->value() , PATH_MAX -  strlen( charo ) -1 );
  strncat( charo , " " , PATH_MAX -  strlen( charo ) -1 );
  strncat( charo , tab7_form1_x_step->value() , PATH_MAX -  strlen( charo ) -1 );
  strncat( charo , " " , PATH_MAX -  strlen( charo ) -1 );
  
  strncat( charo , " \"" , PATH_MAX -  strlen( charo ) -1 );
  strncat( charo , tab7_form1_func_f1->value() , PATH_MAX -  strlen( charo ) -1 );
  strncat( charo , "\" " , PATH_MAX -  strlen( charo ) -1 );

  strncat( charo , " \"" , PATH_MAX -  strlen( charo ) -1 );
  strncat( charo , tab7_form1_func_f2->value() , PATH_MAX -  strlen( charo ) -1 );
  strncat( charo , "\"   >  " , PATH_MAX -  strlen( charo ) -1 );

  strncat( charo , " \"" , PATH_MAX -  strlen( charo ) -1 );
  strncat( charo , tab7_input_var_macro_filename->value() , PATH_MAX -  strlen( charo ) -1 );
  strncat( charo , "\"    " , PATH_MAX -  strlen( charo ) -1 );
 
  printf( "Command: %s \n" , charo );
  system(  charo );



 
 
 
 
 
 
 
  strncpy( charo, "", PATH_MAX );
  strncat( charo , "    gnuplot -p  -e    " , PATH_MAX - strlen( charo ) -1 );
  strncat( charo , " '  "  , PATH_MAX -  strlen( charo ) -1 ); 
  
  if ( tab7_dataplot_mode_x11_driver_on->value( ) == 1 )
  {
     strncat( charo , "  set termin x11 ;  " , PATH_MAX -  strlen( charo ) -1 );
  }
  
  //tab7_form1_tab1_grapher_plot_header
  strncat( charo , tab7_form1_tab1_grapher_plot_header->value()  , PATH_MAX -  strlen( charo ) -1 );
  
  strncat( charo , "  plot " , PATH_MAX -  strlen( charo ) -1 );
  
  strncat( charo , tab7_form1_tab1_grapher_xrange->value() , PATH_MAX -  strlen( charo ) -1 );
  strncat( charo , " " , PATH_MAX -  strlen( charo ) -1 );

  strncat( charo , tab7_form1_tab1_grapher_yrange->value() , PATH_MAX -  strlen( charo ) -1 );
  strncat( charo , " " , PATH_MAX -  strlen( charo ) -1 );
  
  strncat( charo , " \"" , PATH_MAX -  strlen( charo ) -1 );
  strncat( charo , tab7_input_var_macro_filename->value() , PATH_MAX -  strlen( charo ) -1 );
  strncat( charo , "\"  u   " , PATH_MAX -  strlen( charo ) -1 );
  strncat( charo , tab7_dataplot_colx->value() , PATH_MAX -  strlen( charo ) -1 );
  strncat( charo , ":"  , PATH_MAX -  strlen( charo ) -1 );
  strncat( charo , tab7_dataplot_coly->value() , PATH_MAX -  strlen( charo ) -1 );
  strncat( charo , " ;   "  , PATH_MAX -  strlen( charo ) -1 ); 
  strncat( charo , " '  "  , PATH_MAX -  strlen( charo ) -1 ); 
  
  printf( "Command: %s \n" , charo );
     
  system(  charo );
}

Fl_Input *tab7_dataplot_colx=(Fl_Input *)0;

Fl_Input *tab7_dataplot_coly=(Fl_Input *)0;

static void cb_Close2(Fl_Button*, void*) {
  // form1_tab1_diffusion_filesource->value() 
        char cmdi[PATH_MAX];
     
        system( " pkill gnuplot " );
}

Fl_Input *tab7_form1_x_min=(Fl_Input *)0;

Fl_Input *tab7_form1_x_max=(Fl_Input *)0;

Fl_Input *tab7_form1_x_step=(Fl_Input *)0;

Fl_Input *tab7_form1_func_f1=(Fl_Input *)0;

Fl_Input *tab7_form1_func_f2=(Fl_Input *)0;

Fl_Check_Button *tab7_dataplot_mode_x11_driver_on=(Fl_Check_Button *)0;

Fl_Input *tab7_form1_tab1_grapher_xrange=(Fl_Input *)0;

Fl_Input *tab7_form1_tab1_grapher_yrange=(Fl_Input *)0;

Fl_Input *tab7_input_var_macro_filename=(Fl_Input *)0;

static void cb_View3(Fl_Button*, void*) {
  char charo[PATH_MAX];
  strncpy( charo, "", PATH_MAX );
  strncat( charo , " screen -d -m  flview   " , PATH_MAX - strlen( charo ) -1 );
  strncat( charo , " " , PATH_MAX -  strlen( charo ) -1 );
  strncat( charo , " \"" , PATH_MAX -  strlen( charo ) -1 );
  strncat( charo , tab7_input_var_macro_filename->value() , PATH_MAX -  strlen( charo ) -1 );
  strncat( charo , "\" " , PATH_MAX -  strlen( charo ) -1 );
  system(  charo );
}

static void cb_Edit4(Fl_Button*, void*) {
  char charo[PATH_MAX];
  strncpy( charo, "", PATH_MAX );
  strncat( charo , " screen -d -m  fledit  " , PATH_MAX - strlen( charo ) -1 );
  strncat( charo , " " , PATH_MAX -  strlen( charo ) -1 );
  strncat( charo , " \"" , PATH_MAX -  strlen( charo ) -1 );
  strncat( charo , tab7_input_var_macro_filename->value() , PATH_MAX -  strlen( charo ) -1 );
  strncat( charo , "\" " , PATH_MAX -  strlen( charo ) -1 );
  system(  charo );
}

static void cb_View4(Fl_Button*, void*) {
  char charo[PATH_MAX];
  
  
 
  strncpy( charo, "", PATH_MAX );
  strncat( charo , "    gnuplot -p  -e    " , PATH_MAX - strlen( charo ) -1 );
  strncat( charo , " '  "  , PATH_MAX -  strlen( charo ) -1 ); 
  
  if ( tab7_dataplot_mode_x11_driver_on->value( ) == 1 )
  {
     strncat( charo , "  set termin x11 ;  " , PATH_MAX -  strlen( charo ) -1 );
  }
  
  strncat( charo , "  plot " , PATH_MAX -  strlen( charo ) -1 );
  
  strncat( charo , tab7_form1_tab1_grapher_xrange->value() , PATH_MAX -  strlen( charo ) -1 );
  strncat( charo , " " , PATH_MAX -  strlen( charo ) -1 );

  strncat( charo , tab7_form1_tab1_grapher_yrange->value() , PATH_MAX -  strlen( charo ) -1 );
  strncat( charo , " " , PATH_MAX -  strlen( charo ) -1 );
  
  strncat( charo , " \"" , PATH_MAX -  strlen( charo ) -1 );
  strncat( charo , tab7_input_var_macro_filename->value() , PATH_MAX -  strlen( charo ) -1 );
  strncat( charo , "\"  u   " , PATH_MAX -  strlen( charo ) -1 );
  strncat( charo , tab7_dataplot_colx->value() , PATH_MAX -  strlen( charo ) -1 );
  strncat( charo , ":"  , PATH_MAX -  strlen( charo ) -1 );
  strncat( charo , tab7_dataplot_coly->value() , PATH_MAX -  strlen( charo ) -1 );
  strncat( charo , " ;   "  , PATH_MAX -  strlen( charo ) -1 ); 
  strncat( charo , " '  "  , PATH_MAX -  strlen( charo ) -1 ); 
  
  printf( "Command: %s \n" , charo );
     
  system(  charo );
}

Fl_Input *tab7_form1_tab1_grapher_plot_header=(Fl_Input *)0;

Fl_Input *tab7_form1_func_f3=(Fl_Input *)0;

static void cb_Set(Fl_Button*, void*) {
  // tab7_form1_tab1_grapher_plot_header

tab7_form1_tab1_grapher_plot_header->value( " set xzeroaxis;  set xtics axis ; set yzeroaxis ; set ytics axis ;  set grid front ; " );
}

Fl_Check_Button *tab7_form1_func_f3_button_checker=(Fl_Check_Button *)0;

Fl_Browser *tab3_browser2=(Fl_Browser *)0;

static void cb_Physics(Fl_Button*, void*) {
  char str[PATH_MAX];
  
  tab3_browser2->clear();

  //snprintf( str , sizeof( str ), "PI   Eng: %.3E   Frac:%f", te_interp(  "PI" , 0 ), te_interp(  "PI" , 0 ) ); 
  //browser2->add( str );



  snprintf( str , sizeof( str ), "R    Eng: %.3E   Frac:%g J.K^-1.mol^-1", 8.31446261815324, 8.31446261815324  );
  tab3_browser2->add( str );
  
  snprintf( str , sizeof( str ), "PI   Eng: %.3E   Frac:%g", M_PI, M_PI  );
  tab3_browser2->add( str );
  
//  [°C] + 273.16 = [K] 

  tab3_browser2->add( "[°C] + 273.16 = [K] " );
}

static void cb_Cop2(Fl_Button*, void*) {
  if ( tab3_browser2->value() >= 1) 

     fxgrapher_calcpad_formula1->value(  tab3_browser2->text( tab3_browser2->value()) );
}

static void cb_Close3(Fl_Button*, void*) {
  exit( 0 );
}

Fl_Output *win1_statusbar_content=(Fl_Output *)0;

Fl_Double_Window* make_window() {
  { win1 = new Fl_Double_Window(835, 750, "FLTK");
    win1->box(FL_DOWN_BOX);
    { Fl_Box* o = new Fl_Box(20, 15, 800, 40, "FxGrapher");
      o->box(FL_ENGRAVED_BOX);
      o->labelfont(1);
    } // Fl_Box* o
    { Fl_Tabs* o = new Fl_Tabs(20, 80, 800, 630, "User Parameter");
      { Fl_Group* o = new Fl_Group(40, 105, 780, 605, "Fx Grapher");
        { Fl_Group* o = new Fl_Group(450, 495, 340, 180, "Plot file");
          o->box(FL_DOWN_BOX);
          o->labeltype(FL_ENGRAVED_LABEL);
          { form1_tab1_grapher_plot_filesource = new Fl_Input(540, 510, 225, 25, "Plot file:");
            form1_tab1_grapher_plot_filesource->value( "fxgrapher.plt" );
          } // Fl_Input* form1_tab1_grapher_plot_filesource
          { Fl_Button* o = new Fl_Button(480, 555, 120, 30, "Edit Plot");
            o->callback((Fl_Callback*)cb_Edit);
          } // Fl_Button* o
          { Fl_Button* o = new Fl_Button(480, 590, 120, 30, "View Plot");
            o->callback((Fl_Callback*)cb_View);
          } // Fl_Button* o
          { Fl_Button* o = new Fl_Button(480, 625, 120, 30, "Close all plots");
            o->callback((Fl_Callback*)cb_Close);
          } // Fl_Button* o
          o->end();
        } // Fl_Group* o
        { Fl_Group* o = new Fl_Group(45, 155, 750, 280, "Graph");
          o->box(FL_DOWN_BOX);
          o->labeltype(FL_ENGRAVED_LABEL);
          { Fl_Button* o = new Fl_Button(55, 380, 595, 45, "&Plot Graphs");
            o->labelfont(1);
            o->callback((Fl_Callback*)cb_Plot);
          } // Fl_Button* o
          { form1_tab1_grapher_function_fx = new Fl_Input(85, 175, 660, 25, "f(x)");
            form1_tab1_grapher_function_fx->value( "x**2" );
          } // Fl_Input* form1_tab1_grapher_function_fx
          { form1_tab1_grapher_function_gx = new Fl_Input(85, 215, 660, 25, "g(x)");
            form1_tab1_grapher_function_gx->value( "x**3" );
          } // Fl_Input* form1_tab1_grapher_function_gx
          { form1_tab1_grapher_function_hx = new Fl_Input(85, 255, 660, 25, "h(x)");
            form1_tab1_grapher_function_hx->value( "0" );
          } // Fl_Input* form1_tab1_grapher_function_hx
          { fx_check_active_fx = new Fl_Check_Button(755, 175, 25, 25);
            fx_check_active_fx->down_box(FL_DOWN_BOX);
          } // Fl_Check_Button* fx_check_active_fx
          { fx_check_active_gx = new Fl_Check_Button(755, 215, 25, 25);
            fx_check_active_gx->down_box(FL_DOWN_BOX);
          } // Fl_Check_Button* fx_check_active_gx
          { fx_check_active_hx = new Fl_Check_Button(755, 255, 25, 25);
            fx_check_active_hx->down_box(FL_DOWN_BOX);
          } // Fl_Check_Button* fx_check_active_hx
          { Fl_Button* o = new Fl_Button(680, 380, 105, 45, "Reset funcs");
            o->callback((Fl_Callback*)cb_Reset);
          } // Fl_Button* o
          { new Fl_Box(115, 350, 25, 25, "Gnu math formalism");
          } // Fl_Box* o
          o->end();
        } // Fl_Group* o
        { Fl_Group* o = new Fl_Group(45, 495, 395, 180, "Range");
          o->box(FL_DOWN_BOX);
          o->labeltype(FL_ENGRAVED_LABEL);
          { form1_tab1_grapher_xrange = new Fl_Input(135, 510, 225, 25, "X range");
            form1_tab1_grapher_xrange->value( "[-10:10]" );
          } // Fl_Input* form1_tab1_grapher_xrange
          { form1_tab1_grapher_yrange = new Fl_Input(135, 545, 225, 25, "Y range");
            form1_tab1_grapher_yrange->value( "[-5:5]" );
          } // Fl_Input* form1_tab1_grapher_yrange
          { Fl_Button* o = new Fl_Button(55, 595, 90, 25, "CA");
            o->callback((Fl_Callback*)cb_CA);
          } // Fl_Button* o
          { Fl_Button* o = new Fl_Button(150, 595, 90, 25, "Default");
            o->callback((Fl_Callback*)cb_Default);
          } // Fl_Button* o
          { Fl_Button* o = new Fl_Button(245, 595, 90, 25, "[-10:10]");
            o->callback((Fl_Callback*)cb_10);
          } // Fl_Button* o
          { Fl_Button* o = new Fl_Button(340, 595, 90, 25, "X [0:1000]");
            o->callback((Fl_Callback*)cb_X);
          } // Fl_Button* o
          { Fl_Button* o = new Fl_Button(360, 510, 30, 25, "CA");
            o->callback((Fl_Callback*)cb_CA1);
          } // Fl_Button* o
          { Fl_Button* o = new Fl_Button(360, 545, 30, 25, "CA");
            o->callback((Fl_Callback*)cb_CA2);
          } // Fl_Button* o
          { fxgrapher_mode_x11_driver_on = new Fl_Check_Button(55, 635, 25, 25, "Plot driver with X11 Library");
            fxgrapher_mode_x11_driver_on->down_box(FL_DOWN_BOX);
            fxgrapher_mode_x11_driver_on->value( 0 );
          } // Fl_Check_Button* fxgrapher_mode_x11_driver_on
          o->end();
        } // Fl_Group* o
        o->end();
      } // Fl_Group* o
      { Fl_Group* o = new Fl_Group(40, 105, 780, 605, "eCALC");
        o->hide();
        { browser1 = new Fl_Browser(40, 225, 770, 430, " ");
          browser1->type( FL_HOLD_BROWSER  );
        } // Fl_Browser* browser1
        { fxgrapher_calcpad_formula1 = new Fl_Input(40, 165, 720, 45);
          fxgrapher_calcpad_formula1->callback((Fl_Callback*)cb_fxgrapher_calcpad_formula1);
          fxgrapher_calcpad_formula1->when(FL_WHEN_ENTER_KEY);
        } // Fl_Input* fxgrapher_calcpad_formula1
        { Fl_Box* o = new Fl_Box(380, 130, 25, 25, "Calculation:");
          o->labeltype(FL_ENGRAVED_LABEL);
        } // Fl_Box* o
        { Fl_Button* o = new Fl_Button(40, 665, 120, 25, "[CA] Clear");
          o->callback((Fl_Callback*)cb_CA3);
        } // Fl_Button* o
        { Fl_Button* o = new Fl_Button(165, 665, 120, 25, "Cop&y Fx");
          o->callback((Fl_Callback*)cb_Cop);
        } // Fl_Button* o
        { Fl_Button* o = new Fl_Button(415, 665, 120, 25, "Edit log");
          o->callback((Fl_Callback*)cb_Edit1);
        } // Fl_Button* o
        { Fl_Button* o = new Fl_Button(770, 165, 40, 45, "Enter");
          o->callback((Fl_Callback*)cb_Enter);
        } // Fl_Button* o
        { Fl_Button* o = new Fl_Button(290, 665, 120, 25, "Cop&y eCalc");
          o->callback((Fl_Callback*)cb_Cop1);
        } // Fl_Button* o
        { new Fl_Box(720, 660, 25, 25, "Tiny math formalism");
        } // Fl_Box* o
        o->end();
      } // Fl_Group* o
      { Fl_Group* o = new Fl_Group(35, 105, 785, 605, "Notes");
        o->hide();
        { Fl_Group* o = new Fl_Group(45, 260, 370, 280, "Browser");
          o->box(FL_DOWN_BOX);
          o->labeltype(FL_ENGRAVED_LABEL);
          { browser2 = new Fl_Browser(65, 300, 330, 230);
            browser2->callback((Fl_Callback*)cb_browser2);
            browser2->type(FL_HOLD_BROWSER);
          } // Fl_Browser* browser2
          { input_var_macro_filename = new Fl_Input(130, 270, 265, 25, "Filename");
          } // Fl_Input* input_var_macro_filename
          o->end();
        } // Fl_Group* o
        { Fl_Group* o = new Fl_Group(45, 140, 370, 95, "File operation");
          o->box(FL_DOWN_BOX);
          o->labeltype(FL_ENGRAVED_LABEL);
          { Fl_Button* o = new Fl_Button(55, 160, 120, 25, "Browse");
            o->callback((Fl_Callback*)cb_Browse);
          } // Fl_Button* o
          { Fl_Button* o = new Fl_Button(270, 160, 75, 25, "&New");
            o->callback((Fl_Callback*)cb_New);
          } // Fl_Button* o
          { Fl_Button* o = new Fl_Button(350, 160, 50, 25, "&View");
            o->callback((Fl_Callback*)cb_View1);
          } // Fl_Button* o
          { Fl_Button* o = new Fl_Button(350, 190, 50, 25, "&Edit");
            o->callback((Fl_Callback*)cb_Edit2);
          } // Fl_Button* o
          { Fl_Button* o = new Fl_Button(270, 190, 75, 25, "dos2unix");
            o->callback((Fl_Callback*)cb_dos2unix);
          } // Fl_Button* o
          o->end();
        } // Fl_Group* o
        { Fl_Group* o = new Fl_Group(430, 140, 335, 400, "File description");
          o->box(FL_DOWN_BOX);
          o->labeltype(FL_ENGRAVED_LABEL);
          { browser_macro_filecontent = new Fl_Browser(445, 155, 305, 345);
            browser_macro_filecontent->type(FL_HOLD_BROWSER);
          } // Fl_Browser* browser_macro_filecontent
          { Fl_Button* o = new Fl_Button(445, 505, 120, 25, "Copy to eCalc");
            o->callback((Fl_Callback*)cb_Copy);
          } // Fl_Button* o
          o->end();
          Fl_Group::current()->resizable(o);
        } // Fl_Group* o
        o->end();
      } // Fl_Group* o
      { Fl_Group* o = new Fl_Group(45, 105, 775, 605, "Data Plot");
        o->hide();
        { Fl_Group* o = new Fl_Group(45, 265, 370, 240, "Browser");
          o->box(FL_DOWN_BOX);
          o->labeltype(FL_ENGRAVED_LABEL);
          { tab5_browser2 = new Fl_Browser(65, 305, 330, 190);
            tab5_browser2->callback((Fl_Callback*)cb_tab5_browser2);
            tab5_browser2->type(FL_HOLD_BROWSER);
          } // Fl_Browser* tab5_browser2
          { tab5_input_var_macro_filename = new Fl_Input(130, 275, 265, 25, "Filename");
          } // Fl_Input* tab5_input_var_macro_filename
          o->end();
        } // Fl_Group* o
        { Fl_Group* o = new Fl_Group(45, 145, 370, 95, "File operation");
          o->box(FL_DOWN_BOX);
          o->labeltype(FL_ENGRAVED_LABEL);
          { Fl_Button* o = new Fl_Button(55, 165, 95, 25, "Browse");
            o->callback((Fl_Callback*)cb_Browse1);
          } // Fl_Button* o
          { Fl_Button* o = new Fl_Button(270, 165, 75, 25, "&New");
            o->callback((Fl_Callback*)cb_New1);
          } // Fl_Button* o
          { Fl_Button* o = new Fl_Button(350, 165, 50, 25, "&View");
            o->callback((Fl_Callback*)cb_View2);
          } // Fl_Button* o
          { Fl_Button* o = new Fl_Button(350, 195, 50, 25, "&Edit");
            o->callback((Fl_Callback*)cb_Edit3);
          } // Fl_Button* o
          { Fl_Button* o = new Fl_Button(270, 195, 75, 25, "dos2unix");
            o->callback((Fl_Callback*)cb_dos2unix1);
          } // Fl_Button* o
          o->end();
        } // Fl_Group* o
        { Fl_Group* o = new Fl_Group(430, 145, 335, 360, "File description");
          o->box(FL_DOWN_BOX);
          o->labeltype(FL_ENGRAVED_LABEL);
          { tab5_browser_macro_filecontent = new Fl_Browser(445, 160, 305, 330);
            tab5_browser_macro_filecontent->type(FL_HOLD_BROWSER);
          } // Fl_Browser* tab5_browser_macro_filecontent
          o->end();
          Fl_Group::current()->resizable(o);
        } // Fl_Group* o
        { Fl_Group* o = new Fl_Group(45, 530, 720, 165, "Default plot");
          o->box(FL_DOWN_BOX);
          o->labeltype(FL_ENGRAVED_LABEL);
          { Fl_Button* o = new Fl_Button(55, 540, 120, 35, "Plot data file");
            o->callback((Fl_Callback*)cb_Plot1);
          } // Fl_Button* o
          { tab5_dataplot_colx = new Fl_Input(230, 545, 35, 25, "Col X");
            tab5_dataplot_colx->value( "2" );
          } // Fl_Input* tab5_dataplot_colx
          { tab5_dataplot_coly = new Fl_Input(315, 545, 35, 25, "Col Y");
            tab5_dataplot_coly->value( "3" );
          } // Fl_Input* tab5_dataplot_coly
          { tab5_dataplot_mode_x11_driver_on = new Fl_Check_Button(460, 625, 25, 25, "Plot driver with X11 Library");
            tab5_dataplot_mode_x11_driver_on->down_box(FL_DOWN_BOX);
            tab5_dataplot_mode_x11_driver_on->value( 0 );
          } // Fl_Check_Button* tab5_dataplot_mode_x11_driver_on
          { Fl_Button* o = new Fl_Button(55, 590, 120, 35, "Close all plots");
            o->callback((Fl_Callback*)cb_Close1);
          } // Fl_Button* o
          { tab6_form1_tab1_grapher_xrange = new Fl_Input(515, 545, 225, 25, "X range");
            tab6_form1_tab1_grapher_xrange->value( "[-10:10]" );
          } // Fl_Input* tab6_form1_tab1_grapher_xrange
          { tab6_form1_tab1_grapher_yrange = new Fl_Input(515, 580, 225, 25, "Y range");
            tab6_form1_tab1_grapher_yrange->value( "[-10:10]" );
          } // Fl_Input* tab6_form1_tab1_grapher_yrange
          o->end();
        } // Fl_Group* o
        o->end();
      } // Fl_Group* o
      { Fl_Group* o = new Fl_Group(45, 105, 775, 605, "Adv. Plot");
        o->hide();
        { Fl_Group* o = new Fl_Group(55, 150, 725, 465, "Advanced data plot");
          o->box(FL_DOWN_BOX);
          o->labeltype(FL_ENGRAVED_LABEL);
          { Fl_Button* o = new Fl_Button(395, 440, 170, 35, "Create data and plot");
            o->labelfont(1);
            o->callback((Fl_Callback*)cb_Create);
          } // Fl_Button* o
          { tab7_dataplot_colx = new Fl_Input(150, 515, 35, 25, "Col X");
            tab7_dataplot_colx->value( "1" );
          } // Fl_Input* tab7_dataplot_colx
          { tab7_dataplot_coly = new Fl_Input(235, 515, 35, 25, "Col Y");
            tab7_dataplot_coly->value( "2" );
          } // Fl_Input* tab7_dataplot_coly
          { Fl_Button* o = new Fl_Button(570, 480, 160, 35, "Close all plots");
            o->callback((Fl_Callback*)cb_Close2);
          } // Fl_Button* o
          { tab7_form1_x_min = new Fl_Input(150, 170, 225, 25, "T min");
          } // Fl_Input* tab7_form1_x_min
          { tab7_form1_x_max = new Fl_Input(150, 205, 225, 25, "T max");
          } // Fl_Input* tab7_form1_x_max
          { tab7_form1_x_step = new Fl_Input(150, 240, 225, 25, "T step");
          } // Fl_Input* tab7_form1_x_step
          { tab7_form1_func_f1 = new Fl_Input(150, 280, 605, 25, "Func f(T)");
          } // Fl_Input* tab7_form1_func_f1
          { tab7_form1_func_f2 = new Fl_Input(150, 315, 605, 25, "Func g(T)");
          } // Fl_Input* tab7_form1_func_f2
          { tab7_dataplot_mode_x11_driver_on = new Fl_Check_Button(150, 545, 25, 25, "Plot driver with X11 Library");
            tab7_dataplot_mode_x11_driver_on->down_box(FL_DOWN_BOX);
            tab7_dataplot_mode_x11_driver_on->value( 0 );
          } // Fl_Check_Button* tab7_dataplot_mode_x11_driver_on
          { tab7_form1_tab1_grapher_xrange = new Fl_Input(150, 445, 225, 25, "X range");
            tab7_form1_tab1_grapher_xrange->value( "[-10:10]" );
          } // Fl_Input* tab7_form1_tab1_grapher_xrange
          { tab7_form1_tab1_grapher_yrange = new Fl_Input(150, 480, 225, 25, "Y range");
            tab7_form1_tab1_grapher_yrange->value( "[-10:10]" );
          } // Fl_Input* tab7_form1_tab1_grapher_yrange
          { tab7_input_var_macro_filename = new Fl_Input(150, 395, 495, 25, "Data");
            tab7_input_var_macro_filename->value( "fxgrapher.dat" );
          } // Fl_Input* tab7_input_var_macro_filename
          { Fl_Button* o = new Fl_Button(650, 395, 50, 25, "&View");
            o->callback((Fl_Callback*)cb_View3);
          } // Fl_Button* o
          { Fl_Button* o = new Fl_Button(705, 395, 50, 25, "&Edit");
            o->callback((Fl_Callback*)cb_Edit4);
          } // Fl_Button* o
          { Fl_Button* o = new Fl_Button(570, 440, 160, 35, "View Plot");
            o->callback((Fl_Callback*)cb_View4);
          } // Fl_Button* o
          { tab7_form1_tab1_grapher_plot_header = new Fl_Input(150, 575, 610, 25, "Plot header");
          } // Fl_Input* tab7_form1_tab1_grapher_plot_header
          { tab7_form1_func_f3 = new Fl_Input(150, 350, 585, 25, "Func h(T)");
          } // Fl_Input* tab7_form1_func_f3
          { Fl_Button* o = new Fl_Button(570, 520, 160, 35, "Set origin (0,0)");
            o->callback((Fl_Callback*)cb_Set);
          } // Fl_Button* o
          { tab7_form1_func_f3_button_checker = new Fl_Check_Button(740, 350, 25, 25);
            tab7_form1_func_f3_button_checker->down_box(FL_DOWN_BOX);
            tab7_form1_func_f3_button_checker->value( 0 );
          } // Fl_Check_Button* tab7_form1_func_f3_button_checker
          o->end();
        } // Fl_Group* o
        { new Fl_Box(730, 670, 25, 25, "Tiny math formalism");
        } // Fl_Box* o
        o->end();
      } // Fl_Group* o
      { Fl_Group* o = new Fl_Group(45, 105, 775, 605, "Const");
        o->hide();
        { tab3_browser2 = new Fl_Browser(65, 220, 705, 305, "Constant");
          tab3_browser2->labeltype(FL_ENGRAVED_LABEL);
          tab3_browser2->type( FL_HOLD_BROWSER  );
        } // Fl_Browser* tab3_browser2
        { Fl_Button* o = new Fl_Button(65, 145, 115, 40, "Physics");
          o->callback((Fl_Callback*)cb_Physics);
        } // Fl_Button* o
        { Fl_Button* o = new Fl_Button(65, 530, 120, 25, "Cop&y to eCalc");
          o->callback((Fl_Callback*)cb_Cop2);
        } // Fl_Button* o
        o->end();
      } // Fl_Group* o
      o->end();
    } // Fl_Tabs* o
    { Fl_Button* o = new Fl_Button(705, 715, 115, 25, "&Close");
      o->labelfont(1);
      o->callback((Fl_Callback*)cb_Close3);
    } // Fl_Button* o
    { win1_statusbar_content = new Fl_Output(20, 715, 680, 25);
      win1_statusbar_content->color(FL_BACKGROUND_COLOR);
      win1_statusbar_content->value( "" );
    } // Fl_Output* win1_statusbar_content
    win1->end();
    win1->resizable(win1);
  } // Fl_Double_Window* win1
  return win1;
}

int main( int argc, char *argv[]) {
  printf( " == FLTK == \n" );
  
    
    if ( argc == 2)
    if ( strcmp( argv[1] , "" ) !=  0 )
    {
            chdir( argv[ 1 ] );
    }
  
  
  
  
    
  
    make_window();
    
   	browser1->type(FL_HOLD_BROWSER);
  	browser1->add("============");  
  	browser1->add(" CALCULATOR ");    
  	browser1->add("============");
  	
  	fx_check_active_fx->value( 1 );
  	fx_check_active_gx->value( 1 );
  	fx_check_active_hx->value( 1 );
  	
     
    win1->show();
  
    Fl::run();
}

void calc_ecalc_enter() {
  char str[PATH_MAX]; 
  
          FILE *fp;
   	
          fp = fopen( "/tmp/fxgrapher.log" , "ab+" );
  
          fputs( fxgrapher_calcpad_formula1->value()  , fp);
          	
          fputs( "\n"  , fp);
  	browser1->add( fxgrapher_calcpad_formula1->value() );
  	
  	snprintf( str , sizeof( str ), "Approx: %f", te_interp(  fxgrapher_calcpad_formula1->value(), 0 ) ); 
  	browser1->add( str );
          fputs( str  , fp);	
          fputs( "\n"  , fp);
  	
          snprintf( str , sizeof( str ), "Eng: %.3E", te_interp(  fxgrapher_calcpad_formula1->value(), 0 ) ); 
  	browser1->add( str );
          fputs( str  , fp);	
          fputs( "\n"  , fp);
  	
          fclose( fp );
}
