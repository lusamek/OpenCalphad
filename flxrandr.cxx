// generated by Fast Light User Interface Designer (fluid) version 1.0304

#include "flxrandr.h"
#include <stdio.h>
#include <stdlib.h>
#include "ccode.h"
static char user_arg1[PATH_MAX]; 
static int flfontsize = 14; 

void loadpanel( const char *pattern ) {
  printf("Load Panel!\n");
  
  
    
    int fetchi;
    FILE *fp5;
    FILE *fp6;
    char fetchline[PATH_MAX];
    char fetchlinetmp[PATH_MAX];
  
      fbrow->clear( );    
      
      fp6 = fopen( pattern , "rb");
      while( !feof(fp6) ) 
      {
            fgets(fetchlinetmp, PATH_MAX, fp6); 
            strncpy( fetchline, "" , PATH_MAX );
            for( fetchi = 0 ; ( fetchi <= strlen( fetchlinetmp ) ); fetchi++ )
              if ( fetchlinetmp[ fetchi ] != '\n' )
                   fetchline[fetchi]=fetchlinetmp[fetchi];
                   
                  if ( !feof( fp6 ) ) 
                  {
                   fbrow->add( fetchline );    
                  }
  
       }
       fclose( fp6 );
}

Fl_Double_Window *win1=(Fl_Double_Window *)0;

static void cb_Select(Fl_Button*, void*) {
  printf( " Click View\n" );
char cwd[PATH_MAX];
char cmdi[PATH_MAX];
 
if (  fbrow->value()  >= 1 ) 
{
    
      printf( "Path %s\n" , getcwd( cwd, PATH_MAX ) );
      printf( "Copy %s\n" , fbrow->text( fbrow->value() ) );


      char str[PATH_MAX];
      strncpy( str,  fbrow->text( fbrow->value() )    , PATH_MAX ); 
	
      // right side to to finish
      char ptr[strlen(str)+1];
      int strposmax = strlen( str );
      int lastposchar = strposmax;
      int i,j=0;
      int foundspace = 1;

      /// find last char
      foundspace = 1;
      for( i= strposmax-1 ; i >= 0 ; i--)
      {
         //printf( "|%d-%d-%c| ", i , lastposchar , str[i] );
	 // find where to space
         if ( foundspace == 1 ) 
         if ( str[i] == ' ' ) 
   	    lastposchar = i-1;

         if ( str[i] != ' ' ) 
           foundspace = 0;
      } 

      // add the content
      foundspace = 1;
      int activecontent = 0 ;
      int gameover = 0; 
      for( i=0; i <= lastposchar ; i++)
      {
        if ( foundspace == 1 ) 
          if ( ( str[i] != ' ' )  && ( str[i] != 9 ) ) //added! with 9 for a TAB!!
             foundspace = 0;
        
        if ( ( activecontent == 1 ) && ( str[i] == ' ' )  )
           gameover = 1; 
  
        if ( foundspace == 0 )
        if ( gameover == 0 ) 
        { 
           ptr[j++]=str[i];
           activecontent = 1; 
        }
           
      } 
      ptr[j]='\0';
	
      printf( "Resolution: (%s)\n" , ptr ); 	
 
 
 
	strncpy( cmdi , " "  , PATH_MAX );
	strncat( cmdi , " " , PATH_MAX - strlen( cmdi ) -1 );
	strncat( cmdi , " xrandr -s   \""  , PATH_MAX - strlen( cmdi ) -1 );
	strncat( cmdi ,   ptr    , PATH_MAX - strlen( cmdi ) -1 );
	strncat( cmdi , "\"  "  , PATH_MAX - strlen( cmdi ) -1 );	
	strncat( cmdi , "  "  , PATH_MAX - strlen( cmdi ) -1 );
	strncat( cmdi , " " , PATH_MAX - strlen( cmdi ) -1 );

        printf( "Command line: (%s)\n" , cmdi  ); 	
        system( cmdi ); 

};
}

Fl_Browser *fbrow=(Fl_Browser *)0;

static void cb_Quit(Fl_Button*, void*) {
  exit( 0 );
}

static void cb_Font(Fl_Button*, void*) {
  flfontsize++;
   fbrow->labelsize( flfontsize  );
   fbrow->textsize( flfontsize  );


//loadpanel( user_arg1 );
}

static void cb_Font1(Fl_Button*, void*) {
  flfontsize--;

fbrow->labelsize( flfontsize  );
   fbrow->textsize( flfontsize  );


//loadpanel( user_arg1 );
}

static void cb_Down(Fl_Button*, void*) {
  fbrow->value(  fbrow->value( ) + 10 );
}

static void cb_Up(Fl_Button*, void*) {
  fbrow->value(  fbrow->value( ) - 10 );
}

static void cb_k(Fl_Button*, void*) {
  fbrow->value(  fbrow->value( ) - 1 );
}

static void cb_j(Fl_Button*, void*) {
  fbrow->value(  fbrow->value( ) + 1 );
}

Fl_Double_Window* make_window() {
  { win1 = new Fl_Double_Window(875, 655);
    { Fl_Button* o = new Fl_Button(25, 580, 210, 25, "&Select Resolution");
      o->labelfont(1);
      o->callback((Fl_Callback*)cb_Select);
    } // Fl_Button* o
    { fbrow = new Fl_Browser(25, 60, 825, 510);
      fbrow->labelsize( flfontsize  );
      fbrow->textsize( flfontsize  );
      fbrow->type(FL_HOLD_BROWSER);
    } // Fl_Browser* fbrow
    { Fl_Button* o = new Fl_Button(775, 610, 75, 25, "&Quit");
      o->labelfont(1);
      o->callback((Fl_Callback*)cb_Quit);
    } // Fl_Button* o
    { Fl_Button* o = new Fl_Button(555, 610, 75, 25, "Font (&+)");
      o->labelfont(1);
      o->callback((Fl_Callback*)cb_Font);
    } // Fl_Button* o
    { Fl_Button* o = new Fl_Button(555, 580, 75, 25, "Font (&-)");
      o->labelfont(1);
      o->callback((Fl_Callback*)cb_Font1);
    } // Fl_Button* o
    { Fl_Button* o = new Fl_Button(695, 580, 55, 25, "&Down");
      o->callback((Fl_Callback*)cb_Down);
    } // Fl_Button* o
    { Fl_Button* o = new Fl_Button(635, 580, 55, 25, "&Up");
      o->callback((Fl_Callback*)cb_Up);
    } // Fl_Button* o
    { Fl_Button* o = new Fl_Button(695, 610, 55, 25, "&k");
      o->callback((Fl_Callback*)cb_k);
    } // Fl_Button* o
    { Fl_Button* o = new Fl_Button(635, 610, 55, 25, "&j");
      o->callback((Fl_Callback*)cb_j);
    } // Fl_Button* o
    { Fl_Box* o = new Fl_Box(25, 25, 825, 25, "FLXRANDR");
      o->box(FL_ENGRAVED_BOX);
      o->labeltype(FL_ENGRAVED_LABEL);
    } // Fl_Box* o
    win1->end();
    win1->resizable(win1);
  } // Fl_Double_Window* win1
  return win1;
}

int main( int argc, char *argv[]) {
  printf( " == FLVIEW == \n" );
  
    char mydirnow[2500];
    printf( "Current Directory: %s \n", getcwd( mydirnow, 2500 ) );
   
    char filein[PATH_MAX];
    char filesource[PATH_MAX];
    strncpy( filesource , "/etc/hostname" , PATH_MAX );
    strncpy( filein ,     filesource , PATH_MAX );
    
    /*
    if ( argc == 2)
    if ( strcmp( argv[1] , "" ) !=  0 ) 
    {
            strncpy( filein, argv[ 1 ], PATH_MAX );
            strncpy( filesource , argv[ 1 ], PATH_MAX );
    }
    */
    
    system( " xrandr > /tmp/xrandr.info  "); 
    strncpy( user_arg1, "/tmp/xrandr.info"  , PATH_MAX );
    strncpy( filein , "/tmp/xrandr.info"  , PATH_MAX );
    strncpy( filesource , "/tmp/xrandr.info"  , PATH_MAX );
   
    make_window();
    
    loadpanel(   filein   );
    
    win1->show();
    Fl::run();
}
