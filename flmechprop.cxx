// generated by Fast Light User Interface Designer (fluid) version 1.0304

#include "flmechprop.h"
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <time.h>
#include <stdlib.h>
#include <unistd.h>
#include <dirent.h>
#include <limits.h>
#include <stdio.h>
#include <stdlib.h>
#include "headerf.h"
static double max_ys = 0; 
static double max_rm = 0; 
static double max_au = 0; 

void mycomment() {

// Comment:
// ========
// For Edu

// This model is destined to use the mixture law.

// The model does not include material parameters, such 
// as grain size, dislocation density, ... composition...


}

Fl_Double_Window *win1=(Fl_Double_Window *)0;

Fl_Input *cell_mech_1_1=(Fl_Input *)0;

Fl_Input *cell_mech_1_2=(Fl_Input *)0;

Fl_Input *cell_mech_1_3=(Fl_Input *)0;

Fl_Input *cell_mech_3_1=(Fl_Input *)0;

Fl_Input *cell_mech_3_2=(Fl_Input *)0;

Fl_Input *cell_mech_3_3=(Fl_Input *)0;

Fl_Input *cell_mech_4_1=(Fl_Input *)0;

Fl_Input *cell_mech_4_2=(Fl_Input *)0;

Fl_Input *cell_mech_4_3=(Fl_Input *)0;

Fl_Input *cell_mech_5_1=(Fl_Input *)0;

Fl_Input *cell_mech_5_2=(Fl_Input *)0;

Fl_Input *cell_mech_5_3=(Fl_Input *)0;

Fl_Input *cell_mech_6_1=(Fl_Input *)0;

Fl_Input *cell_mech_6_2=(Fl_Input *)0;

Fl_Input *cell_mech_6_3=(Fl_Input *)0;

Fl_Input *cell_mech_7_1=(Fl_Input *)0;

Fl_Input *cell_mech_7_2=(Fl_Input *)0;

Fl_Input *cell_mech_7_3=(Fl_Input *)0;

Fl_Input *cell_mech_8_2=(Fl_Input *)0;

Fl_Input *cell_mech_8_3=(Fl_Input *)0;

Fl_Input *cell_mech_8_1=(Fl_Input *)0;

Fl_Input *cell_mech_2_1=(Fl_Input *)0;

Fl_Input *cell_mech_2_2=(Fl_Input *)0;

Fl_Input *cell_mech_2_3=(Fl_Input *)0;

Fl_Input *cell_fraction_3=(Fl_Input *)0;

Fl_Input *cell_fraction_4=(Fl_Input *)0;

Fl_Input *cell_fraction_1=(Fl_Input *)0;

Fl_Input *cell_fraction_2=(Fl_Input *)0;

Fl_Input *cell_fraction_7=(Fl_Input *)0;

Fl_Input *cell_fraction_8=(Fl_Input *)0;

Fl_Input *cell_fraction_5=(Fl_Input *)0;

Fl_Input *cell_fraction_6=(Fl_Input *)0;

static void cb_CA(Fl_Button*, void*) {
  cell_fraction_2->value( "0" );
void_user_calc_start1();
}

static void cb_CA1(Fl_Button*, void*) {
  cell_fraction_1->value( "0" );
void_user_calc_start1();
}

static void cb_CA2(Fl_Button*, void*) {
  cell_fraction_3->value( "0" );
void_user_calc_start1();
}

static void cb_CA3(Fl_Button*, void*) {
  cell_fraction_4->value( "0" );
void_user_calc_start1();
}

static void cb_CA4(Fl_Button*, void*) {
  cell_fraction_5->value( "0" );
void_user_calc_start1();
}

static void cb_CA5(Fl_Button*, void*) {
  cell_fraction_6->value( "0" );
void_user_calc_start1();
}

static void cb_CA6(Fl_Button*, void*) {
  cell_fraction_7->value( "0" );
void_user_calc_start1();
}

static void cb_CA7(Fl_Button*, void*) {
  cell_fraction_8->value( "0" );
void_user_calc_start1();
}

static void cb_(Fl_Button*, void*) {
  int myvalue = atoi( cell_fraction_1->value( )); 
char stringfoo[PATH_MAX]; 
snprintf( stringfoo , sizeof( stringfoo ), "%d", myvalue + 5 );
cell_fraction_1->value( stringfoo );



void_user_calc_start1();
}

static void cb_1(Fl_Button*, void*) {
  int myvalue = atoi( cell_fraction_1->value( )); 
char stringfoo[PATH_MAX]; 
snprintf( stringfoo , sizeof( stringfoo ), "%d", myvalue - 5 );
cell_fraction_1->value( stringfoo );



void_user_calc_start1();
}

static void cb_2(Fl_Button*, void*) {
  int myvalue = atoi( cell_fraction_2->value( )); 
char stringfoo[PATH_MAX]; 
snprintf( stringfoo , sizeof( stringfoo ), "%d", myvalue + 5 );
cell_fraction_2->value( stringfoo );



void_user_calc_start1();
}

static void cb_3(Fl_Button*, void*) {
  int myvalue = atoi( cell_fraction_2->value( )); 
char stringfoo[PATH_MAX]; 
snprintf( stringfoo , sizeof( stringfoo ), "%d", myvalue - 5 );
cell_fraction_2->value( stringfoo );



void_user_calc_start1();
}

static void cb_4(Fl_Button*, void*) {
  int myvalue = atoi( cell_fraction_3->value( )); 
char stringfoo[PATH_MAX]; 
snprintf( stringfoo , sizeof( stringfoo ), "%d", myvalue + 5 );
cell_fraction_3->value( stringfoo );

void_user_calc_start1();
}

static void cb_5(Fl_Button*, void*) {
  int myvalue = atoi( cell_fraction_3->value( )); 
char stringfoo[PATH_MAX]; 
snprintf( stringfoo , sizeof( stringfoo ), "%d", myvalue - 5 );
cell_fraction_3->value( stringfoo );

void_user_calc_start1();
}

static void cb_6(Fl_Button*, void*) {
  int myvalue = atoi( cell_fraction_4->value( )); 
char stringfoo[PATH_MAX]; 
snprintf( stringfoo , sizeof( stringfoo ), "%d", myvalue + 5 );
cell_fraction_4->value( stringfoo );

void_user_calc_start1();
}

static void cb_7(Fl_Button*, void*) {
  int myvalue = atoi( cell_fraction_4->value( )); 
char stringfoo[PATH_MAX]; 
snprintf( stringfoo , sizeof( stringfoo ), "%d", myvalue - 5 );
cell_fraction_4->value( stringfoo );

void_user_calc_start1();
}

static void cb_8(Fl_Button*, void*) {
  int myvalue = atoi( cell_fraction_5->value( )); 
char stringfoo[PATH_MAX]; 
snprintf( stringfoo , sizeof( stringfoo ), "%d", myvalue + 5 );
cell_fraction_5->value( stringfoo );

void_user_calc_start1();
}

static void cb_9(Fl_Button*, void*) {
  int myvalue = atoi( cell_fraction_5->value( )); 
char stringfoo[PATH_MAX]; 
snprintf( stringfoo , sizeof( stringfoo ), "%d", myvalue - 5 );
cell_fraction_5->value( stringfoo );

void_user_calc_start1();
}

static void cb_a(Fl_Button*, void*) {
  int myvalue = atoi( cell_fraction_6->value( )); 
char stringfoo[PATH_MAX]; 
snprintf( stringfoo , sizeof( stringfoo ), "%d", myvalue + 5 );
cell_fraction_6->value( stringfoo );

void_user_calc_start1();
}

static void cb_b(Fl_Button*, void*) {
  int myvalue = atoi( cell_fraction_6->value( )); 
char stringfoo[PATH_MAX]; 
snprintf( stringfoo , sizeof( stringfoo ), "%d", myvalue - 5 );
cell_fraction_6->value( stringfoo );

void_user_calc_start1();
}

static void cb_c(Fl_Button*, void*) {
  int myvalue = atoi( cell_fraction_7->value( )); 
char stringfoo[PATH_MAX]; 
snprintf( stringfoo , sizeof( stringfoo ), "%d", myvalue + 5 );
cell_fraction_7->value( stringfoo );

void_user_calc_start1();
}

static void cb_d(Fl_Button*, void*) {
  int myvalue = atoi( cell_fraction_7->value( )); 
char stringfoo[PATH_MAX]; 
snprintf( stringfoo , sizeof( stringfoo ), "%d", myvalue - 5 );
cell_fraction_7->value( stringfoo );

void_user_calc_start1();
}

static void cb_e(Fl_Button*, void*) {
  int myvalue = atoi( cell_fraction_8->value( )); 
char stringfoo[PATH_MAX]; 
snprintf( stringfoo , sizeof( stringfoo ), "%d", myvalue + 5 );
cell_fraction_8->value( stringfoo );

void_user_calc_start1();
}

static void cb_f(Fl_Button*, void*) {
  int myvalue = atoi( cell_fraction_8->value( )); 
char stringfoo[PATH_MAX]; 
snprintf( stringfoo , sizeof( stringfoo ), "%d", myvalue - 5 );
cell_fraction_8->value( stringfoo );

void_user_calc_start1();
}

Fl_Input *form1_calc1_output1=(Fl_Input *)0;

Fl_Input *form1_calc1_output2=(Fl_Input *)0;

static void cb_Start(Fl_Button*, void*) {
  void_user_calc_start1();
}

Fl_Input *form1_calc1_output3=(Fl_Input *)0;

Fl_Input *form1_calc1_output1_f=(Fl_Input *)0;

Fl_Input *form1_calc1_output2_f=(Fl_Input *)0;

Fl_Input *form1_calc1_output3_f=(Fl_Input *)0;

static void cb_Start1(Fl_Button*, void*) {
  char cell_fraction_pred_fixed_1[PATH_MAX];
char cell_fraction_pred_fixed_2[PATH_MAX];
char cell_fraction_pred_fixed_3[PATH_MAX];
char cell_fraction_pred_fixed_4[PATH_MAX];  
char cell_fraction_pred_fixed_5[PATH_MAX];
char cell_fraction_pred_fixed_6[PATH_MAX];
char cell_fraction_pred_fixed_7[PATH_MAX];
char cell_fraction_pred_fixed_8[PATH_MAX];  
  
  
   win1_statusbar_content->value( "Init..." );


   if ( form1_tab2_frac_checker_value_f1_fixed->value( ) == 1 )  strncpy( cell_fraction_pred_fixed_1 , cell_fraction_1_pred->value(), PATH_MAX);
   if ( form1_tab2_frac_checker_value_f2_fixed->value( ) == 1 )  strncpy( cell_fraction_pred_fixed_2 , cell_fraction_2_pred->value(), PATH_MAX);
   if ( form1_tab2_frac_checker_value_f3_fixed->value( ) == 1 )  strncpy( cell_fraction_pred_fixed_3 , cell_fraction_3_pred->value(), PATH_MAX);
   if ( form1_tab2_frac_checker_value_f4_fixed->value( ) == 1 )  strncpy( cell_fraction_pred_fixed_4 , cell_fraction_4_pred->value(), PATH_MAX);
   if ( form1_tab2_frac_checker_value_f5_fixed->value( ) == 1 )  strncpy( cell_fraction_pred_fixed_5 , cell_fraction_5_pred->value(), PATH_MAX);
   if ( form1_tab2_frac_checker_value_f6_fixed->value( ) == 1 )  strncpy( cell_fraction_pred_fixed_6 , cell_fraction_6_pred->value(), PATH_MAX);
   if ( form1_tab2_frac_checker_value_f7_fixed->value( ) == 1 )  strncpy( cell_fraction_pred_fixed_7 , cell_fraction_7_pred->value(), PATH_MAX);
   if ( form1_tab2_frac_checker_value_f8_fixed->value( ) == 1 )  strncpy( cell_fraction_pred_fixed_8 , cell_fraction_8_pred->value(), PATH_MAX);


char buffer[PATH_MAX];
char stringfoo[PATH_MAX]; 
max_ys = 0; 
max_rm = 0; 
max_au = 0; 

   cell_fraction_1_pred->value( ""  ); 
       cell_fraction_2_pred->value( ""  ); 
       cell_fraction_3_pred->value( "" ); 
       cell_fraction_4_pred->value(  ""  ); 

       cell_fraction_5_pred->value(  ""  ); 
       cell_fraction_6_pred->value( "" ); 
       cell_fraction_7_pred->value( "" ); 
       cell_fraction_8_pred->value(""  ); 


int fooi = 0;  
int fooj = 0; 
int fook = 0;  
int fool = 0;

int foom = 0;  
int foon = 0;
int fooo = 0;  
int foop = 0;


        time_t timer;
        struct tm* tm_info;
        srand(time(NULL));
        time(&timer);
        tm_info = localtime(&timer);
        strftime( buffer, PATH_MAX, "Started: %d/%m/%y %H:%M:%S. Please wait.", tm_info);
        win1_statusbar_content->value( buffer );
                 

int iteration_step_size = atoi(form1_max_pct_int_step1->value()); 



for ( fooi = 0 ;  fooi<=  atoi(form1_max_pct_f_const->value())  ; fooi = fooi+ iteration_step_size )
for ( fooj = 0 ;  fooj<=  atoi(form1_max_pct_f_const->value())  ; fooj = fooj+ iteration_step_size )
for ( fook = 0 ;  fook<=  atoi(form1_max_pct_f_const->value())  ; fook = fook+ iteration_step_size )
for ( fool = 0 ;  fool<=  atoi(form1_max_pct_f_const->value())  ; fool = fool+ iteration_step_size )
for ( foom = 0 ;  foom<=  atoi(form1_max_pct_f_const->value())  ; foom = foom+ iteration_step_size )
for ( foon = 0 ;  foon<=  atoi(form1_max_pct_f_const->value())  ; foon = foon+ iteration_step_size )
for ( fooo = 0 ;  fooo<=  atoi(form1_max_pct_f_const->value())  ; fooo = fooo+ iteration_step_size )
for ( foop = 0 ;  foop<=  atoi(form1_max_pct_f_const->value())  ; foop = foop+ iteration_step_size )
{

    snprintf( stringfoo , sizeof( stringfoo ), "%d", fooi );
    cell_fraction_1->value( stringfoo );
    snprintf( stringfoo , sizeof( stringfoo ), "%d", fooj );
    cell_fraction_2->value( stringfoo );
    snprintf( stringfoo , sizeof( stringfoo ), "%d", fook );
    cell_fraction_3->value( stringfoo );
    snprintf( stringfoo , sizeof( stringfoo ), "%d", fool );
    cell_fraction_4->value( stringfoo );

    snprintf( stringfoo , sizeof( stringfoo ), "%d", foom );
    cell_fraction_5->value( stringfoo );
    snprintf( stringfoo , sizeof( stringfoo ), "%d", foon );
    cell_fraction_6->value( stringfoo );
    snprintf( stringfoo , sizeof( stringfoo ), "%d", fooo );
    cell_fraction_7->value( stringfoo );
    snprintf( stringfoo , sizeof( stringfoo ), "%d", foop );
    cell_fraction_8->value( stringfoo );

   
   // force fixed
   if ( form1_tab2_frac_checker_value_f1_fixed->value( ) == 1 )  cell_fraction_1->value(cell_fraction_pred_fixed_1); 
   if ( form1_tab2_frac_checker_value_f2_fixed->value( ) == 1 )  cell_fraction_2->value(cell_fraction_pred_fixed_2);
   if ( form1_tab2_frac_checker_value_f3_fixed->value( ) == 1 )  cell_fraction_3->value(cell_fraction_pred_fixed_3);
   if ( form1_tab2_frac_checker_value_f4_fixed->value( ) == 1 )  cell_fraction_4->value(cell_fraction_pred_fixed_4);
   if ( form1_tab2_frac_checker_value_f5_fixed->value( ) == 1 )  cell_fraction_5->value(cell_fraction_pred_fixed_5);
   if ( form1_tab2_frac_checker_value_f6_fixed->value( ) == 1 )  cell_fraction_6->value(cell_fraction_pred_fixed_6);
   if ( form1_tab2_frac_checker_value_f7_fixed->value( ) == 1 )  cell_fraction_7->value(cell_fraction_pred_fixed_7);
   if ( form1_tab2_frac_checker_value_f8_fixed->value( ) == 1 )  cell_fraction_8->value(cell_fraction_pred_fixed_8);



   // set zero
   if ( form1_tab2_frac_checker_value_f1->value( ) == 0 )  cell_fraction_1->value( "0" );
   if ( form1_tab2_frac_checker_value_f2->value( ) == 0 )  cell_fraction_2->value( "0" );
   if ( form1_tab2_frac_checker_value_f3->value( ) == 0 )  cell_fraction_3->value( "0" );
   if ( form1_tab2_frac_checker_value_f4->value( ) == 0 )  cell_fraction_4->value( "0" );
   if ( form1_tab2_frac_checker_value_f5->value( ) == 0 )  cell_fraction_5->value( "0" );
   if ( form1_tab2_frac_checker_value_f6->value( ) == 0 )  cell_fraction_6->value( "0" );
   if ( form1_tab2_frac_checker_value_f7->value( ) == 0 )  cell_fraction_7->value( "0" );
   if ( form1_tab2_frac_checker_value_f8->value( ) == 0 )  cell_fraction_8->value( "0" );



   
   if ( foom == 10 ) 
         printf( " Value %d %d \n", fooi , fooj  ); 
   else if ( foom == 20 ) 
        printf( " Value %d %d \n", fooi , fooj  ); 
    
     
     void_user_calc_start1();
   
      
 }
 
 
 printf( "Max YS: %f \n" ,  max_ys ); 
 printf( "Max Rm: %f \n" ,  max_rm );
 printf( "Max Au: %f \n",   max_au );
 
 printf( "Product Rm x Au: %f \n",  max_rm *  max_au );
 
 win1_statusbar_content->value( "Result Found." );
 
 
        //time_t timer;
        //struct tm* tm_info;
        srand(time(NULL));
        time(&timer);
        tm_info = localtime(&timer);
        strftime( buffer, PATH_MAX, "Completed: %d/%m/%y %H:%M:%S ", tm_info);
        win1_statusbar_content->value( buffer );
}

Fl_Input *form1_max_pct_f_const=(Fl_Input *)0;

Fl_Input *form1_max_pct_int_step1=(Fl_Input *)0;

Fl_Input *cell_fraction_1_pred=(Fl_Input *)0;

Fl_Input *cell_fraction_3_pred=(Fl_Input *)0;

Fl_Input *cell_fraction_4_pred=(Fl_Input *)0;

Fl_Input *cell_fraction_5_pred=(Fl_Input *)0;

Fl_Input *cell_fraction_6_pred=(Fl_Input *)0;

Fl_Input *cell_fraction_7_pred=(Fl_Input *)0;

Fl_Input *cell_fraction_8_pred=(Fl_Input *)0;

Fl_Input *cell_fraction_2_pred=(Fl_Input *)0;

Fl_Check_Button *form1_tab2_frac_checker_value_f1=(Fl_Check_Button *)0;

Fl_Check_Button *form1_tab2_frac_checker_value_f2=(Fl_Check_Button *)0;

Fl_Check_Button *form1_tab2_frac_checker_value_f3=(Fl_Check_Button *)0;

Fl_Check_Button *form1_tab2_frac_checker_value_f4=(Fl_Check_Button *)0;

Fl_Check_Button *form1_tab2_frac_checker_value_f5=(Fl_Check_Button *)0;

Fl_Check_Button *form1_tab2_frac_checker_value_f6=(Fl_Check_Button *)0;

Fl_Check_Button *form1_tab2_frac_checker_value_f7=(Fl_Check_Button *)0;

Fl_Check_Button *form1_tab2_frac_checker_value_f8=(Fl_Check_Button *)0;

Fl_Check_Button *form1_tab2_frac_checker_value_f1_fixed=(Fl_Check_Button *)0;

Fl_Check_Button *form1_tab2_frac_checker_value_f2_fixed=(Fl_Check_Button *)0;

Fl_Check_Button *form1_tab2_frac_checker_value_f3_fixed=(Fl_Check_Button *)0;

Fl_Check_Button *form1_tab2_frac_checker_value_f4_fixed=(Fl_Check_Button *)0;

Fl_Check_Button *form1_tab2_frac_checker_value_f5_fixed=(Fl_Check_Button *)0;

Fl_Check_Button *form1_tab2_frac_checker_value_f6_fixed=(Fl_Check_Button *)0;

Fl_Check_Button *form1_tab2_frac_checker_value_f7_fixed=(Fl_Check_Button *)0;

Fl_Check_Button *form1_tab2_frac_checker_value_f8_fixed=(Fl_Check_Button *)0;

static void cb_Close(Fl_Button*, void*) {
  exit( 0 );
}

Fl_Output *win1_statusbar_content=(Fl_Output *)0;

Fl_Double_Window* make_window() {
  { win1 = new Fl_Double_Window(835, 750, "FLTK");
    win1->box(FL_DOWN_BOX);
    { Fl_Box* o = new Fl_Box(20, 15, 800, 40, "Mech. Prop. Estimation");
      o->box(FL_ENGRAVED_BOX);
      o->labelfont(1);
    } // Fl_Box* o
    { Fl_Tabs* o = new Fl_Tabs(20, 80, 800, 630, "Mixture Law: User Parameter");
      { Fl_Group* o = new Fl_Group(45, 120, 775, 590, "Setup Constituents");
        { Fl_Group* o = new Fl_Group(45, 140, 750, 365);
          o->box(FL_DOWN_BOX);
          { cell_mech_1_1 = new Fl_Input(250, 205, 95, 25, "Ferrit (20ppm)");
          } // Fl_Input* cell_mech_1_1
          { cell_mech_1_2 = new Fl_Input(355, 205, 95, 25);
          } // Fl_Input* cell_mech_1_2
          { cell_mech_1_3 = new Fl_Input(460, 205, 95, 25);
          } // Fl_Input* cell_mech_1_3
          { cell_mech_3_1 = new Fl_Input(250, 275, 95, 25, "Ferrit (Fe-Mn)");
          } // Fl_Input* cell_mech_3_1
          { cell_mech_3_2 = new Fl_Input(355, 275, 95, 25);
          } // Fl_Input* cell_mech_3_2
          { cell_mech_3_3 = new Fl_Input(460, 275, 95, 25);
          } // Fl_Input* cell_mech_3_3
          { cell_mech_4_1 = new Fl_Input(250, 310, 95, 25, "Pearlite");
          } // Fl_Input* cell_mech_4_1
          { cell_mech_4_2 = new Fl_Input(355, 310, 95, 25);
          } // Fl_Input* cell_mech_4_2
          { cell_mech_4_3 = new Fl_Input(460, 310, 95, 25);
          } // Fl_Input* cell_mech_4_3
          { cell_mech_5_1 = new Fl_Input(250, 345, 95, 25, "Bainit (0,1%C)");
          } // Fl_Input* cell_mech_5_1
          { cell_mech_5_2 = new Fl_Input(355, 345, 95, 25);
          } // Fl_Input* cell_mech_5_2
          { cell_mech_5_3 = new Fl_Input(460, 345, 95, 25);
          } // Fl_Input* cell_mech_5_3
          { cell_mech_6_1 = new Fl_Input(250, 380, 95, 25, "Austenite");
          } // Fl_Input* cell_mech_6_1
          { cell_mech_6_2 = new Fl_Input(355, 380, 95, 25);
          } // Fl_Input* cell_mech_6_2
          { cell_mech_6_3 = new Fl_Input(460, 380, 95, 25);
          } // Fl_Input* cell_mech_6_3
          { cell_mech_7_1 = new Fl_Input(250, 415, 95, 25, "Martensit (0,1%C)");
          } // Fl_Input* cell_mech_7_1
          { cell_mech_7_2 = new Fl_Input(355, 415, 95, 25);
          } // Fl_Input* cell_mech_7_2
          { cell_mech_7_3 = new Fl_Input(460, 415, 95, 25);
          } // Fl_Input* cell_mech_7_3
          { cell_mech_8_2 = new Fl_Input(355, 450, 95, 25);
          } // Fl_Input* cell_mech_8_2
          { cell_mech_8_3 = new Fl_Input(460, 450, 95, 25);
          } // Fl_Input* cell_mech_8_3
          { cell_mech_8_1 = new Fl_Input(250, 450, 95, 25, "Martensit (0,4%C)");
          } // Fl_Input* cell_mech_8_1
          { cell_mech_2_1 = new Fl_Input(250, 240, 95, 25, "Ferrit (0.2 %C)");
          } // Fl_Input* cell_mech_2_1
          { cell_mech_2_2 = new Fl_Input(355, 240, 95, 25);
          } // Fl_Input* cell_mech_2_2
          { cell_mech_2_3 = new Fl_Input(460, 240, 95, 25);
          } // Fl_Input* cell_mech_2_3
          { cell_fraction_3 = new Fl_Input(580, 275, 95, 25);
          } // Fl_Input* cell_fraction_3
          { cell_fraction_4 = new Fl_Input(580, 310, 95, 25);
          } // Fl_Input* cell_fraction_4
          { cell_fraction_1 = new Fl_Input(580, 205, 95, 25);
          } // Fl_Input* cell_fraction_1
          { cell_fraction_2 = new Fl_Input(580, 240, 95, 25);
          } // Fl_Input* cell_fraction_2
          { cell_fraction_7 = new Fl_Input(580, 415, 95, 25);
          } // Fl_Input* cell_fraction_7
          { cell_fraction_8 = new Fl_Input(580, 450, 95, 25);
          } // Fl_Input* cell_fraction_8
          { cell_fraction_5 = new Fl_Input(580, 345, 95, 25);
          } // Fl_Input* cell_fraction_5
          { cell_fraction_6 = new Fl_Input(580, 380, 95, 25);
          } // Fl_Input* cell_fraction_6
          { new Fl_Box(280, 184, 32, 16, "YS, MPa");
          } // Fl_Box* o
          { new Fl_Box(385, 184, 32, 16, "TS, MPa");
          } // Fl_Box* o
          { new Fl_Box(485, 184, 32, 16, "Au, %");
          } // Fl_Box* o
          { new Fl_Box(605, 184, 32, 16, "f, % (constituent)");
          } // Fl_Box* o
          { Fl_Button* o = new Fl_Button(680, 240, 30, 25, "CA");
            o->callback((Fl_Callback*)cb_CA);
          } // Fl_Button* o
          { Fl_Button* o = new Fl_Button(680, 205, 30, 25, "CA");
            o->callback((Fl_Callback*)cb_CA1);
          } // Fl_Button* o
          { Fl_Button* o = new Fl_Button(680, 275, 30, 25, "CA");
            o->callback((Fl_Callback*)cb_CA2);
          } // Fl_Button* o
          { Fl_Button* o = new Fl_Button(680, 310, 30, 25, "CA");
            o->callback((Fl_Callback*)cb_CA3);
          } // Fl_Button* o
          { Fl_Button* o = new Fl_Button(680, 345, 30, 25, "CA");
            o->callback((Fl_Callback*)cb_CA4);
          } // Fl_Button* o
          { Fl_Button* o = new Fl_Button(680, 380, 30, 25, "CA");
            o->callback((Fl_Callback*)cb_CA5);
          } // Fl_Button* o
          { Fl_Button* o = new Fl_Button(680, 415, 30, 25, "CA");
            o->callback((Fl_Callback*)cb_CA6);
          } // Fl_Button* o
          { Fl_Button* o = new Fl_Button(680, 450, 30, 25, "CA");
            o->callback((Fl_Callback*)cb_CA7);
          } // Fl_Button* o
          { Fl_Button* o = new Fl_Button(715, 205, 30, 25, "+");
            o->callback((Fl_Callback*)cb_);
          } // Fl_Button* o
          { Fl_Button* o = new Fl_Button(750, 205, 30, 25, "-");
            o->callback((Fl_Callback*)cb_1);
          } // Fl_Button* o
          { Fl_Button* o = new Fl_Button(715, 240, 30, 25, "+");
            o->callback((Fl_Callback*)cb_2);
          } // Fl_Button* o
          { Fl_Button* o = new Fl_Button(750, 240, 30, 25, "-");
            o->callback((Fl_Callback*)cb_3);
          } // Fl_Button* o
          { Fl_Button* o = new Fl_Button(715, 275, 30, 25, "+");
            o->callback((Fl_Callback*)cb_4);
          } // Fl_Button* o
          { Fl_Button* o = new Fl_Button(750, 275, 30, 25, "-");
            o->callback((Fl_Callback*)cb_5);
          } // Fl_Button* o
          { Fl_Button* o = new Fl_Button(715, 310, 30, 25, "+");
            o->callback((Fl_Callback*)cb_6);
          } // Fl_Button* o
          { Fl_Button* o = new Fl_Button(750, 310, 30, 25, "-");
            o->callback((Fl_Callback*)cb_7);
          } // Fl_Button* o
          { Fl_Button* o = new Fl_Button(715, 345, 30, 25, "+");
            o->callback((Fl_Callback*)cb_8);
          } // Fl_Button* o
          { Fl_Button* o = new Fl_Button(750, 345, 30, 25, "-");
            o->callback((Fl_Callback*)cb_9);
          } // Fl_Button* o
          { Fl_Button* o = new Fl_Button(715, 380, 30, 25, "+");
            o->callback((Fl_Callback*)cb_a);
          } // Fl_Button* o
          { Fl_Button* o = new Fl_Button(750, 380, 30, 25, "-");
            o->callback((Fl_Callback*)cb_b);
          } // Fl_Button* o
          { Fl_Button* o = new Fl_Button(715, 415, 30, 25, "+");
            o->callback((Fl_Callback*)cb_c);
          } // Fl_Button* o
          { Fl_Button* o = new Fl_Button(750, 415, 30, 25, "-");
            o->callback((Fl_Callback*)cb_d);
          } // Fl_Button* o
          { Fl_Button* o = new Fl_Button(715, 450, 30, 25, "+");
            o->callback((Fl_Callback*)cb_e);
          } // Fl_Button* o
          { Fl_Button* o = new Fl_Button(750, 450, 30, 25, "-");
            o->callback((Fl_Callback*)cb_f);
          } // Fl_Button* o
          o->end();
        } // Fl_Group* o
        { Fl_Group* o = new Fl_Group(45, 520, 750, 165);
          o->box(FL_DOWN_BOX);
          { form1_calc1_output1 = new Fl_Input(340, 545, 155, 30);
          } // Fl_Input* form1_calc1_output1
          { form1_calc1_output2 = new Fl_Input(340, 585, 155, 30);
          } // Fl_Input* form1_calc1_output2
          { Fl_Button* o = new Fl_Button(75, 545, 155, 105, "Start");
            o->labelfont(1);
            o->callback((Fl_Callback*)cb_Start);
          } // Fl_Button* o
          { form1_calc1_output3 = new Fl_Input(340, 625, 155, 30);
          } // Fl_Input* form1_calc1_output3
          { new Fl_Box(290, 549, 32, 16, "YS, MPa");
          } // Fl_Box* o
          { new Fl_Box(295, 594, 32, 16, "TS, MPa");
          } // Fl_Box* o
          { new Fl_Box(300, 634, 32, 16, "Au, %");
          } // Fl_Box* o
          { form1_calc1_output1_f = new Fl_Input(515, 545, 235, 30);
          } // Fl_Input* form1_calc1_output1_f
          { form1_calc1_output2_f = new Fl_Input(515, 585, 235, 30);
          } // Fl_Input* form1_calc1_output2_f
          { form1_calc1_output3_f = new Fl_Input(515, 625, 235, 30);
          } // Fl_Input* form1_calc1_output3_f
          o->end();
        } // Fl_Group* o
        o->end();
      } // Fl_Group* o
      { Fl_Group* o = new Fl_Group(45, 125, 715, 335, "Test #1");
        o->hide();
        { Fl_Button* o = new Fl_Button(135, 255, 155, 105, "Start");
          o->labelfont(1);
          o->callback((Fl_Callback*)cb_Start1);
        } // Fl_Button* o
        { form1_max_pct_f_const = new Fl_Input(290, 185, 80, 25, "Max Percent Constituent, f%");
          form1_max_pct_f_const->value( "100" );
        } // Fl_Input* form1_max_pct_f_const
        { form1_max_pct_int_step1 = new Fl_Input(290, 215, 80, 25, "Iteration step size, %");
          form1_max_pct_int_step1->value( "5" );
        } // Fl_Input* form1_max_pct_int_step1
        { cell_fraction_1_pred = new Fl_Input(530, 150, 95, 25, "Ferrit (20ppm)");
        } // Fl_Input* cell_fraction_1_pred
        { cell_fraction_3_pred = new Fl_Input(530, 220, 95, 25, "Ferrit (Fe-Mn)");
        } // Fl_Input* cell_fraction_3_pred
        { cell_fraction_4_pred = new Fl_Input(530, 255, 95, 25, "Pearlite");
        } // Fl_Input* cell_fraction_4_pred
        { cell_fraction_5_pred = new Fl_Input(530, 290, 95, 25, "Bainit (0,1%C)");
        } // Fl_Input* cell_fraction_5_pred
        { cell_fraction_6_pred = new Fl_Input(530, 325, 95, 25, "Austenite");
        } // Fl_Input* cell_fraction_6_pred
        { cell_fraction_7_pred = new Fl_Input(530, 360, 95, 25, "Martensit (0,1%C)");
        } // Fl_Input* cell_fraction_7_pred
        { cell_fraction_8_pred = new Fl_Input(530, 395, 95, 25, "Martensit (0,4%C)");
        } // Fl_Input* cell_fraction_8_pred
        { cell_fraction_2_pred = new Fl_Input(530, 185, 95, 25, "Ferrit (0.2 %C)");
        } // Fl_Input* cell_fraction_2_pred
        { form1_tab2_frac_checker_value_f1 = new Fl_Check_Button(635, 150, 25, 25, "Act");
          form1_tab2_frac_checker_value_f1->down_box(FL_DOWN_BOX);
          form1_tab2_frac_checker_value_f1->value( 1 );
        } // Fl_Check_Button* form1_tab2_frac_checker_value_f1
        { form1_tab2_frac_checker_value_f2 = new Fl_Check_Button(635, 185, 25, 25, "Act");
          form1_tab2_frac_checker_value_f2->down_box(FL_DOWN_BOX);
          form1_tab2_frac_checker_value_f2->value( 1 );
        } // Fl_Check_Button* form1_tab2_frac_checker_value_f2
        { form1_tab2_frac_checker_value_f3 = new Fl_Check_Button(635, 220, 25, 25, "Act");
          form1_tab2_frac_checker_value_f3->down_box(FL_DOWN_BOX);
          form1_tab2_frac_checker_value_f3->value( 1 );
        } // Fl_Check_Button* form1_tab2_frac_checker_value_f3
        { form1_tab2_frac_checker_value_f4 = new Fl_Check_Button(635, 255, 25, 25, "Act");
          form1_tab2_frac_checker_value_f4->down_box(FL_DOWN_BOX);
          form1_tab2_frac_checker_value_f4->value( 1 );
        } // Fl_Check_Button* form1_tab2_frac_checker_value_f4
        { form1_tab2_frac_checker_value_f5 = new Fl_Check_Button(635, 290, 25, 25, "Act");
          form1_tab2_frac_checker_value_f5->down_box(FL_DOWN_BOX);
          form1_tab2_frac_checker_value_f5->value( 1 );
        } // Fl_Check_Button* form1_tab2_frac_checker_value_f5
        { form1_tab2_frac_checker_value_f6 = new Fl_Check_Button(635, 325, 25, 25, "Act");
          form1_tab2_frac_checker_value_f6->down_box(FL_DOWN_BOX);
          form1_tab2_frac_checker_value_f6->value( 1 );
        } // Fl_Check_Button* form1_tab2_frac_checker_value_f6
        { form1_tab2_frac_checker_value_f7 = new Fl_Check_Button(635, 360, 25, 25, "Act");
          form1_tab2_frac_checker_value_f7->down_box(FL_DOWN_BOX);
          form1_tab2_frac_checker_value_f7->value( 1 );
        } // Fl_Check_Button* form1_tab2_frac_checker_value_f7
        { form1_tab2_frac_checker_value_f8 = new Fl_Check_Button(635, 395, 25, 25, "Act");
          form1_tab2_frac_checker_value_f8->down_box(FL_DOWN_BOX);
          form1_tab2_frac_checker_value_f8->value( 1 );
        } // Fl_Check_Button* form1_tab2_frac_checker_value_f8
        { form1_tab2_frac_checker_value_f1_fixed = new Fl_Check_Button(700, 150, 25, 25, "Fixed");
          form1_tab2_frac_checker_value_f1_fixed->down_box(FL_DOWN_BOX);
        } // Fl_Check_Button* form1_tab2_frac_checker_value_f1_fixed
        { form1_tab2_frac_checker_value_f2_fixed = new Fl_Check_Button(700, 185, 25, 25, "Fixed");
          form1_tab2_frac_checker_value_f2_fixed->down_box(FL_DOWN_BOX);
        } // Fl_Check_Button* form1_tab2_frac_checker_value_f2_fixed
        { form1_tab2_frac_checker_value_f3_fixed = new Fl_Check_Button(700, 220, 25, 25, "Fixed");
          form1_tab2_frac_checker_value_f3_fixed->down_box(FL_DOWN_BOX);
        } // Fl_Check_Button* form1_tab2_frac_checker_value_f3_fixed
        { form1_tab2_frac_checker_value_f4_fixed = new Fl_Check_Button(700, 255, 25, 25, "Fixed");
          form1_tab2_frac_checker_value_f4_fixed->down_box(FL_DOWN_BOX);
        } // Fl_Check_Button* form1_tab2_frac_checker_value_f4_fixed
        { form1_tab2_frac_checker_value_f5_fixed = new Fl_Check_Button(700, 290, 25, 25, "Fixed");
          form1_tab2_frac_checker_value_f5_fixed->down_box(FL_DOWN_BOX);
        } // Fl_Check_Button* form1_tab2_frac_checker_value_f5_fixed
        { form1_tab2_frac_checker_value_f6_fixed = new Fl_Check_Button(700, 325, 25, 25, "Fixed");
          form1_tab2_frac_checker_value_f6_fixed->down_box(FL_DOWN_BOX);
        } // Fl_Check_Button* form1_tab2_frac_checker_value_f6_fixed
        { form1_tab2_frac_checker_value_f7_fixed = new Fl_Check_Button(700, 360, 25, 25, "Fixed");
          form1_tab2_frac_checker_value_f7_fixed->down_box(FL_DOWN_BOX);
        } // Fl_Check_Button* form1_tab2_frac_checker_value_f7_fixed
        { form1_tab2_frac_checker_value_f8_fixed = new Fl_Check_Button(700, 395, 25, 25, "Fixed");
          form1_tab2_frac_checker_value_f8_fixed->down_box(FL_DOWN_BOX);
        } // Fl_Check_Button* form1_tab2_frac_checker_value_f8_fixed
        { new Fl_Box(190, 370, 45, 25, "(Note: Calculation can take several hours)");
        } // Fl_Box* o
        o->end();
      } // Fl_Group* o
      o->end();
    } // Fl_Tabs* o
    { Fl_Button* o = new Fl_Button(705, 715, 115, 25, "&Close");
      o->labelfont(1);
      o->callback((Fl_Callback*)cb_Close);
    } // Fl_Button* o
    { win1_statusbar_content = new Fl_Output(20, 715, 680, 25);
      win1_statusbar_content->color(FL_BACKGROUND_COLOR);
      win1_statusbar_content->value( "" );
    } // Fl_Output* win1_statusbar_content
    win1->end();
    win1->resizable(win1);
  } // Fl_Double_Window* win1
  return win1;
}

int main( int argc, char *argv[]) {
  printf( " == FLTK == \n" );
  
    
    if ( argc == 2)
    if ( strcmp( argv[1] , "" ) !=  0 )
    {
            chdir( argv[ 1 ] );
    }
  
  
  
  
    make_window();
    
   
  
    // let s create a trip steel
    cell_fraction_1->value( "0" );
    cell_fraction_2->value( "50" ); // ferrite 
    cell_fraction_3->value( "0" );
    cell_fraction_4->value( "0" );
    cell_fraction_5->value( "40" ); //bainite
    cell_fraction_6->value( "10" ); //austenite
    cell_fraction_7->value( "0" );
    cell_fraction_8->value( "0" );
    
    
    
    
    // ferrite 1 ULC 
    cell_mech_1_1->value( "150" );
    cell_mech_1_2->value( "260" );
    cell_mech_1_3->value( "44" );    
  
    // ferrite 2 LS,Ferrite 0.02
    cell_mech_2_1->value( "330" );
    cell_mech_2_2->value( "550" );
    cell_mech_2_3->value( "35" );    
    
    // ferrite 3, LS CMnSi
    cell_mech_3_1->value( "383" );
    cell_mech_3_2->value( "489" );
    cell_mech_3_3->value( "28" );    
    
    
    
    // Pearlite LS 
    cell_mech_4_1->value( "900" );
    cell_mech_4_2->value( "1000" );
    cell_mech_4_3->value( "10" );    
  
    // Bainite
    cell_mech_5_1->value( "502" );
    cell_mech_5_2->value( "854" );
    cell_mech_5_3->value( "22" );    
    
    // austenite
    cell_mech_6_1->value( "300" );
    cell_mech_6_2->value( "600" );
    cell_mech_6_3->value( "50" );    
    
    // martensite 0.1
    cell_mech_7_1->value( "800" );
    cell_mech_7_2->value( "1200" );
    cell_mech_7_3->value( "5" );    
    
    // martensite 2400
    cell_mech_8_1->value( "2400" );
    cell_mech_8_2->value( "1" );  // set 1 to set model
    cell_mech_8_3->value( "1" );  // idem   
  
    
    win1->show();
  
    Fl::run();
}

void void_user_calc_start1() {
  char stringfoo[PATH_MAX]; 
  char stringfoo_ys[PATH_MAX]; 
  char stringfoo_rm[PATH_MAX]; 
  char stringfoo_au[PATH_MAX]; 
  char commandcalc[PATH_MAX]; 
     
  
  
     snprintf(  commandcalc, sizeof( commandcalc ) , "%s * %s/100 + %s * %s/100    + %s * %s/100  + %s * %s/100  + %s * %s/100  + %s * %s/100  + %s * %s/100  + %s * %s/100   " ,
           cell_mech_1_1->value()   , cell_fraction_1->value() 
         , cell_mech_2_1->value()   , cell_fraction_2->value()          
         , cell_mech_3_1->value()   , cell_fraction_3->value()          
         , cell_mech_4_1->value()   , cell_fraction_4->value()          
         , cell_mech_5_1->value()   , cell_fraction_5->value()          
         , cell_mech_6_1->value()   ,  cell_fraction_6->value()          
         , cell_mech_7_1->value()   , cell_fraction_7->value()          
         , cell_mech_8_1->value()   , cell_fraction_8->value()   ) ; 
  
     snprintf( stringfoo , sizeof( stringfoo ), "%.3E", te_interp(  commandcalc   , 0 ) );   
     form1_calc1_output1->value( stringfoo  );
     snprintf( stringfoo , sizeof( stringfoo ), "%f", te_interp(  commandcalc   , 0 ) );   
     form1_calc1_output1_f->value( stringfoo  );
     strncpy( stringfoo_ys, stringfoo, PATH_MAX );
     
     
     
     
     
     
     snprintf(  commandcalc, sizeof( commandcalc ) , "%s * %s/100 + %s * %s/100    + %s * %s/100  + %s * %s/100  + %s * %s/100  + %s * %s/100  + %s * %s/100  + %s * %s/100   " ,
           cell_mech_1_2->value()   , cell_fraction_1->value() 
         , cell_mech_2_2->value()   , cell_fraction_2->value()          
         , cell_mech_3_2->value()   , cell_fraction_3->value()          
         , cell_mech_4_2->value()   , cell_fraction_4->value()          
         , cell_mech_5_2->value()   , cell_fraction_5->value()          
         , cell_mech_6_2->value()   , cell_fraction_6->value()          
         , cell_mech_7_2->value()   , cell_fraction_7->value()          
         , cell_mech_8_2->value()   , cell_fraction_8->value()   ) ; 
  
     snprintf( stringfoo , sizeof( stringfoo ), "%.3E", te_interp(  commandcalc   , 0 ) );   
     form1_calc1_output2->value( stringfoo  );
     snprintf( stringfoo , sizeof( stringfoo ), "%f", te_interp(  commandcalc   , 0 ) );   
     form1_calc1_output2_f->value( stringfoo  );
     strncpy( stringfoo_rm, stringfoo, PATH_MAX );
  
  
     
  
     
     
        snprintf(  commandcalc, sizeof( commandcalc ) , "%s * %s/100 + %s * %s/100    + %s * %s/100  + %s * %s/100  + %s * %s/100  + %s * %s/100  + %s * %s/100  + %s * %s/100   " ,
           cell_mech_1_3->value()   , cell_fraction_1->value() 
         , cell_mech_2_3->value()   , cell_fraction_2->value()          
         , cell_mech_3_3->value()   , cell_fraction_3->value()          
         , cell_mech_4_3->value()   , cell_fraction_4->value()          
         , cell_mech_5_3->value()   , cell_fraction_5->value()          
         , cell_mech_6_3->value()   , cell_fraction_6->value()          
         , cell_mech_7_3->value()   , cell_fraction_7->value()          
         , cell_mech_8_3->value()   , cell_fraction_8->value()   ) ; 
  
     snprintf( stringfoo , sizeof( stringfoo ), "%.3E", te_interp(  commandcalc   , 0 ) );   
     form1_calc1_output3->value( stringfoo  );
     snprintf( stringfoo , sizeof( stringfoo ), "%f", te_interp(  commandcalc   , 0 ) );   
     form1_calc1_output3_f->value( stringfoo  );
     strncpy( stringfoo_au, stringfoo, PATH_MAX );
     
  
  
  
  
  
  
     if ( ( atof( cell_fraction_1->value()) 
     + atof( cell_fraction_2->value()) 
     + atof( cell_fraction_3->value()) 
     + atof( cell_fraction_4->value()) 
     + atof( cell_fraction_5->value()) 
     + atof( cell_fraction_6->value()) 
     + atof( cell_fraction_7->value()) 
     + atof( cell_fraction_8->value()) ) ==  atof( form1_max_pct_f_const->value(  ) )   ) 
     
   //  if ( atof( stringfoo_ys  ) * atof( stringfoo_rm  ) * atof( stringfoo_au  )    > (max_rm * max_au * max_ys ) ) 
     if ( atof( stringfoo_rm  ) * atof( stringfoo_au  )    > (max_rm * max_au  ) ) 
     {
         max_rm = atof( stringfoo_rm ); 
         max_au = atof( stringfoo_au );
         max_ys = atof( stringfoo_ys ); 
         
         cell_fraction_1_pred->value(  cell_fraction_1->value()  ); 
         cell_fraction_2_pred->value(  cell_fraction_2->value()  ); 
         cell_fraction_3_pred->value(  cell_fraction_3->value()  ); 
         cell_fraction_4_pred->value(  cell_fraction_4->value()  ); 
  
         cell_fraction_5_pred->value(  cell_fraction_5->value()  ); 
         cell_fraction_6_pred->value(  cell_fraction_6->value()  ); 
         cell_fraction_7_pred->value(  cell_fraction_7->value()  ); 
         cell_fraction_8_pred->value(  cell_fraction_8->value()  ); 
         
     }
}
